from __future__ import annotations

import base64
from typing import TYPE_CHECKING

from attrs import define, field, validators
from pycocotools import mask as cocomask

from t4_devkit.typing import Roi

from ..name import SchemaName
from .autolabel_metadata import AutolabelModel
from .base import SchemaBase
from .registry import SCHEMAS

if TYPE_CHECKING:
    from t4_devkit.typing import NDArrayU8

__all__ = ["ObjectAnn", "RLEMask"]


@define
class RLEMask:
    """A dataclass to represent segmentation mask compressed by RLE.

    Attributes:
        size (list[int, int]): Size of image ordering (width, height).
        counts (str): RLE compressed mask data.
    """

    size: list[int, int] = field(validator=validators.deep_iterable(validators.instance_of(int)))
    counts: str = field(validator=validators.instance_of(str))

    @property
    def width(self) -> int:
        return self.size[0]

    @property
    def height(self) -> int:
        return self.size[1]

    def decode(self) -> NDArrayU8:
        """Decode segmentation mask.

        Returns:
            Decoded mask in shape of (H, W).
        """
        counts = base64.b64decode(self.counts)
        data = {"counts": counts, "size": self.size}
        return cocomask.decode(data)


@define(slots=False)
@SCHEMAS.register(SchemaName.OBJECT_ANN)
class ObjectAnn(SchemaBase):
    """A dataclass to represent schema table of `object_ann.json`.

    Attributes:
        token (str): Unique record identifier.
        sample_data_token (str): Foreign key pointing to the sample data, which must be a keyframe image.
        instance_token (str): Foreign key pointing to the instance.
        category_token (str): Foreign key pointing to the object category.
        attribute_tokens (list[str]): Foreign keys. List of attributes for this annotation.
        bbox (Roi): Annotated bounding box. Given as [xmin, ymin, xmax, ymax].
        mask (RLEMask): Instance mask using the COCO format compressed by RLE.
        orientation (float | None, optional): Orientation of the arrow shape within the bounding box, in radians. Present only for categories where `has_orientation` is true (e.g., traffic light arrows).
        number (int | None, optional): The digit displayed within the bounding box. Present only for categories where `has_number` is true (e.g., numeric traffic lights).
        automatic_annotation (bool, optional): Indicates if the annotation is fully generated by an ML model.
            If any part is manually modified or annotated by human this value is False.
        autolabel_metadata (list[AutolabelModel] | None, optional): List of models used for autolabeling. Required if `automatic_annotation` is `true`.

    Shortcuts:
    ---------
        category_name (str): Category name. This should be set after instantiated.
    """

    sample_data_token: str = field(validator=validators.instance_of(str))
    instance_token: str = field(validator=validators.instance_of(str))
    category_token: str = field(validator=validators.instance_of(str))
    attribute_tokens: list[str] = field(
        validator=validators.deep_iterable(validators.instance_of(str))
    )
    bbox: Roi = field(converter=Roi)
    mask: RLEMask | None = field(
        default=None,
        converter=lambda x: RLEMask(**x) if isinstance(x, dict) else x,
        validator=validators.optional(validators.instance_of(RLEMask)),
    )
    orientation: float | None = field(
        default=None, validator=validators.optional(validators.instance_of(float))
    )
    number: int | None = field(
        default=None, validator=validators.optional(validators.instance_of(int))
    )
    automatic_annotation: bool = field(default=False, validator=validators.instance_of(bool))
    autolabel_metadata: list[AutolabelModel] | None = field(
        default=None,
        converter=lambda x: [AutolabelModel(**model) if isinstance(model, dict) else model for model in x] if isinstance(x, list) else x,
        validator=validators.optional(validators.deep_iterable(validators.instance_of(AutolabelModel)))
    )

    # shortcuts
    category_name: str = field(init=False, factory=str)
