from __future__ import annotations

from attrs import converters, define, field, validators

from t4_devkit.common.converter import to_quaternion
from t4_devkit.typing import Quaternion, Vector3

from ..name import SchemaName
from .autolabel_metadata import AutolabelModel
from .base import SchemaBase
from .registry import SCHEMAS

__all__ = ["SampleAnnotation"]


@define(slots=False)
@SCHEMAS.register(SchemaName.SAMPLE_ANNOTATION)
class SampleAnnotation(SchemaBase):
    """A dataclass to represent schema table of `sample_annotation.json`.

    Attributes:
        token (str): Unique record identifier.
        sample_token (str): Foreign key pointing the sample.
        instance_token (str): Foreign key pointing the object instance.
        attribute_tokens (list[str]): Foreign keys. List of attributes for this annotation.
        visibility_token (str): Foreign key pointing the object visibility.
        translation (Vector3): Bounding box location given as [x, y, z] in [m].
        size (Vector3): Bounding box size given as [width, length, height] in [m].
        rotation (Quaternion): Bounding box orientation given as quaternion [w, x, y, z].
        num_lidar_pts (int): Number of lidar points in this box.
        num_radar_pts (int): Number of radar points in this box.
        next (str): Foreign key pointing the annotation that follows this in time.
            Empty if this is the last annotation for this object.
        prev (str): Foreign key pointing the annotation that precedes this in time.
            Empty if this the first annotation for this object.
        velocity (Vector3 | None, optional): Bounding box velocity given as
            [vx, vy, vz] in [m/s].
        acceleration (Vector3 | None, optional): Bonding box acceleration
            given as [ax, ay, av] in [m/s^2].
        automatic_annotation (bool, optional): Indicates if the annotation is fully generated by an ML model.
            If any part is manually modified or annotated by human this value is False.
        autolabel_metadata (list[AutolabelModel] | None, optional): List of models used for autolabeling. Required if `automatic_annotation` is `true`.

    Shortcuts:
    ---------
        category_name (str): Category name. This should be set after instantiated.
    """

    sample_token: str = field(validator=validators.instance_of(str))
    instance_token: str = field(validator=validators.instance_of(str))
    attribute_tokens: list[str] = field(
        validator=validators.deep_iterable(validators.instance_of(str))
    )
    visibility_token: str = field(validator=validators.instance_of(str))
    translation: Vector3 = field(converter=Vector3)
    size: Vector3 = field(converter=Vector3)
    rotation: Quaternion = field(converter=to_quaternion)
    num_lidar_pts: int = field(validator=validators.instance_of(int))
    num_radar_pts: int = field(validator=validators.instance_of(int))
    next: str = field(validator=validators.instance_of(str))  # noqa: A003
    prev: str = field(validator=validators.instance_of(str))
    velocity: Vector3 | None = field(default=None, converter=converters.optional(Vector3))
    acceleration: Vector3 | None = field(default=None, converter=converters.optional(Vector3))
    automatic_annotation: bool = field(default=False, validator=validators.instance_of(bool))
    autolabel_metadata: list[AutolabelModel] | None = field(
        default=None,
        converter=lambda x: [
            AutolabelModel(**model) if isinstance(model, dict) else model for model in x
        ]
        if isinstance(x, list)
        else x,
        validator=validators.optional(
            validators.deep_iterable(validators.instance_of(AutolabelModel))
        ),
    )

    # shortcuts
    category_name: str = field(init=False, factory=str)
