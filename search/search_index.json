{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>t4-devkit</code>","text":"<p><code>t4-devkit</code> is a toolkit to load and operate T4 dataset.</p>"},{"location":"#feature-supports","title":"Feature supports","text":""},{"location":"#visualization","title":"Visualization","text":"Feature Task Support 3D 3D Boxes \u2705 PointCloud Segmentation Raw PointCloud \u2705 3D Trajectories \u2705 TF Links \u2705 2D 2D Boxes \u2705 Image Segmentation \u2705 Raw Image \u2705 Raw PointCloud on Image \u2705 Map Vector Map \u2705 Ego Position on Street View \u2705"},{"location":"install/","title":"Installation","text":""},{"location":"install/#for-users-install-via-github","title":"[For Users] Install via GitHub","text":"<p>Note that the following command installs the latest <code>main</code> branch:</p> <pre><code># e.g) with pip\npip install git+https://github.com/tier4/t4-devkit.git\n</code></pre> <p>By specifying <code>@&lt;TAG_OR_BRANCH&gt;</code>, you can install the particular version of <code>t4-devkit</code>:</p> <pre><code># e.g) with pip\npip install git+https://github.com/tier4/t4-devkit.git@main\n</code></pre>"},{"location":"install/#for-developers-install-from-source","title":"[For Developers] Install from source","text":"<p>You need to install <code>uv</code>. For details, please refer to OFFICIAL DOCUMENT.</p> <pre><code>git clone git@github.com:tier4/t4-devkit.git\ncd t4-devkit\nuv sync --python 3.10\n</code></pre> <p>The virtual environment can be activated with:</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"apis/common/","title":"<code>common</code>","text":""},{"location":"apis/common/#t4_devkit.common.converter.to_quaternion","title":"to_quaternion","text":"<pre><code>to_quaternion(x: RotationLike) -&gt; Quaternion\n</code></pre> <p>Convert input rotation like array to <code>Quaternion</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Quaternion</code> (              <code>Quaternion</code> )          \u2013            <p>Converted instance.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.converter.to_quaternion(x)","title":"<code>x</code>","text":"(<code>RotationLike</code>)           \u2013            <p>Rotation matrix or quaternion.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points","title":"view_points","text":"<pre><code>view_points(\n    points: NDArrayF64,\n    intrinsic: CameraIntrinsicLike,\n    distortion: CameraDistortionLike | None = None,\n    *,\n    normalize: bool = True,\n) -&gt; NDArrayF64\n</code></pre> <p>Project 3d points on a 2d plane. It can be used to implement both perspective and orthographic projections.</p> <p>It first applies the dot product between the points and the view.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>NDArrayF64</code>           \u2013            <p>Projected points in the shape of (3, n). If <code>normalize=False</code>, the 3rd coordinate is the height.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(points)","title":"<code>points</code>","text":"(<code>NDArrayF64</code>)           \u2013            <p>Matrix of points, which is the shape of (3, n) and (x, y, z) is along each column.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(intrinsic)","title":"<code>intrinsic</code>","text":"(<code>CameraIntrinsicLike</code>)           \u2013            <p>nxn camera intrinsic matrix (n &lt;= 4).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(distortion)","title":"<code>distortion</code>","text":"(<code>CameraDistortionLike | None</code>, default:                   <code>None</code> )           \u2013            <p>Camera distortion coefficients, which is the shape of (n,) (n &gt;= 5).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(normalize)","title":"<code>normalize</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to normalize the remaining coordinate (along the 3rd axis).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image","title":"is_box_in_image","text":"<pre><code>is_box_in_image(\n    box: Box3D,\n    intrinsic: CameraIntrinsicLike,\n    img_size: tuple[int, int],\n    visibility: VisibilityLevel = VisibilityLevel.NONE,\n) -&gt; bool\n</code></pre> <p>Check if a box is visible inside of an image without considering its occlusions.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Return True if visibility condition is satisfied.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(box)","title":"<code>box</code>","text":"(<code>Box3D</code>)           \u2013            <p>The box to be checked.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(intrinsic)","title":"<code>intrinsic</code>","text":"(<code>CameraIntrinsicLike</code>)           \u2013            <p>3x3 camera intrinsic matrix.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(img_size)","title":"<code>img_size</code>","text":"(<code>tuple[int, int]</code>)           \u2013            <p>Image size in the order of (width, height).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(visibility)","title":"<code>visibility</code>","text":"(<code>VisibilityLevel</code>, default:                   <code>NONE</code> )           \u2013            <p>Enum member of VisibilityLevel.</p>"},{"location":"apis/common/#t4_devkit.common.io.load_json","title":"load_json","text":"<pre><code>load_json(filename: str) -&gt; Any\n</code></pre> <p>Load json data from specified filepath.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Loaded data.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.io.load_json(filename)","title":"<code>filename</code>","text":"(<code>str</code>)           \u2013            <p>File path to .json file.</p>"},{"location":"apis/common/#t4_devkit.common.io.save_json","title":"save_json","text":"<pre><code>save_json(data: Any, filename: str) -&gt; None\n</code></pre> <p>Save data into json file.</p> <p>Parameters:</p>"},{"location":"apis/common/#t4_devkit.common.io.save_json(data)","title":"<code>data</code>","text":"(<code>Any</code>)           \u2013            <p>Data to be saved.</p>"},{"location":"apis/common/#t4_devkit.common.io.save_json(filename)","title":"<code>filename</code>","text":"(<code>str</code>)           \u2013            <p>File path to save as json.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.DBException","title":"DBException","text":"<p>A dataclass to store error message of the corresponding dataset.</p> <p>Attributes:</p> <ul> <li> <code>dataset_id</code>               (<code>str</code>)           \u2013            <p>Dataset ID.</p> </li> <li> <code>version</code>               (<code>str | None</code>)           \u2013            <p>Dataset version.</p> </li> <li> <code>status</code>               (<code>DBStatus</code>)           \u2013            <p>Status of the dataset.</p> </li> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>Error or warning message.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.sanity.DBException.is_ok","title":"is_ok","text":"<pre><code>is_ok() -&gt; bool\n</code></pre> <p>Return True if the status is OK.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check","title":"sanity_check","text":"<pre><code>sanity_check(\n    db_root: str | Path,\n    *,\n    revision: str | None = None,\n    include_warning: bool = False,\n) -&gt; DBException\n</code></pre> <p>Perform sanity check and report exception or warning encountered while loading the dataset.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DBException</code>           \u2013            <p>Exception or warning if exits, otherwise returns None.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check(db_root)","title":"<code>db_root</code>","text":"(<code>str | Path</code>)           \u2013            <p>Path to root directory of the dataset.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check(revision)","title":"<code>revision</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Specific version of the dataset. If None, search the latest one.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check(include_warning)","title":"<code>include_warning</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates whether to report warnings.</p>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclasses","title":"serialize_dataclasses","text":"<pre><code>serialize_dataclasses(data: list[Any]) -&gt; list[dict]\n</code></pre> <p>Serialize list of attrs' dataclasses into list of dict.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>Serialized list of dict data.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclasses(data)","title":"<code>data</code>","text":"(<code>list[Any]</code>)           \u2013            <p>List of attrs' dataclasses.</p>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclass","title":"serialize_dataclass","text":"<pre><code>serialize_dataclass(data: Any) -&gt; dict[str, Any]\n</code></pre> <p>Serialize attrs' dataclasses into dict.</p> <p>Note that all fields specified with <code>init=False</code> will be skipped to be serialized.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>Serialized dict.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclass(data)","title":"<code>data</code>","text":"(<code>Any</code>)           \u2013            <p>Dataclass object.</p>"},{"location":"apis/common/#t4_devkit.common.timestamp.us2sec","title":"us2sec","text":"<pre><code>us2sec(timestamp: ScalarLike) -&gt; float\n</code></pre> <p>Convert timestamp from micro seconds [us] to seconds [s].</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>Timestamp in [s].</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.timestamp.us2sec(timestamp)","title":"<code>timestamp</code>","text":"(<code>ScalarLike</code>)           \u2013            <p>Timestamp in [us].</p>"},{"location":"apis/common/#t4_devkit.common.timestamp.sec2us","title":"sec2us","text":"<pre><code>sec2us(timestamp: ScalarLike) -&gt; float\n</code></pre> <p>Convert timestamp from seconds [s] to micro seconds [us].</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>Timestamp in [us].</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.timestamp.sec2us(timestamp)","title":"<code>timestamp</code>","text":"(<code>ScalarLike</code>)           \u2013            <p>Timestamp in [s].</p>"},{"location":"apis/dataclass/","title":"<code>dataclass</code>","text":""},{"location":"apis/dataclass/#t4_devkit.dataclass.label.SemanticLabel","title":"SemanticLabel","text":"<p>A dataclass to represent semantic labels.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Label name.</p> </li> <li> <code>attributes</code>               (<code>list[str]</code>)           \u2013            <p>List of attribute names.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D","title":"Box3D","text":"<p>A class to represent 3D box.</p> <p>Attributes:</p> <ul> <li> <code>unix_time</code>               (<code>int</code>)           \u2013            <p>Unix timestamp.</p> </li> <li> <code>frame_id</code>               (<code>str</code>)           \u2013            <p>Coordinates frame ID where the box is with respect to.</p> </li> <li> <code>semantic_label</code>               (<code>SemanticLabel</code>)           \u2013            <p><code>SemanticLabel</code> object.</p> </li> <li> <code>confidence</code>               (<code>float</code>)           \u2013            <p>Confidence score of the box.</p> </li> <li> <code>uuid</code>               (<code>str | None</code>)           \u2013            <p>Unique box identifier.</p> </li> <li> <code>position</code>               (<code>Vector3</code>)           \u2013            <p>Box center position (x, y, z).</p> </li> <li> <code>rotation</code>               (<code>Quaternion</code>)           \u2013            <p>Box rotation quaternion.</p> </li> <li> <code>shape</code>               (<code>Shape</code>)           \u2013            <p><code>Shape</code> object.</p> </li> <li> <code>velocity</code>               (<code>Vector3 | None</code>)           \u2013            <p>Box velocity (vx, vy, vz).</p> </li> <li> <code>num_points</code>               (<code>int | None</code>)           \u2013            <p>The number of points inside the box.</p> </li> <li> <code>visibility</code>               (<code>VisibilityLevel</code>)           \u2013            <p>Box visibility.</p> </li> <li> <code>future</code>               (<code>Future | None</code>)           \u2013            <p>Box trajectory in the future of each mode.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # without future\n&gt;&gt;&gt; box3d = Box3D(\n...     unix_time=100,\n...     frame_id=\"base_link\",\n...     semantic_label=SemanticLabel(\"car\"),\n...     position=(1.0, 1.0, 1.0),\n...     rotation=(0.0, 0.0, 0.0, 1.0),\n...     shape=Shape(shape_type=ShapeType.BOUNDING_BOX, size=(1.0, 1.0, 1.0)),\n...     velocity=(1.0, 1.0, 1.0),\n...     confidence=1.0,\n...     uuid=\"car3d_0\",\n... )\n&gt;&gt;&gt; # with future\n&gt;&gt;&gt; box3d = box3d.with_future(\n...     waypoints=[[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0]]],\n...     confidences=[1.0],\n... )\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.size","title":"size  <code>property</code>","text":"<pre><code>size: Vector3\n</code></pre> <p>Return the box size in the order of (width, length, height).</p> <p>Returns:</p> <ul> <li> <code>Vector3</code>           \u2013            <p>(width, length, height) values.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future","title":"with_future","text":"<pre><code>with_future(\n    timestamps: ArrayLike,\n    confidences: ArrayLike,\n    waypoints: ArrayLike,\n) -&gt; Self\n</code></pre> <p>Return a self instance setting <code>future</code> attribute.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance after setting <code>future</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future(timestamps)","title":"<code>timestamps</code>","text":"(<code>ArrayLike</code>)           \u2013            <p>Array of future timestamps at each waypoint in the shape of (T).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future(confidences)","title":"<code>confidences</code>","text":"(<code>ArrayLike</code>)           \u2013            <p>Array of confidences for each mode in the shape of (M).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future(waypoints)","title":"<code>waypoints</code>","text":"(<code>ArrayLike</code>)           \u2013            <p>Array of waypoints for each mode in the shape of (M, T, D).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.translate","title":"translate","text":"<pre><code>translate(x: Vector3Like) -&gt; None\n</code></pre> <p>Apply a translation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.translate(x)","title":"<code>x</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D translation vector in the order of (x, y, z).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.rotate","title":"rotate","text":"<pre><code>rotate(q: RotationLike) -&gt; None\n</code></pre> <p>Apply a rotation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.rotate(q)","title":"<code>q</code>","text":"(<code>RotationLike</code>)           \u2013            <p>Rotation quaternion.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.corners","title":"corners","text":"<pre><code>corners(box_scale: float = 1.0) -&gt; NDArrayF64\n</code></pre> <p>Return the bounding box corners.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>NDArrayF64</code>           \u2013            <p>First four corners are the ones facing forward. The last four are the ones facing backwards, in the shape of (8, 3).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.corners(box_scale)","title":"<code>box_scale</code>","text":"(<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Multiply size by this factor to scale the box.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box2D","title":"Box2D","text":"<p>A class to represent 2D box.</p> <p>Attributes:</p> <ul> <li> <code>unix_time</code>               (<code>int</code>)           \u2013            <p>Unix timestamp.</p> </li> <li> <code>frame_id</code>               (<code>str</code>)           \u2013            <p>Coordinates frame ID where the box is with respect to.</p> </li> <li> <code>semantic_label</code>               (<code>SemanticLabel</code>)           \u2013            <p><code>SemanticLabel</code> object.</p> </li> <li> <code>confidence</code>               (<code>float</code>)           \u2013            <p>Confidence score of the box.</p> </li> <li> <code>uuid</code>               (<code>str | None</code>)           \u2013            <p>Unique box identifier.</p> </li> <li> <code>roi</code>               (<code>Roi | None</code>)           \u2013            <p><code>Roi</code> object.</p> </li> <li> <code>position</code>               (<code>Vector3 | None</code>)           \u2013            <p>3D position (x, y, z).</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # without 3D position\n&gt;&gt;&gt; box2d = Box2D(\n...     unix_time=100,\n...     frame_id=\"camera\",\n...     semantic_label=SemanticLabel(\"car\"),\n...     roi=(100, 100, 50, 50),\n...     confidence=1.0,\n...     uuid=\"car2d_0\",\n... )\n&gt;&gt;&gt; # with 3D position\n&gt;&gt;&gt; box2d = box2d.with_position(position=(1.0, 1.0, 1.0))\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box2D.with_position","title":"with_position","text":"<pre><code>with_position(position: Vector3Like) -&gt; Self\n</code></pre> <p>Return a self instance setting <code>position</code> attribute.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance after setting <code>position</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box2D.with_position(position)","title":"<code>position</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D position.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.distance_box","title":"distance_box","text":"<pre><code>distance_box(\n    box: BoxLike, tf_matrix: HomogeneousMatrix\n) -&gt; float | None\n</code></pre> <p>Return a box distance from <code>base_link</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>Expecting type of box is <code>Box2D</code> or <code>Box3D</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: Return <code>None</code> if the type of box is <code>Box2D</code> and its <code>position</code> is <code>None</code>, otherwise returns distance from <code>base_link</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.distance_box(box)","title":"<code>box</code>","text":"(<code>BoxLike</code>)           \u2013            <p>A box.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.distance_box(tf_matrix)","title":"<code>tf_matrix</code>","text":"(<code>HomogeneousMatrix</code>)           \u2013            <p>Transformation matrix.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud","title":"PointCloud","text":"<p>Abstract base dataclass for pointcloud data.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.num_dims","title":"num_dims  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>num_dims() -&gt; int\n</code></pre> <p>Return the number of the point dimensions.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of the point dimensions.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.from_file","title":"from_file  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_file(filepath: str) -&gt; Self\n</code></pre> <p>Create an object from pointcloud file.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.from_file(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>File path of the pointcloud file.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.num_points","title":"num_points","text":"<pre><code>num_points() -&gt; int\n</code></pre> <p>Return the number of points.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.LidarPointCloud","title":"LidarPointCloud","text":"<p>A dataclass to represent lidar pointcloud.</p> <p>Attributes:</p> <ul> <li> <code>points</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Points matrix in the shape of (4, N).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.RadarPointCloud","title":"RadarPointCloud","text":"<p>A dataclass to represent radar pointcloud.</p> <p>Attributes:</p> <ul> <li> <code>points</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Points matrix in the shape of (18, N).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.SegmentationPointCloud","title":"SegmentationPointCloud","text":"<p>A dataclass to represent segmentation pointcloud.</p> <p>Attributes:</p> <ul> <li> <code>points</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Points matrix in the shape of (4, N).</p> </li> <li> <code>labels</code>               (<code>NDArrayU8</code>)           \u2013            <p>Label matrix.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.ShapeType","title":"ShapeType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.ShapeType.from_name","title":"from_name  <code>classmethod</code>","text":"<pre><code>from_name(name: str) -&gt; Self\n</code></pre> <p>Return an enum object from the name of the member.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Enum object.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.ShapeType.from_name(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>Name of enum member.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.Shape","title":"Shape","text":"<p>A dataclass to represent the 3D box shape.</p> <p>Attributes:</p> <ul> <li> <code>shape_type</code>               (<code>ShapeType</code>)           \u2013            <p>Box shape type.</p> </li> <li> <code>size</code>               (<code>Vector3</code>)           \u2013            <p>Box size in the order of (width, length, height).</p> </li> <li> <code>footprint</code>               (<code>Polygon</code>)           \u2013            <p>Polygon of footprint.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; shape = Shape(\n...     shape_type=ShapeType.BOUNDING_BOX,\n...     size=[1.0, 1.0, 1.0]\n... )\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath","title":"ObjectPath","text":"<p>A dataclass to represent object path including timestamps, confidences, and waypoints.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.num_mode","title":"num_mode  <code>property</code>","text":"<pre><code>num_mode: int\n</code></pre> <p>Return the number of trajectory modes.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of trajectory modes.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.num_timestamp","title":"num_timestamp  <code>property</code>","text":"<pre><code>num_timestamp: int\n</code></pre> <p>Return the number of timestamps.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of timestamps.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: tuple[int, ...]\n</code></pre> <p>Return the shape of the waypoints matrix.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, ...]</code>           \u2013            <p>Shape of the matrix (M, T, D).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.translate","title":"translate","text":"<pre><code>translate(x: Vector3Like) -&gt; None\n</code></pre> <p>Apply a translation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.translate(x)","title":"<code>x</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D translation vector.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.rotate","title":"rotate","text":"<pre><code>rotate(q: RotationLike) -&gt; None\n</code></pre> <p>Apply a rotation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.ObjectPath.rotate(q)","title":"<code>q</code>","text":"(<code>RotationLike</code>)           \u2013            <p>Rotation quaternion.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Past","title":"Past","text":"<p>               Bases: <code>ObjectPath</code></p> <p>Represent the past trajectory features.</p> <p>Note that the expected shape of waypoints is (1, T, D).</p> <p>Attributes:</p> <ul> <li> <code>timestamps</code>               (<code>NDArrayInt</code>)           \u2013            <p>Sequence of timestamps (T,).</p> </li> <li> <code>confidences</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Confidences array for the mode (1,).</p> </li> <li> <code>waypoints</code>               (<code>Trajectory</code>)           \u2013            <p>Waypoints matrix in the shape of (1, T, 3).</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; past = Past(\n...     timestamps=[1.0, 2.0]\n...     confidences=[1.0],\n...     waypoints=[[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]],\n... )\n# Get the number of modes.\n&gt;&gt;&gt; len(past)\n1\n# Access the shape of waypoints matrix: (M, T, 3).\n&gt;&gt;&gt; past.shape\n(1, 2, 3)\n# Access waypoints as subscriptable.\n&gt;&gt;&gt; past[0] # for mode0\narray([[1., 1., 1.],\n       [2., 2., 2.]])\n&gt;&gt;&gt; past[0, 0] # point0 at mode0\narray([1., 1., 1.])\n# Access confidence and waypoints for each mode as iterable.\n&gt;&gt;&gt; for i, (timestamp, confidence, waypoints) in past:\n...     print(f\"Mode{i}: {timestamp}, {confidence}, {waypoints}\")\n...\nMode0: 1.0, 1.0, [[1. 1. 1.] [2. 2. 2.]]\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Future","title":"Future","text":"<p>               Bases: <code>ObjectPath</code></p> <p>Represent the future trajectory features.</p> <p>Note that the expected shape of waypoints is (M, T, D).</p> <p>Attributes:</p> <ul> <li> <code>timestamps</code>               (<code>NDArrayInt</code>)           \u2013            <p>Sequence of timestamps (T,).</p> </li> <li> <code>confidences</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Confidences array for each mode (M,).</p> </li> <li> <code>waypoints</code>               (<code>Trajectory</code>)           \u2013            <p>Waypoints matrix in the shape of (M, T, 3).</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; future = Future(\n...     timestamps=[1.0, 2.0]\n...     confidences=[1.0],\n...     waypoints=[[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]],\n... )\n# Get the number of modes.\n&gt;&gt;&gt; len(future)\n1\n# Access the shape of waypoints matrix: (M, T, 3).\n&gt;&gt;&gt; future.shape\n(1, 2, 3)\n# Access waypoints as subscriptable.\n&gt;&gt;&gt; future[0] # for mode0\narray([[1., 1., 1.],\n       [2., 2., 2.]])\n&gt;&gt;&gt; future[0, 0] # point0 at mode0\narray([1., 1., 1.])\n# Access confidence and waypoints for each mode as iterable.\n&gt;&gt;&gt; for i, (timestamp, confidence, waypoints) in future:\n...     print(f\"Mode{i}: {timestamp}, {confidence}, {waypoints}\")\n...\nMode0: 1.0, 1.0, [[1. 1. 1.] [2. 2. 2.]]\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer","title":"TransformBuffer","text":"<p>A buffer class to store transformation matrices.</p> <p>Attributes:</p> <ul> <li> <code>buffer</code>               (<code>dict[tuple[str, str], HomogeneousMatrix]</code>)           \u2013            <p>Matrix buffer whose key is <code>(src, dst)</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.set_transform","title":"set_transform","text":"<pre><code>set_transform(matrix: HomogeneousMatrix) -&gt; None\n</code></pre> <p>Set transform matrix to the buffer. Also, if its inverse transformation has not been registered, registers it too.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.set_transform(matrix)","title":"<code>matrix</code>","text":"(<code>HomogeneousMatrix</code>)           \u2013            <p>Transformation matrix.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.lookup_transform","title":"lookup_transform","text":"<pre><code>lookup_transform(\n    src: str, dst: str\n) -&gt; HomogeneousMatrix | None\n</code></pre> <p>Look up the transform matrix corresponding to the <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>HomogeneousMatrix | None</code>           \u2013            <p>Returns <code>HomogeneousMatrix</code> if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.lookup_transform(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.lookup_transform(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_translate","title":"do_translate","text":"<pre><code>do_translate(\n    src: str, dst: str, *args, **kwargs\n) -&gt; TranslateItemLike | None\n</code></pre> <p>Translate specified items with the matrix corresponding to <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>TranslateItemLike | None</code>           \u2013            <p>TranslateItemLike | None: Returns translated items if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_translate(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_translate(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_rotate","title":"do_rotate","text":"<pre><code>do_rotate(\n    src: str, dst: str, *args, **kwargs\n) -&gt; RotateItemLike | None\n</code></pre> <p>Rotate specified items with the matrix corresponding to <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>RotateItemLike | None</code>           \u2013            <p>TranslateItemLike | None: Returns rotated items if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_rotate(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_rotate(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_transform","title":"do_transform","text":"<pre><code>do_transform(\n    src: str, dst: str, *args, **kwargs\n) -&gt; TransformItemLike | None\n</code></pre> <p>Transform specified items with the matrix corresponding to <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>TransformItemLike | None</code>           \u2013            <p>TranslateItemLike | None: Returns transformed items if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_transform(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_transform(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix","title":"HomogeneousMatrix","text":""},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: tuple[int, ...]\n</code></pre> <p>Return a shape of the homogeneous matrix.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, ...]</code>           \u2013            <p>Return the shape of (4, 4).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.yaw_pitch_roll","title":"yaw_pitch_roll  <code>property</code>","text":"<pre><code>yaw_pitch_roll: tuple[float, float, float]\n</code></pre> <p>Return yaw, pitch and roll.</p> NOTE <p>yaw: Rotation angle around the z-axis in [rad], in the range <code>[-pi, pi]</code>. pitch: Rotation angle around the y'-axis in [rad], in the range <code>[-pi/2, pi/2]</code>. roll: Rotation angle around the x\"-axis in [rad], in the range <code>[-pi, pi]</code>.</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float]</code>           \u2013            <p>Yaw, pitch and roll in [rad].</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.rotation_matrix","title":"rotation_matrix  <code>property</code>","text":"<pre><code>rotation_matrix: Matrix3x3\n</code></pre> <p>Return a 3x3 rotation matrix.</p> <p>Returns:</p> <ul> <li> <code>Matrix3x3</code>           \u2013            <p>3x3 rotation matrix.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.as_identity","title":"as_identity  <code>classmethod</code>","text":"<pre><code>as_identity(frame_id: str) -&gt; Self\n</code></pre> <p>Construct a new object with identity.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Constructed self instance.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.as_identity(frame_id)","title":"<code>frame_id</code>","text":"(<code>str</code>)           \u2013            <p>Frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix","title":"from_matrix  <code>classmethod</code>","text":"<pre><code>from_matrix(\n    matrix: Matrix4x4Like | HomogeneousMatrix,\n    src: str | None = None,\n    dst: str | None = None,\n) -&gt; Self\n</code></pre> <p>Construct a new object from a homogeneous matrix.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Constructed self instance.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix(matrix)","title":"<code>matrix</code>","text":"(<code>Matrix4x4Like | HomogeneousMatrix</code>)           \u2013            <p>4x4 homogeneous matrix.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix(src)","title":"<code>src</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Source frame ID. This must be specified only if the input matrix is <code>Matrix4x4Like</code>.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix(dst)","title":"<code>dst</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Destination frame ID. This must be specified only if the input matrix is <code>Matrix4x4Like</code>.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.dot","title":"dot","text":"<pre><code>dot(other: HomogeneousMatrix) -&gt; HomogeneousMatrix\n</code></pre> <p>Return a dot product of myself and another.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p><code>self.src</code> and <code>other.dst</code> must be the same frame ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HomogeneousMatrix</code>           \u2013            <p>Result of a dot product.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.dot(other)","title":"<code>other</code>","text":"(<code>HomogeneousMatrix</code>)           \u2013            <p><code>HomogeneousMatrix</code> object.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.inv","title":"inv","text":"<pre><code>inv() -&gt; HomogeneousMatrix\n</code></pre> <p>Return a inverse matrix of myself.</p> <p>Returns:</p> <ul> <li> <code>HomogeneousMatrix</code>           \u2013            <p>Inverse matrix.</p> </li> </ul>"},{"location":"apis/filtering/","title":"<code>filtering</code>","text":""},{"location":"apis/filtering/#t4_devkit.filtering.compose.BoxFilter","title":"BoxFilter","text":"<pre><code>BoxFilter(params: FilterParams, tf_buffer: TransformBuffer)\n</code></pre> <p>A class composes multiple filtering functions.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.compose.BoxFilter(params)","title":"<code>params</code>","text":"(<code>FilterParams</code>)           \u2013            <p>Filtering parameters.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.compose.BoxFilter(tf_buffer)","title":"<code>tf_buffer</code>","text":"(<code>TransformBuffer</code>)           \u2013            <p>Transformation buffer.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByLabel","title":"FilterByLabel","text":"<pre><code>FilterByLabel(\n    labels: Sequence[str | SemanticLabel] | None = None,\n)\n</code></pre> <p>Filter a box by checking if the label of the box is included in specified labels.</p> <p>Note that, if <code>labels</code> is None all boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByLabel(labels)","title":"<code>labels</code>","text":"(<code>Sequence[str | SemanticLabel] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of target labels. If <code>None</code>, this filter always returns <code>True</code>.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByUUID","title":"FilterByUUID","text":"<pre><code>FilterByUUID(uuids: Sequence[str] | None = None)\n</code></pre> <p>Filter a box by checking if the uuid of the box is included in specified uuids.</p> <p>Note that, if <code>uuids</code> is None all boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByUUID(uuids)","title":"<code>uuids</code>","text":"(<code>Sequence[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of target uuids. If <code>None</code>, this filter always returns <code>True</code>.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByDistance","title":"FilterByDistance","text":"<pre><code>FilterByDistance(min_distance: float, max_distance: float)\n</code></pre> <p>Filter a box by checking if the box is within the specified distance.</p> <p>Note that, the type box is <code>Box2D</code> and its <code>position</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByDistance(min_distance)","title":"<code>min_distance</code>","text":"(<code>float</code>)           \u2013            <p>Minimum distance from the ego [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByDistance(max_distance)","title":"<code>max_distance</code>","text":"(<code>float</code>)           \u2013            <p>Maximum distance from the ego [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByRegion","title":"FilterByRegion","text":"<pre><code>FilterByRegion(\n    min_xy: tuple[float, float], max_xy: tuple[float, float]\n)\n</code></pre> <p>Filter a box by checking if the box xy position is within the specified xy region.</p> <p>Note that, the type box is <code>Box2D</code> and its <code>position</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByRegion(min_xy)","title":"<code>min_xy</code>","text":"(<code>tuple[float, float]</code>)           \u2013            <p>Minimum xy position [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByRegion(max_xy)","title":"<code>max_xy</code>","text":"(<code>tuple[float, float]</code>)           \u2013            <p>Maximum xy position [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterBySpeed","title":"FilterBySpeed","text":"<pre><code>FilterBySpeed(min_speed: float, max_speed: float)\n</code></pre> <p>Filter a 3D box by checking if the box speed is within the specified one.</p> <p>Note that, the type box is <code>Box2D</code>, or <code>Box3D</code> and its <code>velocity</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterBySpeed(min_speed)","title":"<code>min_speed</code>","text":"(<code>float</code>)           \u2013            <p>Minimum speed [m/s].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterBySpeed(max_speed)","title":"<code>max_speed</code>","text":"(<code>float</code>)           \u2013            <p>Maximum speed [m/s].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByNumPoints","title":"FilterByNumPoints","text":"<pre><code>FilterByNumPoints(min_num_points: int = 0)\n</code></pre> <p>Filter a 3D box by checking if the box includes points greater than the specified one.</p> <p>Note that, the type box is <code>Box2D</code>, or <code>Box3D</code> and its <code>num_points</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByNumPoints(min_num_points)","title":"<code>min_num_points</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The minimum number of points that a box should include.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByVisibility","title":"FilterByVisibility","text":"<pre><code>FilterByVisibility(\n    visibility: VisibilityLevel = VisibilityLevel.NONE,\n)\n</code></pre> <p>A filter that excludes 3D boxes with lower visibility than a specified threshold.</p> <p>Boxes with <code>UNAVAILABLE</code> visibility are always passed through (i.e., not filtered).</p> <p>Initialize the filter with a visibility threshold.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the given visibility is not comparable (e.g., UNAVAILABLE).</p> </li> </ul>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByVisibility(visibility)","title":"<code>visibility</code>","text":"(<code>VisibilityLevel</code>, default:                   <code>NONE</code> )           \u2013            <p>The minimum visibility level for a box to pass the filter.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.parameter.FilterParams","title":"FilterParams","text":"<p>A dataclass to represent filtering parameters.</p> <p>Attributes:</p> <ul> <li> <code>labels</code>               (<code>Sequence[str | SemanticLabel] | None</code>)           \u2013            <p>Sequence of target labels.</p> </li> <li> <code>uuids</code>               (<code>Sequence[str] | None</code>)           \u2013            <p>Sequence of target uuids.</p> </li> <li> <code>min_distance</code>               (<code>float</code>)           \u2013            <p>Minimum distance from the ego [m].</p> </li> <li> <code>max_distance</code>               (<code>float</code>)           \u2013            <p>Maximum distance from the ego [m].</p> </li> <li> <code>min_xy</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Minimum xy position from the ego [m].</p> </li> <li> <code>min_xy</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Maximum xy position from the ego [m].</p> </li> <li> <code>min_speed</code>               (<code>float</code>)           \u2013            <p>Minimum speed [m/s].</p> </li> <li> <code>max_speed</code>               (<code>float</code>)           \u2013            <p>Maximum speed [m/s].</p> </li> <li> <code>min_num_points</code>               (<code>int</code>)           \u2013            <p>The minimum number of points which the 3D box should include.</p> </li> <li> <code>visibility</code>               (<code>str | VisibilityLevel</code>)           \u2013            <p>Visibility threshold.</p> </li> </ul>"},{"location":"apis/helper/","title":"<code>helper</code>","text":""},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper","title":"RenderingHelper","text":"<pre><code>RenderingHelper(t4: Tier4)\n</code></pre> <p>Help <code>Tier4</code> class with rendering tasks.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper(t4)","title":"<code>t4</code>","text":"(<code>Tier4</code>)           \u2013            <p><code>Tier4</code> instance.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene","title":"render_scene","text":"<pre><code>render_scene(\n    *,\n    max_time_seconds: float = np.inf,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render specified scene.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance","title":"render_instance","text":"<pre><code>render_instance(\n    instance_token: str | Sequence[str],\n    *,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render particular instance.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance(instance_token)","title":"<code>instance_token</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>Instance token(s).</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud","title":"render_pointcloud","text":"<pre><code>render_pointcloud(\n    *,\n    max_time_seconds: float = np.inf,\n    ignore_distortion: bool = True,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render pointcloud on 3D and 2D view.</p> <p>Parameters:</p> TODO <p>Add an option of rendering radar channels.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud(ignore_distortion)","title":"<code>ignore_distortion</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to ignore distortion parameters.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper","title":"TimeseriesHelper","text":"<pre><code>TimeseriesHelper(t4: Tier4)\n</code></pre> <p>Help <code>Tier4</code> class with timeseries relevant operations.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper(t4)","title":"<code>t4</code>","text":"(<code>Tier4</code>)           \u2013            <p><code>Tier4</code> instance.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until","title":"get_sample_annotations_until","text":"<pre><code>get_sample_annotations_until(\n    instance_token: str, sample_token: str, seconds: float\n) -&gt; tuple[list[int], list[SampleAnnotation]]\n</code></pre> <p>Return a list of sample annotations until the specified seconds.</p> <p>If <code>seconds&gt;=0</code> explores future, otherwise past.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[list[int], list[SampleAnnotation]]</code>           \u2013            <p>List of timestamps and associated sample annotation records of the specified instance.</p> </li> </ul>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until(instance_token)","title":"<code>instance_token</code>","text":"(<code>str</code>)           \u2013            <p>Instance token of any sample annotations.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until(sample_token)","title":"<code>sample_token</code>","text":"(<code>str</code>)           \u2013            <p>Start sample token.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Time seconds until. If <code>&gt;=0</code> explore future, otherwise past.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until","title":"get_object_anns_until","text":"<pre><code>get_object_anns_until(\n    instance_token: str,\n    sample_data_token: str,\n    seconds: float,\n) -&gt; tuple[list[int], list[ObjectAnn]]\n</code></pre> <p>Return a list of object anns until the specified seconds.</p> <p>If <code>seconds&gt;=0</code> explores future, otherwise past.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[list[int], list[ObjectAnn]]</code>           \u2013            <p>List of timestamps and associated object annotation records of the specified instance.</p> </li> </ul>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until(instance_token)","title":"<code>instance_token</code>","text":"(<code>str</code>)           \u2013            <p>Instance token of any object anns.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Start sample data token.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Time seconds until. If <code>&gt;=0</code> explore future, otherwise past.</p>"},{"location":"apis/tier4/","title":"TIER IV API","text":""},{"location":"apis/tier4/#t4_devkit.tier4.DBMetadata","title":"DBMetadata","text":"<p>A dataclass to represent dataset metadata.</p> <p>Attributes:</p> <ul> <li> <code>data_root</code>               (<code>str</code>)           \u2013            <p>Root directory path.</p> </li> <li> <code>dataset_id</code>               (<code>str</code>)           \u2013            <p>Unique dataset ID.</p> </li> <li> <code>version</code>               (<code>str | None</code>)           \u2013            <p>Dataset version.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4","title":"Tier4","text":"<pre><code>Tier4(\n    data_root: str,\n    revision: str | None = None,\n    verbose: bool = True,\n)\n</code></pre> <p>Database class for T4 dataset to help query and retrieve information from the database.</p> <p>Load database and creates reverse indexes and shortcuts.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from t4_devkit import Tier4\n&gt;&gt;&gt; t4 = Tier4(\"data/tier4\")\n======\nLoading T4 tables in `annotation`...\nReverse indexing...\nDone reverse indexing in 0.010 seconds.\n======\n21 category\n8 attribute\n4 visibility\n31 instance\n7 sensor\n7 calibrated_sensor\n2529 ego_pose\n1 log\n1 scene\n88 sample\n2529 sample_data\n1919 sample_annotation\n0 object_ann\n0 surface_ann\n0 keypoint\n1 map\nDone loading in 0.046 seconds.\n======\n</code></pre>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4(data_root)","title":"<code>data_root</code>","text":"(<code>str</code>)           \u2013            <p>Path to the root directory of dataset.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4(revision)","title":"<code>revision</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>You can specify any specific version if you want. If None, search the latest one.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to display status during load.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.data_root","title":"data_root  <code>property</code>","text":"<pre><code>data_root: str\n</code></pre> <p>Return the path to dataset root directory.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.dataset_id","title":"dataset_id  <code>property</code>","text":"<pre><code>dataset_id: str\n</code></pre> <p>Return the dataset ID.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.version","title":"version  <code>property</code>","text":"<pre><code>version: str | None\n</code></pre> <p>Return the dataset version, or None if it is failed to lookup.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.annotation_dir","title":"annotation_dir  <code>property</code>","text":"<pre><code>annotation_dir: str\n</code></pre> <p>Return the path to annotation directory.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.map_dir","title":"map_dir  <code>property</code>","text":"<pre><code>map_dir: str\n</code></pre> <p>Return the path to map directory.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.bag_dir","title":"bag_dir  <code>property</code>","text":"<pre><code>bag_dir: str\n</code></pre> <p>Return the path to ROS bag directory.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_table","title":"get_table","text":"<pre><code>get_table(schema: str | SchemaName) -&gt; list[SchemaTable]\n</code></pre> <p>Return the list of dataclasses corresponding to the schema table.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>List of dataclasses.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_table(schema)","title":"<code>schema</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema table.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get","title":"get","text":"<pre><code>get(schema: str | SchemaName, token: str) -&gt; SchemaTable\n</code></pre> <p>Return a record identified by the associated token.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>SchemaTable</code>           \u2013            <p>Table record of the corresponding token.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get(schema)","title":"<code>schema</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get(token)","title":"<code>token</code>","text":"(<code>str</code>)           \u2013            <p>Token to identify the specific record.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_idx","title":"get_idx","text":"<pre><code>get_idx(schema: str | SchemaName, token: str) -&gt; int\n</code></pre> <p>Return the index of the record in a table in constant runtime.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The index of the record in table.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_idx(schema)","title":"<code>schema</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_idx(token)","title":"<code>token</code>","text":"(<code>str</code>)           \u2013            <p>Token of record.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data_path","title":"get_sample_data_path","text":"<pre><code>get_sample_data_path(sample_data_token: str) -&gt; str\n</code></pre> <p>Return the file path to a raw data recorded in <code>sample_data</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>File path.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data_path(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data","title":"get_sample_data","text":"<pre><code>get_sample_data(\n    sample_data_token: str,\n    *,\n    selected_ann_tokens: list[str] | None = None,\n    as_3d: bool = True,\n    as_sensor_coord: bool = True,\n    future_seconds: float = 0.0,\n    visibility: VisibilityLevel = VisibilityLevel.NONE,\n) -&gt; tuple[str, list[BoxLike], CamIntrinsicLike | None]\n</code></pre> <p>Return the data path as well as all annotations related to that <code>sample_data</code>. Note that output boxes is w.r.t base link or sensor coordinate system.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str, list[BoxLike], CamIntrinsicLike | None]</code>           \u2013            <p>Data path, a list of boxes and 3x3 camera intrinsic matrix.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(selected_ann_tokens)","title":"<code>selected_ann_tokens</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Specify if you want to extract only particular annotations.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(as_3d)","title":"<code>as_3d</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to return 3D or 2D boxes.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(as_sensor_coord)","title":"<code>as_sensor_coord</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to transform boxes as sensor origin coordinate system.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(visibility)","title":"<code>visibility</code>","text":"(<code>VisibilityLevel</code>, default:                   <code>NONE</code> )           \u2013            <p>If <code>sample_data</code> is an image, this sets required visibility for only 3D boxes.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_semantic_label","title":"get_semantic_label","text":"<pre><code>get_semantic_label(\n    category_token: str,\n    attribute_tokens: list[str] | None = None,\n) -&gt; SemanticLabel\n</code></pre> <p>Return a SemanticLabel instance from specified <code>category_token</code> and <code>attribute_tokens</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>SemanticLabel</code>           \u2013            <p>Instantiated SemanticLabel.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_semantic_label(category_token)","title":"<code>category_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>Category</code> table.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_semantic_label(attribute_tokens)","title":"<code>attribute_tokens</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of attribute tokens.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3d","title":"get_box3d","text":"<pre><code>get_box3d(\n    sample_annotation_token: str,\n    *,\n    future_seconds: float = 0.0,\n) -&gt; Box3D\n</code></pre> <p>Return a Box3D class from a <code>sample_annotation</code> record.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Box3D</code>           \u2013            <p>Instantiated Box3D.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3d(sample_annotation_token)","title":"<code>sample_annotation_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_annotation</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3d(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2d","title":"get_box2d","text":"<pre><code>get_box2d(object_ann_token: str) -&gt; Box2D\n</code></pre> <p>Return a Box2D class from a <code>object_ann</code> record.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Box2D</code>           \u2013            <p>Instantiated Box2D.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2d(object_ann_token)","title":"<code>object_ann_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>object_ann</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3ds","title":"get_box3ds","text":"<pre><code>get_box3ds(\n    sample_data_token: str, *, future_seconds: float = 0.0\n) -&gt; list[Box3D]\n</code></pre> <p>Rerun a list of Box3D classes for all annotations of a particular <code>sample_data</code> record. It the <code>sample_data</code> is a keyframe, this returns annotations for the corresponding <code>sample</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Box3D]</code>           \u2013            <p>List of instantiated Box3D classes.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3ds(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3ds(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2ds","title":"get_box2ds","text":"<pre><code>get_box2ds(sample_data_token: str) -&gt; list[Box2D]\n</code></pre> <p>Rerun a list of Box2D classes for all annotations of a particular <code>sample_data</code> record. It the <code>sample_data</code> is a keyframe, this returns annotations for the corresponding <code>sample</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Box2D]</code>           \u2013            <p>List of instantiated Box2D classes.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2ds(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.box_velocity","title":"box_velocity","text":"<pre><code>box_velocity(\n    sample_annotation_token: str, max_time_diff: float = 1.5\n) -&gt; Vector3\n</code></pre> <p>Return the velocity of an annotation. If corresponding annotation has a true velocity, this returns it. Otherwise, this estimates the velocity by computing the difference between the previous and next frame. If it is failed to estimate the velocity, values are set to np.nan.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Vector3</code> (              <code>Vector3</code> )          \u2013            <p>Velocity in the order of (vx, vy, vz) in m/s.</p> </li> </ul> TODO <p>Currently, velocity coordinates is with respect to map, but if should be each box.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.box_velocity(sample_annotation_token)","title":"<code>sample_annotation_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_annotation</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.box_velocity(max_time_diff)","title":"<code>max_time_diff</code>","text":"(<code>float</code>, default:                   <code>1.5</code> )           \u2013            <p>Max allowed time difference between consecutive samples.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene","title":"render_scene","text":"<pre><code>render_scene(\n    *,\n    max_time_seconds: float = np.inf,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render specified scene.</p> <p>Parameters:</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance","title":"render_instance","text":"<pre><code>render_instance(\n    instance_token: str | Sequence[str],\n    *,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render particular instance.</p> <p>Parameters:</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance(instance_token)","title":"<code>instance_token</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>Instance token(s).</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud","title":"render_pointcloud","text":"<pre><code>render_pointcloud(\n    *,\n    max_time_seconds: float = np.inf,\n    ignore_distortion: bool = True,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render pointcloud on 3D and 2D view.</p> <p>Parameters:</p> TODO <p>Add an option of rendering radar channels.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud(ignore_distortion)","title":"<code>ignore_distortion</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to ignore distortion parameters.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.load_metadata","title":"load_metadata","text":"<pre><code>load_metadata(\n    db_root: str, revision: str | None = None\n) -&gt; DBMetadata\n</code></pre> <p>Load metadata of T4 dataset including root directory path, dataset ID, and version.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DBMetadata</code>           \u2013            <p>Metadata of T4 dataset.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.load_metadata(db_root)","title":"<code>db_root</code>","text":"(<code>str</code>)           \u2013            <p>Path to root directory of database.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.load_metadata(revision)","title":"<code>revision</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Specify version of the dataset. If None, search the latest one.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.load_table","title":"load_table","text":"<pre><code>load_table(\n    annotation_dir: str, schema: SchemaName\n) -&gt; list[SchemaTable]\n</code></pre> <p>Load schema table from a JSON file.</p> <p>If the schema is optional and there is no corresponding JSON file in dataset, returns empty list.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>Loaded table data saved in <code>.json</code>.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.load_table(annotation_dir)","title":"<code>annotation_dir</code>","text":"(<code>str</code>)           \u2013            <p>Path to the directory of JSON annotation schema files.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.load_table(schema)","title":"<code>schema</code>","text":"(<code>SchemaName</code>)           \u2013            <p>An enum member of <code>SchemaName</code>.</p>"},{"location":"apis/typing/","title":"<code>typing</code>","text":""},{"location":"apis/typing/#t4_devkit.typing.Vector2Like","title":"Vector2Like  <code>module-attribute</code>","text":"<pre><code>Vector2Like = Union[\n    Vector2,\n    ArrayLike,\n    Sequence[float],\n    tuple[float, float],\n    list[float],\n]\n</code></pre> <p>Type alias for 2D vector inputs.</p> Accepts <ul> <li>Vector2 instances</li> <li>NumPy arrays with shape (2,)</li> <li>Lists: [x, y]</li> <li>Tuples: (x, y)</li> <li>Any sequence with 2 float elements</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.Vector3Like","title":"Vector3Like  <code>module-attribute</code>","text":"<pre><code>Vector3Like = Union[\n    Vector3,\n    ArrayLike,\n    Sequence[float],\n    tuple[float, float, float],\n    list[float],\n]\n</code></pre> <p>Type alias for 3D vector inputs.</p> Accepts <ul> <li>Vector3 instances</li> <li>NumPy arrays with shape (3,)</li> <li>Lists: [x, y, z]</li> <li>Tuples: (x, y, z)</li> <li>Any sequence with 3 float elements</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.Vector6Like","title":"Vector6Like  <code>module-attribute</code>","text":"<pre><code>Vector6Like = Union[\n    Vector6,\n    ArrayLike,\n    Sequence[float],\n    tuple[float, ...],\n    list[float],\n]\n</code></pre> <p>Type alias for 6D vector inputs.</p> Accepts <ul> <li>Vector6 instances</li> <li>NumPy arrays with shape (6,)</li> <li>Lists: [x1, x2, x3, x4, x5, x6]</li> <li>Tuples: (x1, x2, x3, x4, x5, x6)</li> <li>Any sequence with 6 float elements</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.QuaternionLike","title":"QuaternionLike  <code>module-attribute</code>","text":"<pre><code>QuaternionLike = Union[\n    Quaternion,\n    ArrayLike,\n    Sequence[float],\n    tuple[float, float, float, float],\n    list[float],\n]\n</code></pre> <p>Type alias for quaternion inputs.</p> Accepts <ul> <li>Quaternion instances</li> <li>NumPy arrays with shape (4,) - [w, x, y, z]</li> <li>Lists: [w, x, y, z]</li> <li>Tuples: (w, x, y, z)</li> <li>Any sequence with 4 float elements representing quaternion components</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.RotationLike","title":"RotationLike  <code>module-attribute</code>","text":"<pre><code>RotationLike = Union[QuaternionLike, ArrayLike]\n</code></pre> <p>Type alias for general rotation inputs.</p> Accepts <ul> <li>All QuaternionLike inputs</li> <li>3x3 rotation matrices as NumPy arrays</li> <li>Any array-like object representing rotations</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.RoiLike","title":"RoiLike  <code>module-attribute</code>","text":"<pre><code>RoiLike = Union[\n    Roi,\n    ArrayLike,\n    Sequence[float],\n    tuple[float, float, float, float],\n    list[float],\n]\n</code></pre> <p>Type alias for Region of Interest (ROI) inputs.</p> Accepts <ul> <li>Roi instances</li> <li>NumPy arrays with shape (4,)</li> <li>Lists: [xmin, ymin, xmax, ymax]</li> <li>Tuples: (xmin, ymin, xmax, ymax)</li> <li>Any sequence with 4 float elements representing bounding box coordinates</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.PointLike","title":"PointLike  <code>module-attribute</code>","text":"<pre><code>PointLike = Union[Vector2Like, Vector3Like]\n</code></pre> <p>Type alias for single point inputs (2D or 3D).</p>"},{"location":"apis/typing/#t4_devkit.typing.PointsLike","title":"PointsLike  <code>module-attribute</code>","text":"<pre><code>PointsLike = Union[\n    ArrayLike,\n    Sequence[Sequence[float]],\n    list[list[float]],\n    list[tuple[float, ...]],\n]\n</code></pre> <p>Type alias for multiple points inputs.</p> Accepts <ul> <li>NumPy arrays with shape (N, 2) or (N, 3)</li> <li>Lists of lists: [[x1, y1], [x2, y2], ...]</li> <li>Lists of tuples: [(x1, y1), (x2, y2), ...]</li> <li>Any nested sequence representing multiple points</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.Matrix3x3Like","title":"Matrix3x3Like  <code>module-attribute</code>","text":"<pre><code>Matrix3x3Like = Union[\n    Matrix3x3,\n    ArrayLike,\n    Sequence[Sequence[float]],\n    list[list[float]],\n]\n</code></pre> <p>Type alias for 3x3 matrix inputs.</p> Accepts <ul> <li>NumPy arrays with shape (3, 3)</li> <li>Nested lists: [[a, b, c], [d, e, f], [g, h, i]]</li> <li>Any nested sequence representing a 3x3 matrix</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.Matrix4x4Like","title":"Matrix4x4Like  <code>module-attribute</code>","text":"<pre><code>Matrix4x4Like = Union[\n    Matrix4x4,\n    ArrayLike,\n    Sequence[Sequence[float]],\n    list[list[float]],\n]\n</code></pre> <p>Type alias for 4x4 matrix inputs.</p> Accepts <ul> <li>NumPy arrays with shape (4, 4)</li> <li>Nested lists: 4x4 structure</li> <li>Any nested sequence representing a 4x4 matrix</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.TrajectoryLike","title":"TrajectoryLike  <code>module-attribute</code>","text":"<pre><code>TrajectoryLike = Union[\n    ArrayLike,\n    Sequence[Sequence[Sequence[float]]],\n    list[list[list[float]]],\n]\n</code></pre> <p>Type alias for trajectory inputs.</p> Accepts <ul> <li>NumPy arrays with shape (M, T, D) where:</li> <li>M = number of modes</li> <li>T = number of timesteps</li> <li>D = spatial dimensions (usually 3)</li> <li>Triple-nested sequences with same structure</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.CameraIntrinsicLike","title":"CameraIntrinsicLike  <code>module-attribute</code>","text":"<pre><code>CameraIntrinsicLike = Union[\n    CameraIntrinsic,\n    ArrayLike,\n    Sequence[Sequence[float]],\n    list[list[float]],\n]\n</code></pre> <p>Type alias for camera parameter inputs.</p> Accepts <ul> <li>CameraIntrinsic instances</li> <li>NumPy arrays with shape (3, 3)</li> <li>Nested sequences of float values</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.CameraDistortionLike","title":"CameraDistortionLike  <code>module-attribute</code>","text":"<pre><code>CameraDistortionLike = Union[\n    CameraDistortion,\n    ArrayLike,\n    Sequence[float],\n    list[float],\n]\n</code></pre> <p>Type alias for camera distortion inputs.</p> Accepts <ul> <li>CameraDistortion instances</li> <li>NumPy arrays with shape (5,)</li> <li>Sequence of float values</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.ScalarLike","title":"ScalarLike  <code>module-attribute</code>","text":"<pre><code>ScalarLike = Union[int, float, number]\n</code></pre> <p>Type alias for scalar numeric inputs.</p> Accepts <ul> <li>Python int or float</li> <li>NumPy scalar types</li> </ul>"},{"location":"apis/typing/#t4_devkit.typing.CameraIntrinsic","title":"CameraIntrinsic","text":"<p>               Bases: <code>ndarray</code></p> <p>A 3x3 camera intrinsic matrix with validation.</p> <p>This class ensures that the input array is a 3x3 matrix and raises a ValueError if it is not. It can be constructed from a 3x3 array or 9 elements array.</p> <p>Note that for non-camera, the array can be empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; i = CameraIntrinsic(np.eye(3))                          # OK\n&gt;&gt;&gt; i = CameraIntrinsic([1, 0, 0, 0, 1, 0, 0, 0, 1])        # OK\n&gt;&gt;&gt; i = CameraIntrinsic([[1, 0, 0], [0, 1, 0], [0, 0, 1]])  # OK\n&gt;&gt;&gt; i = CameraIntrinsic([])                                 # OK\n&gt;&gt;&gt; i = CameraIntrinsic(np.eye(2))                          # ValueError\n&gt;&gt;&gt; i = CameraIntrinsic([1, 0, 0, 0, 1, 0, 0, 0])           # ValueError\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.CameraDistortion","title":"CameraDistortion","text":"<p>               Bases: <code>ndarray</code></p> <p>A 1D array of length 5 representing the radial and tangential distortion coefficients.</p> <p>This class represents the distortion parameters for a camera lens, typically following the Brown-Conrady (or similar) model.</p> <p>The expected input is a 1D array of length 5, corresponding to the coefficients:     - k1: Radial distortion coefficient.     - k2: Radial distortion coefficient.     - p1: Tangential distortion coefficient.     - p2: Tangential distortion coefficient.     - k3: Radial distortion coefficient.</p> <p>Note that for non-camera, the array can be empty.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; d = CameraDistortion([0, 0, 0, 0, 0])                  # OK\n&gt;&gt;&gt; d = CameraDistortion([1, 2, 3, 4, 5])                  # OK\n&gt;&gt;&gt; d = CameraDistortion([])                               # OK\n&gt;&gt;&gt; d = CameraDistortion([1, 2, 3, 4])                     # ValueError\n&gt;&gt;&gt; d = CameraDistortion([1, 2, 3, 4, 5, 6])               # ValueError\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Matrix3x3","title":"Matrix3x3","text":"<p>               Bases: <code>ndarray</code></p> <p>A 3x3 matrix with validation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; matrix = Matrix3x3([[1, 2, 3], [4, 5, 6], [7, 8, 9]])   # OK\n&gt;&gt;&gt; matrix = Matrix3x3(np.eye(3))                           # OK\n&gt;&gt;&gt; matrix = Matrix3x3([[1, 2], [4, 5], [7, 8]])            # ValueError\n&gt;&gt;&gt; matrix = Matrix3x3(np.eye(2))                           # ValueError\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Matrix4x4","title":"Matrix4x4","text":"<p>               Bases: <code>ndarray</code></p> <p>A 4x4 matrix with validation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; matrix = Matrix4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) # OK\n&gt;&gt;&gt; matrix = Matrix4x4(np.eye(4))                                                       # OK\n&gt;&gt;&gt; matrix = Matrix4x4([[1, 2], [4, 5], [7, 8]])                                        # ValueError\n&gt;&gt;&gt; matrix = Matrix4x4(np.eye(2))                                                       # ValueError\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Quaternion","title":"Quaternion","text":"<p>               Bases: <code>Quaternion</code></p> <p>A quaternion class that wraps the PyQuaternion class.</p> <p>This wrapper exists to provide a consistent and explicit quaternion representation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; q = Quaternion(1, 2, 3, 4)\n&gt;&gt;&gt; q\nQuaternion(1.000000, 2.000000, 3.000000, 4.000000)\n&gt;&gt;&gt; q.conjugate()\nQuaternion(1.000000, -2.000000, -3.000000, -4.000000)\n&gt;&gt;&gt; q.norm()\n5.477226\n&gt;&gt;&gt; q.inverse()\nQuaternion(0.181818, -0.363636, -0.545455, -0.727273)\n&gt;&gt;&gt; q * q.inverse()\nQuaternion(1.000000, 0.000000, 0.000000, 0.000000)\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Roi","title":"Roi","text":"<p>               Bases: <code>tuple</code></p> <p>A 4-element tuple representing a region of interest (ROI).</p> <p>This class ensures that the array always has the correct shape and value order. It can be constructed from any array-like object that can be converted to a tuple of length 4, or from individual numeric arguments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; roi = Roi(10, 20, 30, 40)   # OK\n&gt;&gt;&gt; roi = Roi((10, 20, 30, 40)) # OK\n&gt;&gt;&gt; roi = Roi([10, 20, 30, 40]) # OK\n&gt;&gt;&gt; roi = Roi([10, 20])         # ValueError: ROI must be 4-elements\n&gt;&gt;&gt; roi = Roi([40, 30, 20, 10]) # ValueError: ROI must be xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Roi.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: tuple[ScalarLike, ScalarLike]\n</code></pre> <p>Return the xy offset from the image origin at the top left corner.</p>"},{"location":"apis/typing/#t4_devkit.typing.Roi.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[ScalarLike, ScalarLike]\n</code></pre> <p>Return the width and height of the ROI.</p>"},{"location":"apis/typing/#t4_devkit.typing.Roi.width","title":"width  <code>property</code>","text":"<pre><code>width: ScalarLike\n</code></pre> <p>Return the width of the ROI.</p>"},{"location":"apis/typing/#t4_devkit.typing.Roi.height","title":"height  <code>property</code>","text":"<pre><code>height: ScalarLike\n</code></pre> <p>Return the height of the ROI.</p>"},{"location":"apis/typing/#t4_devkit.typing.Roi.center","title":"center  <code>property</code>","text":"<pre><code>center: tuple[ScalarLike, ScalarLike]\n</code></pre> <p>Return the center position of the ROI.</p>"},{"location":"apis/typing/#t4_devkit.typing.Roi.area","title":"area  <code>property</code>","text":"<pre><code>area: ScalarLike\n</code></pre> <p>Return the area of the ROI.</p>"},{"location":"apis/typing/#t4_devkit.typing.Vector2","title":"Vector2","text":"<p>               Bases: <code>BaseVector</code></p> <p>A 2-element numpy array with validation.</p> <p>This class ensures that the array always has exactly 2 elements. It can be constructed from any array-like object that can be converted to a 2-element numpy array.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Vector2([1, 2])             # OK\n&gt;&gt;&gt; v = Vector2(np.array([1, 2]))   # OK\n&gt;&gt;&gt; v = Vector2(1, 2)               # OK\n&gt;&gt;&gt; v = Vector2([1, 2, 3])          # ValueError\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Vector3","title":"Vector3","text":"<p>               Bases: <code>BaseVector</code></p> <p>A 3-element numpy array with validation.</p> <p>This class ensures that the array always has exactly 3 elements. It can be constructed from any array-like object that can be converted to a 3-element numpy array.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Vector3([1, 2, 3])              # OK\n&gt;&gt;&gt; v = Vector3(np.array([1, 2, 3]))    # OK\n&gt;&gt;&gt; v = Vector3(1, 2, 3)                # OK\n&gt;&gt;&gt; v = Vector3([1, 2])                 # ValueError\n</code></pre>"},{"location":"apis/typing/#t4_devkit.typing.Vector6","title":"Vector6","text":"<p>               Bases: <code>BaseVector</code></p> <p>A 6-element numpy array with validation.</p> <p>This class ensures that the array always has exactly 6 elements. It can be constructed from any array-like object that can be converted to a 6-element numpy array.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; v = Vector6([1, 2, 3, 4, 5, 6])             # OK\n&gt;&gt;&gt; v = Vector6(np.array([1, 2, 3, 4, 5, 6]))   # OK\n&gt;&gt;&gt; v = Vector6(1, 2, 3, 4, 5, 6)               # OK\n&gt;&gt;&gt; v = Vector6([1, 2])                         # ValueError\n</code></pre>"},{"location":"apis/viewer/","title":"<code>viewer</code>","text":""},{"location":"apis/viewer/#t4_devkit.viewer.ViewerBuilder","title":"ViewerBuilder","text":"<pre><code>ViewerBuilder()\n</code></pre> <p>Builder for creating a RerunViewer instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from t4_devkit.viewer import ViewerBuilder\n&gt;&gt;&gt; viewer = (\n        ViewerBuilder()\n        .with_spatial3d()\n        .with_spatial2d(cameras=[\"CAM_FRONT\", \"CAM_BACK\"])\n        .with_labels(label2id={\"car\": 1, \"pedestrian\": 2})\n        .with_streetmap(latlon=[48.8566, 2.3522])\n        .build(app_id=\"my_viewer\")\n    )\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.PointCloudColorMode","title":"PointCloudColorMode","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Color mode of point cloud.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer","title":"RerunViewer","text":"<pre><code>RerunViewer(\n    app_id: str,\n    config: ViewerConfig = ViewerConfig(),\n    save_dir: str | None = None,\n)\n</code></pre> <p>A viewer class that renders some components powered by rerun.</p> <p>Construct a new object.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from t4_devkit.viewer import ViewerBuilder\n&gt;&gt;&gt; viewer = (\n        ViewerBuilder()\n        .with_spatial3d()\n        .with_spatial2d(cameras=[\"CAM_FRONT\", \"CAM_BACK\"])\n        .with_labels(label2id={\"car\": 1, \"pedestrian\": 2})\n        .with_streetmap(latlon=[48.8566, 2.3522])\n        .build(app_id=\"my_viewer\")\n    )\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(app_id)","title":"<code>app_id</code>","text":"(<code>str</code>)           \u2013            <p>Application ID.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(config)","title":"<code>config</code>","text":"(<code>ViewerConfig</code>, default:                   <code>ViewerConfig()</code> )           \u2013            <p>Configuration of the viewer.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_box3ds","title":"render_box3ds","text":"<pre><code>render_box3ds(\n    seconds: float, boxes: Sequence[Box3D]\n) -&gt; None\n</code></pre><pre><code>render_box3ds(\n    seconds: float,\n    frame_id: str,\n    centers: Sequence[Vector3Like],\n    rotations: Sequence[RotationLike],\n    sizes: Sequence[Vector3Like],\n    class_ids: Sequence[int],\n    velocities: Sequence[Vector3Like] | None = None,\n    uuids: Sequence[str] | None = None,\n    futures: Sequence[Future] | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_box3ds(*args, **kwargs) -&gt; None\n</code></pre> <p>Render 3D boxes.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_box2ds","title":"render_box2ds","text":"<pre><code>render_box2ds(\n    seconds: float, boxes: Sequence[Box2D]\n) -&gt; None\n</code></pre><pre><code>render_box2ds(\n    seconds: float,\n    camera: str,\n    rois: Sequence[RoiLike],\n    class_ids: Sequence[int],\n    uuids: Sequence[str] | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_box2ds(*args, **kwargs) -&gt; None\n</code></pre> <p>Render 2D boxes.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d","title":"render_segmentation2d","text":"<pre><code>render_segmentation2d(\n    seconds: float,\n    camera: str,\n    masks: Sequence[NDArrayU8],\n    class_ids: Sequence[int],\n    uuids: Sequence[str | None] | None = None,\n) -&gt; None\n</code></pre> <p>Render 2D segmentation image.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Timestamp in [sec].</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(camera)","title":"<code>camera</code>","text":"(<code>str</code>)           \u2013            <p>Name of camera channel.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(masks)","title":"<code>masks</code>","text":"(<code>Sequence[NDArrayU8]</code>)           \u2013            <p>Sequence of segmentation mask of each instance, each mask is the shape of (W, H).</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(class_ids)","title":"<code>class_ids</code>","text":"(<code>Sequence[int]</code>)           \u2013            <p>Sequence of label ids.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(uuids)","title":"<code>uuids</code>","text":"(<code>Sequence[str | None] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of each instance ID.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud","title":"render_pointcloud","text":"<pre><code>render_pointcloud(\n    seconds: float,\n    channel: str,\n    pointcloud: PointCloudLike,\n    color_mode: PointCloudColorMode = PointCloudColorMode.DISTANCE,\n) -&gt; None\n</code></pre> <p>Render pointcloud.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Timestamp in [sec].</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(channel)","title":"<code>channel</code>","text":"(<code>str</code>)           \u2013            <p>Name of the pointcloud sensor channel.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(pointcloud)","title":"<code>pointcloud</code>","text":"(<code>PointCloudLike</code>)           \u2013            <p>Inherence object of <code>PointCloud</code>.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(color_mode)","title":"<code>color_mode</code>","text":"(<code>PointCloudColorMode</code>, default:                   <code>DISTANCE</code> )           \u2013            <p>Color mode for pointcloud.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image","title":"render_image","text":"<pre><code>render_image(\n    seconds: float, camera: str, image: str | NDArrayU8\n) -&gt; None\n</code></pre> <p>Render an image.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Timestamp in [sec].</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image(camera)","title":"<code>camera</code>","text":"(<code>str</code>)           \u2013            <p>Name of the camera channel.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image(image)","title":"<code>image</code>","text":"(<code>str | NDArrayU8</code>)           \u2013            <p>Image tensor or path of the image file.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_ego","title":"render_ego","text":"<pre><code>render_ego(ego_pose: EgoPose) -&gt; None\n</code></pre><pre><code>render_ego(\n    seconds: float,\n    translation: Vector3Like,\n    rotation: RotationLike,\n    geocoordinate: Vector3Like | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_ego(*args, **kwargs) -&gt; None\n</code></pre> <p>Render an ego pose.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_calibration","title":"render_calibration","text":"<pre><code>render_calibration(\n    sensor: Sensor,\n    calibration: CalibratedSensor,\n    resolution: Vector2Like | None = None,\n) -&gt; None\n</code></pre><pre><code>render_calibration(\n    channel: str,\n    modality: str | SensorModality,\n    translation: Vector3Like,\n    rotation: RotationLike,\n    camera_intrinsic: CamIntrinsicLike | None = None,\n    resolution: Vector2Like | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_calibration(*args, **kwargs) -&gt; None\n</code></pre> <p>Render a sensor calibration.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_map","title":"render_map","text":"<pre><code>render_map(filepath: str) -&gt; None\n</code></pre> <p>Render vector map.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_map(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>Path to OSM file.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.ViewerConfig","title":"ViewerConfig","text":""},{"location":"apis/viewer/#t4_devkit.viewer.ViewerConfig.to_blueprint","title":"to_blueprint","text":"<pre><code>to_blueprint() -&gt; rrb.BlueprintLike\n</code></pre> <p>Return the recording blueprint.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.ViewerConfig.has_spatial3d","title":"has_spatial3d","text":"<pre><code>has_spatial3d() -&gt; bool\n</code></pre> <p>Return <code>True</code> if the configuration contains 3D view space.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.ViewerConfig.has_spatial2d","title":"has_spatial2d","text":"<pre><code>has_spatial2d() -&gt; bool\n</code></pre> <p>Return <code>True</code> if the configuration contains 2D view space.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.pointcloud_color","title":"pointcloud_color","text":"<pre><code>pointcloud_color(\n    pointcloud: PointCloudLike,\n    color_mode: PointCloudColorMode = PointCloudColorMode.DISTANCE,\n) -&gt; NDArrayF64\n</code></pre> <p>Return color map depending on the specified color mode.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.pointcloud_color(pointcloud)","title":"<code>pointcloud</code>","text":"(<code>PointCloudLike</code>)           \u2013            <p>Any inheritance of <code>PointCloud</code> class.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.pointcloud_color(color_mode)","title":"<code>color_mode</code>","text":"(<code>PointCloudColorMode</code>, default:                   <code>DISTANCE</code> )           \u2013            <p>Color mode for pointcloud.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.calculate_geodetic_point","title":"calculate_geodetic_point","text":"<pre><code>calculate_geodetic_point(\n    position: Vector3Like, origin: Vector2Like\n) -&gt; Vector2\n</code></pre> <p>Transform a position in a map coordinate system to a position in a geodetic coordinate system.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Vector2</code>           \u2013            <p>Transformed position in a geodetic coordinate system, which is (latitude, longitude).</p> </li> </ul>"},{"location":"apis/viewer/#t4_devkit.viewer.calculate_geodetic_point(position)","title":"<code>position</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D position in a map coordinate system.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.calculate_geodetic_point(origin)","title":"<code>origin</code>","text":"(<code>Vector2Like</code>)           \u2013            <p>Map origin position in a geodetic coordinate system, which is (latitude, longitude).</p>"},{"location":"apis/viewer/#t4_devkit.viewer.format_entity","title":"format_entity","text":"<pre><code>format_entity(*entities: Sequence[str]) -&gt; str\n</code></pre> <p>Format entity path.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted entity path.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_entity(\"map\")\n\"map\"\n&gt;&gt;&gt; format_entity(\"map\", \"map/base_link\")\n\"map/base_link\"\n&gt;&gt;&gt; format_entity(\"map\", \"map/base_link\", \"camera\")\n\"map/base_link/camera\"\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.format_entity(*entities)","title":"<code>*entities</code>","text":"(<code>Sequence[str]</code>, default:                   <code>()</code> )           \u2013            <p>Entity path(s).</p>"},{"location":"apis/schema/","title":"<code>schema</code>","text":"<ul> <li>Schema Names</li> <li>Schema Tables</li> <li>Other Items for Schema Tables</li> <li>Schema Registry</li> <li>Serialize Schema</li> </ul>"},{"location":"apis/schema/name/","title":"Schema Names","text":"<p>Under the hood, <code>t4-devkit</code> declares an enum called <code>SchemaName</code>. This enum includes names of each schema table that should be contained in the T4 dataset as <code>.json</code> file.</p> <p>Note that some schema tables are not mandatory, such as <code>object_ann.json</code> and <code>surface_ann.json</code>. For these tables, the method called <code>is_optional()</code> returns <code>True</code> and it is OK that these corresponding <code>.json</code> files are not contained in T4 dataset:</p> <pre><code>from t4_devkit.schema import SchemaName\n\n&gt;&gt;&gt; SchemaName.OBJECT_ANN.is_optional()\nTrue\n</code></pre>"},{"location":"apis/schema/name/#t4_devkit.schema.name.SchemaName","title":"SchemaName","text":"<p>An enum to represent schema filenames.</p> <p>Attributes:</p> <ul> <li> <code>ATTRIBUTE</code>           \u2013            <p>Property of an instance that can change while the category remains the same.</p> </li> <li> <code>CALIBRATED_SENSOR</code>           \u2013            <p>Definition of a particular sensor as calibrated on a vehicle.</p> </li> <li> <code>CATEGORY</code>           \u2013            <p>Object categories.</p> </li> <li> <code>EGO_POSE</code>           \u2013            <p>Ego vehicle pose at at particular timestamp.</p> </li> <li> <code>INSTANCE</code>           \u2013            <p>An object instance.</p> </li> <li> <code>LOG</code>           \u2013            <p>Information about the log from which the data aws extracted.</p> </li> <li> <code>MAP</code>           \u2013            <p>Map data that is stored as binary semantic masks from a top-down view.</p> </li> <li> <code>SAMPLE</code>           \u2013            <p>A sample is an annotated keyframe at specific Hz.</p> </li> <li> <code>SAMPLE_ANNOTATION</code>           \u2013            <p>A bounding box defining the position of an object seen in a sample.</p> </li> <li> <code>SAMPLE_DATA</code>           \u2013            <p>A sensor data e.g. image, pointcloud or radar return.</p> </li> <li> <code>SCENE</code>           \u2013            <p>A scene is a specific long sequence of consecutive frames extracted from a log.</p> </li> <li> <code>SENSOR</code>           \u2013            <p>A specific sensor type.</p> </li> <li> <code>VISIBILITY</code>           \u2013            <p>The visibility of instance is the fraction of annotation visible in all images.</p> </li> <li> <code>LIDARSEG</code>               (<code>optional</code>)           \u2013            <p>The annotation of 3D point cloud segmentation.</p> </li> <li> <code>OBJECT_ANN</code>               (<code>optional</code>)           \u2013            <p>The annotation of a foreground object in an image.</p> </li> <li> <code>SURFACE_ANN</code>               (<code>optional</code>)           \u2013            <p>The annotation of a background object in an image.</p> </li> <li> <code>KEYPOINT</code>               (<code>optional</code>)           \u2013            <p>The annotation of pose keypoints of an object in an image.</p> </li> <li> <code>VEHICLE_STATE</code>               (<code>optional</code>)           \u2013            <p>The annotation of ego vehicle states.</p> </li> </ul>"},{"location":"apis/schema/name/#t4_devkit.schema.name.SchemaName.filename","title":"filename  <code>property</code>","text":"<pre><code>filename: str\n</code></pre> <p>Return the annotation json filename.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Annotation json filename.</p> </li> </ul>"},{"location":"apis/schema/name/#t4_devkit.schema.name.SchemaName.is_optional","title":"is_optional","text":"<pre><code>is_optional() -&gt; bool\n</code></pre> <p>Indicates if this schema name is optional.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Return True if this schema is optional.</p> </li> </ul>"},{"location":"apis/schema/other/","title":"Other Items for Tables","text":"<p>Following classes are sub items composed of each schema tables.</p>"},{"location":"apis/schema/other/#sampledata","title":"<code>SampleData</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat","title":"FileFormat","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent file formats.</p> <p>Attributes:</p> <ul> <li> <code>JPG</code>           \u2013            <p>JPG format for image data.</p> </li> <li> <code>PNG</code>           \u2013            <p>PNG format for image data.</p> </li> <li> <code>PCD</code>           \u2013            <p>PCD format for pointcloud data.</p> </li> <li> <code>BIN</code>           \u2013            <p>BIN format.</p> </li> <li> <code>PCDBIN</code>           \u2013            <p>PCD.BIN format for pointcloud data.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.is_member","title":"is_member  <code>staticmethod</code>","text":"<pre><code>is_member(item)\n</code></pre> <p>Indicate whether the input item is the one of members of FileFormat.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Return True if the item is included.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.is_member(item)","title":"<code>item</code>","text":"(<code>str</code>)           \u2013            <p>Any file format name.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.values","title":"values  <code>staticmethod</code>","text":"<pre><code>values()\n</code></pre> <p>Return a list of values of members.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of values.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.as_ext","title":"as_ext","text":"<pre><code>as_ext()\n</code></pre> <p>Return the value as file extension.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>File extension.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.SensorModality","title":"SensorModality","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent sensor modalities.</p> <p>Attributes:</p> <ul> <li> <code>LIDAR</code>           \u2013            <p>Lidar sensor.</p> </li> <li> <code>CAMERA</code>           \u2013            <p>Camera sensor.</p> </li> <li> <code>RADAR</code>           \u2013            <p>Radar sensor.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel","title":"VisibilityLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent visibility levels.</p> <p>Attributes:</p> <ul> <li> <code>FULL</code>           \u2013            <p>No occlusion for the object.</p> </li> <li> <code>MOST</code>           \u2013            <p>Object is occluded, but by less than 50%.</p> </li> <li> <code>PARTIAL</code>           \u2013            <p>Object is occluded, but by more than 50%.</p> </li> <li> <code>NONE</code>           \u2013            <p>Object is 90-100% occluded and no points/pixels are visible in the label.</p> </li> <li> <code>UNAVAILABLE</code>           \u2013            <p>Visibility level is not specified.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.from_value","title":"from_value  <code>classmethod</code>","text":"<pre><code>from_value(level)\n</code></pre> <p>Load member from its value.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.rank","title":"rank","text":"<pre><code>rank()\n</code></pre> <p>Return an integer rank for comparison (higher is more visible).</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.is_comparable","title":"is_comparable","text":"<pre><code>is_comparable()\n</code></pre> <p>Return True if the visibility level has a defined rank.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask","title":"RLEMask","text":"<p>A dataclass to represent segmentation mask compressed by RLE.</p> <p>Attributes:</p> <ul> <li> <code>size</code>               (<code>list[int, int]</code>)           \u2013            <p>Size of image ordering (width, height).</p> </li> <li> <code>counts</code>               (<code>str</code>)           \u2013            <p>RLE compressed mask data.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask.decode","title":"decode","text":"<pre><code>decode()\n</code></pre> <p>Decode segmentation mask.</p> <p>Returns:</p> <ul> <li> <code>NDArrayU8</code>           \u2013            <p>Decoded mask in shape of (H, W).</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.ShiftState","title":"ShiftState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent gear shift state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.IndicatorState","title":"IndicatorState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent indicator state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.Indicators","title":"Indicators","text":"<p>A dataclass to represent state of each indicator.</p> <p>Attributes:</p> <ul> <li> <code>left</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the left indicator.</p> </li> <li> <code>right</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the right indicator.</p> </li> <li> <code>hazard</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the hazard lights.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.AdditionalInfo","title":"AdditionalInfo","text":"<p>A dataclass to represent additional state information of the ego vehicle.</p> <p>Attributes:</p> <ul> <li> <code>speed</code>               (<code>float | None</code>)           \u2013            <p>Speed of the ego vehicle.</p> </li> </ul>"},{"location":"apis/schema/other/#sensor","title":"<code>Sensor</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.SensorModality","title":"SensorModality","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent sensor modalities.</p> <p>Attributes:</p> <ul> <li> <code>LIDAR</code>           \u2013            <p>Lidar sensor.</p> </li> <li> <code>CAMERA</code>           \u2013            <p>Camera sensor.</p> </li> <li> <code>RADAR</code>           \u2013            <p>Radar sensor.</p> </li> </ul>"},{"location":"apis/schema/other/#objectannsurfaceann","title":"<code>ObjectAnn</code>/<code>SurfaceAnn</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask","title":"RLEMask","text":"<p>A dataclass to represent segmentation mask compressed by RLE.</p> <p>Attributes:</p> <ul> <li> <code>size</code>               (<code>list[int, int]</code>)           \u2013            <p>Size of image ordering (width, height).</p> </li> <li> <code>counts</code>               (<code>str</code>)           \u2013            <p>RLE compressed mask data.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask.decode","title":"decode","text":"<pre><code>decode()\n</code></pre> <p>Decode segmentation mask.</p> <p>Returns:</p> <ul> <li> <code>NDArrayU8</code>           \u2013            <p>Decoded mask in shape of (H, W).</p> </li> </ul>"},{"location":"apis/schema/other/#visibility","title":"<code>Visibility</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel","title":"VisibilityLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent visibility levels.</p> <p>Attributes:</p> <ul> <li> <code>FULL</code>           \u2013            <p>No occlusion for the object.</p> </li> <li> <code>MOST</code>           \u2013            <p>Object is occluded, but by less than 50%.</p> </li> <li> <code>PARTIAL</code>           \u2013            <p>Object is occluded, but by more than 50%.</p> </li> <li> <code>NONE</code>           \u2013            <p>Object is 90-100% occluded and no points/pixels are visible in the label.</p> </li> <li> <code>UNAVAILABLE</code>           \u2013            <p>Visibility level is not specified.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.from_value","title":"from_value  <code>classmethod</code>","text":"<pre><code>from_value(level)\n</code></pre> <p>Load member from its value.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.rank","title":"rank","text":"<pre><code>rank()\n</code></pre> <p>Return an integer rank for comparison (higher is more visible).</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.is_comparable","title":"is_comparable","text":"<pre><code>is_comparable()\n</code></pre> <p>Return True if the visibility level has a defined rank.</p>"},{"location":"apis/schema/other/#vehiclestate","title":"<code>VehicleState</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.ShiftState","title":"ShiftState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent gear shift state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.IndicatorState","title":"IndicatorState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent indicator state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.Indicators","title":"Indicators","text":"<p>A dataclass to represent state of each indicator.</p> <p>Attributes:</p> <ul> <li> <code>left</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the left indicator.</p> </li> <li> <code>right</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the right indicator.</p> </li> <li> <code>hazard</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the hazard lights.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.AdditionalInfo","title":"AdditionalInfo","text":"<p>A dataclass to represent additional state information of the ego vehicle.</p> <p>Attributes:</p> <ul> <li> <code>speed</code>               (<code>float | None</code>)           \u2013            <p>Speed of the ego vehicle.</p> </li> </ul>"},{"location":"apis/schema/registry/","title":"Schema Registry","text":"<p>Each schema table is registered in <code>SchemaRegistry</code> dynamically at the runtime.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.builder.build_schema","title":"build_schema","text":"<pre><code>build_schema(\n    name: str | SchemaName, filepath: str\n) -&gt; list[SchemaTable]\n</code></pre> <p>Build schema dataclass from json file path.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>List of schema dataclasses.</p> </li> </ul>"},{"location":"apis/schema/registry/#t4_devkit.schema.builder.build_schema(name)","title":"<code>name</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema table.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.builder.build_schema(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>Path to json file.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SCHEMAS","title":"SCHEMAS  <code>module-attribute</code>","text":"<pre><code>SCHEMAS = SchemaRegistry()\n</code></pre>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry","title":"SchemaRegistry","text":"<pre><code>SchemaRegistry()\n</code></pre> <p>A manager class to register schema tables.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry.build_from_json","title":"build_from_json","text":"<pre><code>build_from_json(\n    key: str | SchemaName, filepath: str\n) -&gt; list[SchemaTable]\n</code></pre> <p>Build schema dataclass from json.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>Instantiated dataclass.</p> </li> </ul>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry.build_from_json(key)","title":"<code>key</code>","text":"(<code>str</code>)           \u2013            <p>Name of schema field.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry.build_from_json(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>Path to schema json file.</p>"},{"location":"apis/schema/serialize/","title":"Serialize Schema","text":"<p>You can serialize each schema table into <code>dict</code> using following functions.</p>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schemas","title":"serialize_schemas","text":"<pre><code>serialize_schemas(data: list[SchemaTable]) -&gt; list[dict]\n</code></pre> <p>Serialize a list of schema dataclasses into list of dict.</p> Deprecated <p>This function is deprecated. Please use <code>serialize_dataclasses()</code> instead.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>Serialized list of dict data.</p> </li> </ul>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schemas(data)","title":"<code>data</code>","text":"(<code>list[SchemaTable]</code>)           \u2013            <p>List of schema dataclasses.</p>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schema","title":"serialize_schema","text":"<pre><code>serialize_schema(data: SchemaTable) -&gt; dict\n</code></pre> <p>Serialize a schema dataclass into dict.</p> Deprecated <p>This function is deprecated. Please use <code>serialize_dataclass()</code> instead.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>Serialized dict data.</p> </li> </ul>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schema(data)","title":"<code>data</code>","text":"(<code>SchemaTable</code>)           \u2013            <p>Schema dataclass.</p>"},{"location":"apis/schema/table/","title":"Schema Tables","text":""},{"location":"apis/schema/table/#t4_devkit.schema.tables.Attribute","title":"Attribute","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>attribute.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Attribute name.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Attribute description.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.AutolabelModel","title":"AutolabelModel","text":"<p>A dataclass to represent a model used in autolabeling.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the model used for annotation. Can include version information.</p> </li> <li> <code>score</code>               (<code>float</code>)           \u2013            <p>Label score for the annotation from this model (range: 0.0\u20131.0).</p> </li> <li> <code>uncertainty</code>               (<code>float | None</code>)           \u2013            <p>Model-reported uncertainty for the annotation (range: 0.0\u20131.0). Lower values imply higher confidence.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.AutolabelModel.to_autolabel_model","title":"to_autolabel_model  <code>staticmethod</code>","text":"<pre><code>to_autolabel_model(x)\n</code></pre> <p>Convert input to a list of AutolabelModel instances.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[AutolabelModel] | None</code>           \u2013            <p>list[AutolabelModel] | None: Converted list of AutolabelModel instances or None.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.AutolabelModel.to_autolabel_model(x)","title":"<code>x</code>","text":"(<code>list[dict | AutolabelModel] | None</code>)           \u2013            <p>Input to convert. Can be None, a list of dicts, or a list of AutolabelModel instances.</p>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.AutolabelMixin","title":"AutolabelMixin","text":"<p>Mixin class for schema tables that use autolabel metadata with automatic annotation.</p>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.AutolabelMixin.__attrs_post_init__","title":"__attrs_post_init__","text":"<pre><code>__attrs_post_init__()\n</code></pre> <p>Post-initialization validation for autolabel consistency.</p>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.CalibratedSensor","title":"CalibratedSensor","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>calibrated_sensor.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sensor_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sensor type.</p> </li> <li> <code>translation</code>               (<code>Vector3</code>)           \u2013            <p>Coordinates system origin given as [x, y, z] in [m].</p> </li> <li> <code>rotation</code>               (<code>Quaternion</code>)           \u2013            <p>Coordinates system orientation given as quaternion [w, x, y, z].</p> </li> <li> <code>camera_intrinsic</code>               (<code>CameraIntrinsic</code>)           \u2013            <p>3x3 camera intrinsic matrix. Empty for sensors that are not cameras.</p> </li> <li> <code>camera_distortion</code>               (<code>CameraDistortion</code>)           \u2013            <p>Camera distortion array. Empty for sensors that are not cameras.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Category","title":"Category","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>category.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Category name.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Category description.</p> </li> <li> <code>index</code>               (<code>int | None</code>)           \u2013            <p>Category index for lidar segmentation.</p> </li> <li> <code>has_orientation</code>               (<code>bool | None</code>)           \u2013            <p>Indicates whether annotations for this category may include an <code>orientation</code> field (e.g., traffic light arrows). If omitted, it is treated as <code>false</code>.</p> </li> <li> <code>has_number</code>               (<code>bool | None</code>)           \u2013            <p>Indicates whether annotations for this category may include a <code>number</code> field (e.g., numeric traffic lights). If omitted, it is treated as <code>false</code>.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.EgoPose","title":"EgoPose","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>ego_pose.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>translation</code>               (<code>Vector3</code>)           \u2013            <p>Coordinate system origin given as [x, y, z] in [m].</p> </li> <li> <code>rotation</code>               (<code>Quaternion</code>)           \u2013            <p>Coordinate system orientation given as quaternion [w, x, y, z].</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>twist</code>               (<code>Vector6 | None</code>)           \u2013            <p>Linear and angular velocities in the local coordinate system of the ego vehicle (in m/s for linear and rad/s for angular), in the order of (vx, vy, vz, yaw_rate, pitch_rate, roll_rate).</p> </li> <li> <code>acceleration</code>               (<code>Vector3 | None</code>)           \u2013            <p>Acceleration in the local coordinate system of the ego vehicle (in m/s2), in the order of (ax, ay, az).</p> </li> <li> <code>geocoordinate</code>               (<code>Vector3 | None</code>)           \u2013            <p>Coordinates in the WGS 84 reference ellipsoid (latitude, longitude, altitude) in degrees and meters.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Instance","title":"Instance","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>instance.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>category_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the object category.</p> </li> <li> <code>instance_name</code>               (<code>str</code>)           \u2013            <p>Dataset name and instance ID defined in annotation tool.</p> </li> <li> <code>nbr_annotations</code>               (<code>int</code>)           \u2013            <p>Number of annotations of this instance.</p> </li> <li> <code>first_annotation_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the first annotation of this instance.</p> </li> <li> <code>last_annotation_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the last annotation of this instance.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Keypoint","title":"Keypoint","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>keypoint.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sample data, which must be a keyframe image.</p> </li> <li> <code>instance_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the instance.</p> </li> <li> <code>category_tokens</code>               (<code>list[str]</code>)           \u2013            <p>Foreign key pointing to keypoints categories.</p> </li> <li> <code>keypoints</code>               (<code>KeypointLike</code>)           \u2013            <p>Annotated keypoints. Given as a list of [x, y].</p> </li> <li> <code>num_keypoints</code>               (<code>int</code>)           \u2013            <p>The number of keypoints to be annotated.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.LidarSeg","title":"LidarSeg","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent lidar point cloud segmentation data.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>The filename of the lidar point cloud segmentation data.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>The token of the sample data.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Log","title":"Log","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>log.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>logfile</code>               (<code>str</code>)           \u2013            <p>Log file name.</p> </li> <li> <code>vehicle</code>               (<code>str</code>)           \u2013            <p>Vehicle name.</p> </li> <li> <code>data_captured</code>               (<code>str</code>)           \u2013            <p>Date of the data was captured (YYYY-MM-DD-HH-mm-ss).</p> </li> <li> <code>location</code>               (<code>str</code>)           \u2013            <p>Area where log was captured.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Log--shortcuts","title":"Shortcuts:","text":"<pre><code>map_token (str): Foreign key pointing to the map record.\n    This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Map","title":"Map","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>map.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>log_tokens</code>               (<code>str</code>)           \u2013            <p>Foreign keys pointing the log tokens.</p> </li> <li> <code>category</code>               (<code>str</code>)           \u2013            <p>Map category.</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>Relative path to the file with the map mask.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.ObjectAnn","title":"ObjectAnn","text":"<p>               Bases: <code>SchemaBase</code>, <code>AutolabelMixin</code></p> <p>A dataclass to represent schema table of <code>object_ann.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sample data, which must be a keyframe image.</p> </li> <li> <code>instance_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the instance.</p> </li> <li> <code>category_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the object category.</p> </li> <li> <code>attribute_tokens</code>               (<code>list[str]</code>)           \u2013            <p>Foreign keys. List of attributes for this annotation.</p> </li> <li> <code>bbox</code>               (<code>Roi</code>)           \u2013            <p>Annotated bounding box. Given as [xmin, ymin, xmax, ymax].</p> </li> <li> <code>mask</code>               (<code>RLEMask</code>)           \u2013            <p>Instance mask using the COCO format compressed by RLE.</p> </li> <li> <code>orientation</code>               (<code>float | None</code>)           \u2013            <p>Orientation of the arrow shape within the bounding box, in radians. Present only for categories where <code>has_orientation</code> is true (e.g., traffic light arrows).</p> </li> <li> <code>number</code>               (<code>int | None</code>)           \u2013            <p>The digit displayed within the bounding box. Present only for categories where <code>has_number</code> is true (e.g., numeric traffic lights).</p> </li> </ul> Inherited from AutolabelMixin <p>automatic_annotation (bool, optional): Indicates if the annotation is fully generated by an ML model.     If any part is manually modified or annotated by human this value is False. autolabel_metadata (list[AutolabelModel] | None, optional): List of models used for autolabeling. Required if <code>automatic_annotation</code> is <code>true</code>.</p>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.ObjectAnn--shortcuts","title":"Shortcuts:","text":"<pre><code>category_name (str): Category name. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sample","title":"Sample","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>sample.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>scene_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the scene.</p> </li> <li> <code>next</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample that follows this in time. Empty if end of scene.</p> </li> <li> <code>prev</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample that precedes this in time. Empty if start of scene.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sample--shortcuts","title":"Shortcuts:","text":"<pre><code>data (dict[str, str]): Sensor channel and its token.\n    This should be set after instantiated.\nann_3ds (list[str]): List of foreign keys pointing the sample annotations.\n    This should be set after instantiated.\nann_2ds (list[str]): List of foreign keys pointing the object annotations.\n    This should be set after instantiated.\nsurface_anns (list[str]): List of foreign keys pointing the surface annotations.\n    This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleAnnotation","title":"SampleAnnotation","text":"<p>               Bases: <code>SchemaBase</code>, <code>AutolabelMixin</code></p> <p>A dataclass to represent schema table of <code>sample_annotation.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample.</p> </li> <li> <code>instance_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the object instance.</p> </li> <li> <code>attribute_tokens</code>               (<code>list[str]</code>)           \u2013            <p>Foreign keys. List of attributes for this annotation.</p> </li> <li> <code>visibility_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the object visibility.</p> </li> <li> <code>translation</code>               (<code>Vector3</code>)           \u2013            <p>Bounding box location given as [x, y, z] in [m].</p> </li> <li> <code>size</code>               (<code>Vector3</code>)           \u2013            <p>Bounding box size given as [width, length, height] in [m].</p> </li> <li> <code>rotation</code>               (<code>Quaternion</code>)           \u2013            <p>Bounding box orientation given as quaternion [w, x, y, z].</p> </li> <li> <code>num_lidar_pts</code>               (<code>int</code>)           \u2013            <p>Number of lidar points in this box.</p> </li> <li> <code>num_radar_pts</code>               (<code>int</code>)           \u2013            <p>Number of radar points in this box.</p> </li> <li> <code>next</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the annotation that follows this in time. Empty if this is the last annotation for this object.</p> </li> <li> <code>prev</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the annotation that precedes this in time. Empty if this the first annotation for this object.</p> </li> <li> <code>velocity</code>               (<code>Vector3 | None</code>)           \u2013            <p>Bounding box velocity given as [vx, vy, vz] in [m/s].</p> </li> <li> <code>acceleration</code>               (<code>Vector3 | None</code>)           \u2013            <p>Bonding box acceleration given as [ax, ay, av] in [m/s^2].</p> </li> </ul> Inherited from AutolabelMixin <p>automatic_annotation (bool, optional): Indicates if the annotation is fully generated by an ML model.     If any part is manually modified or annotated by human this value is False. autolabel_metadata (list[AutolabelModel] | None, optional): List of models used for autolabeling. Required if <code>automatic_annotation</code> is <code>true</code>.</p>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleAnnotation--shortcuts","title":"Shortcuts:","text":"<pre><code>category_name (str): Category name. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleData","title":"SampleData","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A class to represent schema table of <code>sample_data.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample.</p> </li> <li> <code>ego_pose_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the ego_pose.</p> </li> <li> <code>calibrated_sensor_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the calibrated_sensor.</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>Relative path to data-blob on disk.</p> </li> <li> <code>fileformat</code>               (<code>FileFormat</code>)           \u2013            <p>Data file format.</p> </li> <li> <code>width</code>               (<code>int</code>)           \u2013            <p>If the sample data is an image, this is the image width in [px].</p> </li> <li> <code>height</code>               (<code>int</code>)           \u2013            <p>If the sample data is an image, this is the image height in [px].</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>is_key_frame</code>               (<code>bool</code>)           \u2013            <p>True if sample_data is part of key frame else, False.</p> </li> <li> <code>next</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample_data that follows this in time. Empty if end of scene.</p> </li> <li> <code>prev</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample_data that precedes this in time. Empty if start of scene.</p> </li> <li> <code>is_valid</code>               (<code>bool</code>)           \u2013            <p>True if this data is valid, else False. Invalid data should be ignored.</p> </li> <li> <code>info_filename</code>               (<code>str</code>)           \u2013            <p>Relative path to metainfo data-blob on disk.</p> </li> <li> <code>autolabel_metadata</code>               (<code>list[AutolabelModel] | None</code>)           \u2013            <p>List of models used for autolabeling applied to this entire sample_data item (e.g., image or scan).</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleData--shortcuts","title":"Shortcuts:","text":"<pre><code>modality (SensorModality): Sensor modality. This should be set after instantiated.\nchannel (str): Sensor channel. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Scene","title":"Scene","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>scene.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Short string identifier.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Longer description for the scene.</p> </li> <li> <code>log_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to log from where the data was extracted.</p> </li> <li> <code>nbr_samples</code>               (<code>int</code>)           \u2013            <p>Number of samples in the scene.</p> </li> <li> <code>first_sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the first sample in scene.</p> </li> <li> <code>last_sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the last sample in scene.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sensor","title":"Sensor","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>sensor.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>channel</code>               (<code>str</code>)           \u2013            <p>Sensor channel name.</p> </li> <li> <code>modality</code>               (<code>SensorModality</code>)           \u2013            <p>Sensor modality.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sensor--shortcuts","title":"Shortcuts:","text":"<pre><code>first_sd_token (str): The first sample data token corresponding to its sensor channel.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SurfaceAnn","title":"SurfaceAnn","text":"<p>               Bases: <code>SchemaBase</code>, <code>AutolabelMixin</code></p> <p>A dataclass to represent schema table of <code>surface_ann.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sample data, which must be a keyframe image.</p> </li> <li> <code>category_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the surface category.</p> </li> <li> <code>mask</code>               (<code>RLEMask</code>)           \u2013            <p>Segmentation mask using the COCO format compressed by RLE.</p> </li> </ul> Inherited from AutolabelMixin <p>automatic_annotation (bool, optional): Indicates if the annotation is fully generated by an ML model.     If any part is manually modified or annotated by human this value is False. autolabel_metadata (list[AutolabelModel] | None, optional): List of models used for autolabeling. Required if <code>automatic_annotation</code> is <code>true</code>.</p>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SurfaceAnn--shortcuts","title":"Shortcuts:","text":"<pre><code>category_name (str): Category name. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SurfaceAnn.bbox","title":"bbox  <code>property</code>","text":"<pre><code>bbox\n</code></pre> <p>Return a bounding box corners calculated from polygon vertices.</p> <p>Returns:</p> <ul> <li> <code>Roi | None</code>           \u2013            <p>Roi instance given as [xmin, ymin, xmax, ymax].</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.VehicleState","title":"VehicleState","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>vehicle_state.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>accel_pedal</code>               (<code>float | None</code>)           \u2013            <p>Accel pedal position [%].</p> </li> <li> <code>brake_pedal</code>               (<code>float | None</code>)           \u2013            <p>Brake pedal position [%].</p> </li> <li> <code>steer_pedal</code>               (<code>float | None</code>)           \u2013            <p>Steering wheel position [%].</p> </li> <li> <code>steering_tire_angle</code>               (<code>float | None</code>)           \u2013            <p>Steering tire angle [rad].</p> </li> <li> <code>steering_wheel_angle</code>               (<code>float | None</code>)           \u2013            <p>Steering wheel angle [rad].</p> </li> <li> <code>shift_state</code>               (<code>ShiftState | None</code>)           \u2013            <p>Gear shift state.</p> </li> <li> <code>indicators</code>               (<code>Indicators | None</code>)           \u2013            <p>State of each indicator.</p> </li> <li> <code>additional_info</code>               (<code>AdditionalInfo | None</code>)           \u2013            <p>Additional state information.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Visibility","title":"Visibility","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>visibility.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>level</code>               (<code>VisibilityLevel</code>)           \u2013            <p>Visibility level.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of visibility level.</p> </li> </ul>"},{"location":"schema/","title":"Dataset Schema","text":""},{"location":"schema/#directory-structure","title":"Directory Structure","text":"<pre><code>&lt;DATASET_ID&gt;/\n\u2514\u2500\u2500 &lt;DATASET_VERSION&gt;\n    \u251c\u2500\u2500 annotation    ...schema tables in JSON format\n    \u251c\u2500\u2500 data          ...sensor raw data\n    \u251c\u2500\u2500 input_bag     ...original ROS bag file\n    \u251c\u2500\u2500 map           ...map files\n    \u2514\u2500\u2500 status.json   ...dataset status information\n</code></pre>"},{"location":"schema/#schema-tables","title":"Schema Tables","text":"<p>Annotation information is stored in the <code>annotation</code> directory.</p> <p>See the document of dataset schema for details.</p>"},{"location":"schema/#sensor-data","title":"Sensor Data","text":"<p>Raw sensor data is stored in the <code>data</code> directory.</p> <p>See the document of sensor data for details.</p>"},{"location":"schema/#map-data","title":"Map Data","text":"<p>Map data is stored in the <code>map</code> directory.</p> <p>It is structured as follows:</p> <pre><code>map/\n\u251c\u2500\u2500 lanelet2_map.osm\n\u2514\u2500\u2500 pointcloud_map.pcd\n</code></pre>"},{"location":"schema/#statusjson","title":"status.json","text":"<p><code>status.json</code> contains the information about the configuration used to generate the dataset.</p>"},{"location":"schema/data/","title":"Sensor Data","text":""},{"location":"schema/data/#lidar-point-cloud","title":"LiDAR Point Cloud","text":"<p>LiDAR directory contains point cloud data as the name of <code>&lt;LIDAR_CONCAT&gt;</code> or <code>&lt;LIDAR_TOP&gt;</code>:</p> <pre><code>data/\n\u2514\u2500\u2500 LIDAR_CONCAT\n    \u251c\u2500\u2500 &lt;FRAME_ID&gt;.pcd.bin\n    ...\n</code></pre> <p>Each file contains <code>(x, y, z, intensity, ring_idx(=-1))</code>, and location coordinates are given with respect to the ego vehicle coordinate system.</p> <p>Each file can be loaded using as follows:</p> <pre><code># Using NumPy\nimport numpy as np\n\ndef load_lidar_point_cloud(file_path) -&gt; np.ndarray:\n    data = np.fromfile(file_path, dtype=np.float32) # (N*5,)\n    return data.reshape((-1, 5)) # (N, 5)\n\n# Using t4-devkit\nfrom t4_devkit.dataclass import LidarPointCloud\n\ndef load_lidar_point_cloud_t4(file_path) -&gt; LidarPointCloud:\n    return LidarPointCloud.from_file(file_path)\n</code></pre>"},{"location":"schema/data/#camera-image","title":"Camera Image","text":"<p>Camera directory contains raw images as the name of <code>&lt;CAM_XXX&gt;</code>:</p> <pre><code>data/\n\u251c\u2500\u2500 CAM_BACK\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 &lt;FRAME_ID&gt;.jpg\n\u2502\u00a0\u00a0 ...\n\u251c\u2500\u2500 CAM_BACK_LEFT\n\u251c\u2500\u2500 CAM_BACK_RIGHT\n\u251c\u2500\u2500 CAM_FRONT\n...\n</code></pre>"},{"location":"schema/data/#radar-object","title":"Radar Object","text":"<p>Radar directory contains radar object tracks</p> <pre><code>data/\n\u251c\u2500\u2500 RADAR_BACK\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 &lt;FRAME_ID&gt;.pcd\n\u2502\u00a0\u00a0 ...\n\u251c\u2500\u2500 RADAR_BACK_LEFT\n\u251c\u2500\u2500 RADAR_BACK_RIGHT\n\u251c\u2500\u2500 RADAR_FRONT\n...\n</code></pre> <p>Each file is based on NuScenes radar data format as follows:</p> <pre><code># .PCD v0.7 - Point Cloud Data file format\nVERSION 0.7\nFIELDS x y z dyn_prop id rcs vx vy vx_comp vy_comp is_quality_valid ambig_state x_rms y_rms invalid_state pdh0 vx_rms vy_rms\nSIZE 4 4 4 1 2 4 4 4 4 4 1 1 1 1 1 1 1 1\nTYPE F F F I I F F F F F I I I I I I I I\nCOUNT 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nWIDTH 112\nHEIGHT 1\nVIEWPOINT 0 0 0 1 0 0 0\nPOINTS 112\nDATA binary\n</code></pre> <pre><code>from t4_devkit.dataclass import RadarPointCloud\n\ndef load_radar_point_cloud(file_path) -&gt; RadarPointCloud:\n    return RadarPointCloud.from_file(file_path)\n</code></pre>"},{"location":"schema/table/","title":"Schema Tables","text":""},{"location":"schema/table/#type-definition","title":"Type Definition","text":"Expression Description <code>str</code> String <code>int</code> Integer <code>float</code> Floating point number <code>bool</code> Boolean <code>enum[X,Y,...]</code> Enumerated type with possible values X, Y, ... <code>[T;N]</code> Array of N elements of type T <code>option[T]</code> Optional value of type T <code>RLE</code> Run-length encoding given as <code>{\"size\": &lt;[int;2]&gt;, \"counts\": &lt;str&gt;}</code>, where <code>size</code> represents <code>(width, height)</code> <code>AutolabelModel</code> Autolabel model information given as <code>{\"name\": &lt;str&gt;, \"score\": &lt;float&gt;, \"uncertainty\": &lt;option[float]&gt;}</code>"},{"location":"schema/table/#mandatory-tables","title":"Mandatory Tables","text":"<p>The following mandatory tables are required for the dataset, so <code>Tier</code> class raises runtime error if not found.</p>"},{"location":"schema/table/#attribute","title":"Attribute","text":"<ul> <li>Filename: <code>attribute.json</code></li> </ul> <p>An attribute is a property of an instance that can change while the category remains the same.</p> <p>For example, a <code>pedestrian</code> category can have the following attributes:</p> <ul> <li><code>sitting</code>: Indicates whether the pedestrian is sitting.</li> <li><code>standing</code>: Indicates whether the pedestrian is standing.</li> <li><code>lying_down</code>: Indicates whether the pedestrian is lying down.</li> </ul> <pre><code>attribute {\n  \"token\":             &lt;str&gt; -- Unique record identifier.\n  \"name\":              &lt;str&gt; -- Name of the attribute.\n  \"description\":       &lt;str&gt; -- Description of the attribute.\n}\n</code></pre>"},{"location":"schema/table/#calibratedsensor","title":"CalibratedSensor","text":"<ul> <li>Filename: <code>calibrated_sensor.json</code></li> </ul> <p>Definition of a particular sensor (e.g. LiDAR, camera, radar) as calibrated on a particular vehicle.</p> <p>All extrinsic parameters are given with respect to the world coordinate frame.</p> <pre><code>calibrated_sensor {\n  \"token\":              &lt;str&gt; -- Unique record identifier.\n  \"sensor_token\":       &lt;str&gt; -- Foreign key to the `Sensor` table.\n  \"translation\":        &lt;[float;3]&gt; -- Extrinsic translation of the sensor. Coordinate system origin in meters: (x, y, z).\n  \"rotation\":           &lt;[float;4]&gt; -- Extrinsic rotation of the sensor. Coordinate system orientation as quaternion: (w, x, y, z).\n  \"camera_intrinsic\":   &lt;[[float;3];3]&gt; -- Intrinsic camera calibration matrix. Empty list `[]` for sensors other than cameras.\n  \"camera_distortion\":  &lt;[float;5]&gt; -- Distortion coefficients of the camera. Empty list `[]` for sensors other than cameras.\n}\n</code></pre>"},{"location":"schema/table/#category","title":"Category","text":"<ul> <li>Filename: <code>category.json</code></li> </ul> <p>Taxonomy of object categories, such as <code>vehicle.truck</code>, <code>vehicle.car</code>, etc.</p> <pre><code>category {\n  \"token\":              &lt;str&gt; -- Unique record identifier.\n  \"name\":               &lt;str&gt; -- Name of the category.\n  \"description\":        &lt;str&gt; -- Description of the category.\n  \"index\":              &lt;option[int]&gt; -- Category index, this is added to support `lidarseg`, or `None` when it doesn't support `lidarseg`.\n  \"has_orientation\":    &lt;bool&gt; -- Indicates whether annotations for this category may include an `orientation` field (e.g., traffic light arrows). If omitted, it is treated as `false`.\n  \"has_number\":         &lt;bool&gt; -- Indicates whether annotations for this category may include a `number` field (e.g., numeric traffic lights). If omitted, it is treated as `false`.\n}\n</code></pre>"},{"location":"schema/table/#egopose","title":"EgoPose","text":"<ul> <li>Filename: <code>ego_pose.json</code></li> </ul> <p>Definition of the ego vehicle's pose at a particular timestamp.</p> <p>This includes both the vehicle's position and orientation in space, typically referred in a global coordinate system such as the map or odometry frame.</p> <pre><code>ego_pose {\n  \"token\":              &lt;str&gt; -- Unique record identifier.\n  \"translation\":        &lt;[float;3]&gt; -- Location of the ego vehicle. Coordinate system origin in meters: (x, y, z).\n  \"rotation\":           &lt;[float;4]&gt; -- Rotation of the ego vehicle. Coordinate system orientation as quaternion: (w, x, y, z).\n  \"twist\":              &lt;option[[float;6]]&gt; -- Linear and angular velocity in the local coordinate system of the ego vehicle. Coordinate system velocity as vector: (vx, vy, vz, yaw_rate, pitch_rate, roll_rate).\n  \"acceleration\":       &lt;option[[float;3]]&gt; -- Linear acceleration in the **local** coordinate system of the ego vehicle, (ax, ay, az).\n  \"geocoordinate\":      &lt;option[[float;3]]&gt; -- Geographical coordinates of the ego vehicle. Coordinate system origin in meters: (latitude, longitude, altitude).\n}\n</code></pre>"},{"location":"schema/table/#instance","title":"Instance","text":"<ul> <li>Filename: <code>instance.json</code></li> </ul> <p>A particular object instance. This table is an enumeration of all object instances we observed.</p> <p>Note that instances are not tracked across scenes. For example, even if an object has the same instance in scene A and B, it should be considered as two different instances.</p> <pre><code>instance {\n  \"token\":                  &lt;str&gt; -- Unique record identifier.\n  \"category_token\":         &lt;str&gt; -- Foreign key to the `Category` table.\n  \"instance_name\":          &lt;str&gt; -- Consists of the dataset name and the instance ID separated by colons `::`, such as `&lt;DATASET_ID&gt;::&lt;INSTANCE_ID&gt;`.\n  \"nbr_annotations\":        &lt;int&gt; -- Number of annotations associated with this instance.\n  \"first_annotation_token\": &lt;str&gt; -- Foreign key to the first `SampleAnnotation` table associated with this instance.\n  \"last_annotation_token\":  &lt;str&gt; -- Foreign key to the last `SampleAnnotation` table associated with this instance.\n}\n</code></pre>"},{"location":"schema/table/#log","title":"Log","text":"<ul> <li>Filename: <code>log.json</code></li> </ul> <p>Log information on the data from which the data was collected.</p> <pre><code>log {\n  \"token\":                  &lt;str&gt; -- Unique record identifier.\n  \"logfile\":                &lt;str&gt; -- Path to the log file.\n  \"vehicle\":                &lt;str&gt; -- Name of the vehicle.\n  \"data_captured\":          &lt;str&gt; -- Data captured by the vehicle given as `YYYY-MM-DD-HH-MM-SS`.\n  \"location\":               &lt;str&gt; -- Location of the vehicle.\n}\n</code></pre>"},{"location":"schema/table/#map","title":"Map","text":"<ul> <li>Filename: <code>map.json</code></li> </ul> <pre><code>map {\n  \"token\":                  &lt;str&gt; -- Unique record identifier.\n  \"log_tokens\":             &lt;[str;N]&gt; -- List of foreign keys to the `Log` table associated with this map.\n  \"category\":               &lt;str&gt; -- Category of the map.\n  \"filename\":               &lt;str&gt; -- Relative path to the binary file of the map mask.\n}\n</code></pre>"},{"location":"schema/table/#sample","title":"Sample","text":"<ul> <li>Filename: <code>sample.json</code></li> </ul> <p>A sample is an annotated keyframe. The timestamp of a sample is the same as that of a LiDAR sample data.</p> <pre><code>sample {\n  \"token\":                  &lt;str&gt; -- Unique record identifier.\n  \"timestamp\":              &lt;int&gt; -- Unix timestamp in microseconds, which is the same as the `timestamp` field in the corresponding LiDAR `SampleData` table.\n  \"scene_token\":            &lt;str&gt; -- Foreign key to the `Scene` table associated with this sample.\n  \"next\":                   &lt;str&gt; -- Foreign key to the next `Sample` table associated with this sample. Empty string `\"\"` if this is the last sample.\n  \"prev\":                   &lt;str&gt; -- Foreign key to the previous `Sample` table associated with this sample. Empty string `\"\"` if this is the first sample.\n}\n</code></pre>"},{"location":"schema/table/#sampleannotation","title":"SampleAnnotation","text":"<ul> <li>Filename: <code>sample_annotation.json</code></li> </ul> <p>An annotation for 3D objects in a sample. All location data are given with respect to the global coordinate system.</p> <pre><code>sample_annotation {\n  \"token\":                  &lt;str&gt; -- Unique record identifier.\n  \"sample_token\":           &lt;str&gt; -- Foreign key to the `Sample` table associated with this annotation.\n  \"instance_token\":         &lt;str&gt; -- Foreign key to the `Instance` table associated with this annotation.\n  \"attribute_tokens\":       &lt;[str;N]&gt; -- Foreign keys to the `Attribute` table associated with this annotation.\n  \"visibility_token\":       &lt;str&gt; -- Foreign key to the `Visibility` table associated with this annotation.\n  \"translation\":            &lt;[float;3]&gt; -- Center location of the cuboid in meters as (x, y, z).\n  \"rotation\":               &lt;[float;4]&gt; -- Quaternion representing the orientation of the cuboid as (w, x, y, z).\n  \"size\":                   &lt;[float;3]&gt; -- Size of the cuboid in meters as (width, length, height).\n  \"velocity\":               &lt;option[[float;3]]&gt; -- Velocity of the cuboid in meters per second as (vx, vy, vz).\n  \"acceleration\":           &lt;option[[float;3]]&gt; -- Acceleration of the cuboid in meters per second squared as (ax, ay, az).\n  \"num_lidar_pts\":          &lt;int&gt; -- Number of lidar points within the cuboid.\n  \"num_radar_pts\":          &lt;int&gt; -- Number of radar points within the cuboid.\n  \"next\":                   &lt;str&gt; -- Foreign key to the `SampleAnnotation` table associated with the next annotation in the sequence. Empty string `\"\"` if this is the last annotation.\n  \"prev\":                   &lt;str&gt; -- Foreign key to the `SampleAnnotation` table associated with the previous annotation in the sequence. Empty string `\"\"` if this is the first annotation.\n  \"automatic_annotation\":   &lt;bool&gt; -- Indicates whether the annotation was automatically generated. Defaults to `false`.\n  \"autolabel_metadata\":     &lt;option[[AutolabelModel;N]]&gt; -- List of models used for autolabeling. Required if `automatic_annotation` is `true`.\n}\n</code></pre>"},{"location":"schema/table/#sampledata","title":"SampleData","text":"<ul> <li>Filename: <code>sample_data.json</code></li> </ul> <p>A sensor data, such as image, point cloud, or radar return. If the <code>is_key_frame=True</code>, the timestamp should be very close to the associated sample's timestamp.</p> <pre><code>sample_data {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"sample_token\":             &lt;str&gt; -- Foreign key to the `Sample` table.\n  \"ego_pose_token\":           &lt;str&gt; -- Foreign key to the `EgoPose` table.\n  \"calibrated_sensor_token\":  &lt;str&gt; -- Foreign key to the `CalibratedSensor` table.\n  \"filename\":                 &lt;str&gt; -- Relative path from a dataset root directory to the sensor data file.\n  \"fileformat\":               &lt;enum[\"jpg\", \"png\", \"pcd\", \"bin\", \"pcd.bin\"]&gt; -- File format of the sensor data file.\n  \"width\":                    &lt;int&gt; -- Width of the image in pixels.\n  \"height\":                   &lt;int&gt; -- Height of the image in pixels.\n  \"timestamp\":                &lt;int&gt; -- unix timestamp in microseconds.\n  \"is_key_frame\":             &lt;bool&gt; -- Indicates whether this is a key frame.\n  \"next\":                     &lt;str&gt; -- Foreign key to the `SampleData` table associated with the next data in the sequence. Empty string `\"\"` if this is the last data.\n  \"prev\":                     &lt;str&gt; -- Foreign key to the `SampleData` table associated with the previous data in the sequence. Empty string `\"\"` if this is the first data.\n  \"is_valid\":                 &lt;bool&gt; -- Indicates whether this data is valid. Defaults to `true`.\n  \"info_filename\":            &lt;option[str]&gt; -- Relative path to metadata-blob file.\n  \"autolabel_metadata\":       &lt;option[[AutolabelModel;N]]&gt; -- List of models used for autolabeling applied to this entire sample_data item (e.g., image or scan).\n}\n</code></pre>"},{"location":"schema/table/#scene","title":"Scene","text":"<ul> <li>Filename: <code>scene.json</code></li> </ul> <p>A scene is a sequence of consecutive frames extracted from a log. In T4 format, only one scene is included in a single dataset.</p> <pre><code>scene {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"name\":                     &lt;str&gt; -- Name of the scene, given as `{PROJECT_NAME}_{SCENE_TOKEN}`.\n  \"description\":              &lt;str&gt; -- Description of the scene.\n  \"log_token\":                &lt;str&gt; -- Foreign key to the `Log` table associated with the log that contains this scene.\n  \"nbr_samples\":              &lt;int&gt; -- Number of samples in the scene.\n  \"first_sample_token\":       &lt;str&gt; -- Foreign key to the `Sample` table associated with the first data in the scene.\n  \"last_sample_token\":        &lt;str&gt; -- Foreign key to the `Sample` table associated with the last data in the scene.\n}\n</code></pre>"},{"location":"schema/table/#sensor","title":"Sensor","text":"<ul> <li>Filename: <code>sensor.json</code></li> </ul> <p>A description of sensor types.</p> <pre><code>sensor {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"channel\":                  &lt;str&gt; -- Channel of the sensor.\n  \"modality\":                 &lt;enum[\"camera\", \"lidar\", \"radar\"]&gt; -- Modality of the sensor.\n}\n</code></pre>"},{"location":"schema/table/#visibility","title":"Visibility","text":"<ul> <li>Filename: <code>visibility.json</code></li> </ul> <p>A description of annotation visibility status.</p> <p>Visibility level is classified into 4 bins below:</p> <ul> <li>full: The annotation is fully visible.</li> <li>most: The annotation is mostly visible, more than 50%.</li> <li>partial: The annotation is partially visible, more than 10% but less than 50%.</li> <li>none: The annotation is not visible.</li> </ul> <pre><code>visibility {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"level\":                    &lt;enum[\"full\", \"most\", \"partial\", \"none\"]&gt; -- Level of visibility of the annotation.\n  \"description\":              &lt;str&gt; -- Description of the visibility level.\n}\n</code></pre> Warning <p>Following old formats are also supported but deprecated:</p> <p> <pre><code>- v80-100 : full\n- v60-80  : most\n- v40-60  : partial\n- v0-40   : none\n</code></pre></p> <p>If input level does not satisfy any above cases, <code>VisibilityLevel.UNAVAILABLE</code> will be assigned.</p>"},{"location":"schema/table/#optional-tables","title":"Optional Tables","text":"<p>The following tables are optional, and skipped loading by <code>Tier4</code> class if not exists.</p>"},{"location":"schema/table/#lidarseg","title":"LidarSeg","text":"<ul> <li>Filename: <code>lidarseg.json</code></li> </ul> <p>Mapping between LiDAR segmentation annotations and <code>SampleData</code> corresponding to the LiDAR point cloud associated with a keyframe.</p> <pre><code>lidarseg {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"filename\":                 &lt;str&gt; -- Filename of the LiDAR segmentation annotation labels that is an array of unit8.\n  \"sample_data_token\":        &lt;str&gt; -- Foreign key to the `SampleData` table associated with the sample data.\n}\n</code></pre>"},{"location":"schema/table/#objectann","title":"ObjectAnn","text":"<ul> <li>Filename: <code>object_ann.json</code></li> </ul> <p>The annotation of a foreground object (car, bike, pedestrian, etc.) in an image. Each foreground object is annotated with a 2D box, a 2D instance mask and category-specific attributes.</p> <pre><code>object_ann {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"sample_data_token\":        &lt;str&gt; -- Foreign key to the `SampleData` table associated with the sample data.\n  \"instance_token\":           &lt;str&gt; -- Foreign key to the `Instance` table associated with the instance of the object.\n  \"category_token\":           &lt;str&gt; -- Foreign key to the `Category` table associated with the category of the object.\n  \"attribute_tokens\":         &lt;[str;N]&gt; -- Foreign keys to the `Attribute` table associated with the attributes of the object.\n  \"bbox\":                     &lt;[int;4]&gt; -- Bounding box coordinates in the format (xmin, ymin, xmax, ymax).\n  \"mask\":                     &lt;RLE&gt; -- Run length encoding of instance mask.\n  \"orientation\":              &lt;option[float]&gt; -- Orientation of the arrow shape within the bounding box, in radians. Present only for categories where `has_orientation` is true (e.g., traffic light arrows).\n  \"number\":                   &lt;option[int]&gt; -- The digit displayed within the bounding box. Present only for categories where `has_number` is true (e.g., numeric traffic lights).\n  \"automatic_annotation\":     &lt;bool&gt; -- Whether the annotation was automatically generated. Defaults to `false`.\n  \"autolabel_metadata\":       &lt;option[[AutolabelModel;N]]&gt; -- List of models used for autolabeling. Required if `automatic_annotation` is `true`.\n}\n</code></pre>"},{"location":"schema/table/#surfaceann","title":"SurfaceAnn","text":"<ul> <li>Filename: <code>surface_ann.json</code></li> </ul> <p>The annotation of a background object (drivable surface) in an image. Each background object is annotated with a 2d semantic segmentation mask.</p> <pre><code>surface_ann {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"sample_data_token\":        &lt;str&gt; -- Foreign key to the `SampleData` table associated with the sample data.\n  \"category_token\":           &lt;str&gt; -- Foreign key to the `Category` table associated with the category of the surface.\n  \"mask\":                     &lt;RLE&gt; -- Run length encoding of instance mask.\n  \"automatic_annotation\":     &lt;bool&gt; -- Whether the annotation was automatically generated. Defaults to `false`.\n  \"autolabel_metadata\":       &lt;option[[AutolabelModel;N]]&gt; -- List of models used for autolabeling. Required if `automatic_annotation` is `true`.\n}\n</code></pre>"},{"location":"schema/table/#vehiclestate","title":"VehicleState","text":"<ul> <li>Filename: <code>vehicle_state.json</code></li> </ul> <p>This table provides comprehensive information about the vehicle's state at a given timestamp, including the status of doors, indicators, steering, and other relevant information.</p> <p>In vehicle state, some fields have special types as follows:</p> Type Definition <code>Indicators</code> <code>{\"left\": &lt;IndicatorState&gt;, \"right\": &lt;IndicatorState&gt;, \"hazard\": &lt;IndicatorState&gt;}</code> <code>IndicatorState</code> <code>enum[\"on\", \"off\"]</code> <code>AdditionalInfo</code> <code>{\"speed\": &lt;option[float]&gt;}</code> <pre><code>vehicle_state {\n  \"token\":                    &lt;str&gt; -- Unique record identifier.\n  \"timestamp\":                &lt;int&gt; -- Unix timestamp in microseconds.\n  \"accel_pedal\":              &lt;option[float]&gt; -- Accelerator pedal position percentage.\n  \"brake_pedal\":              &lt;option[float]&gt; -- Brake pedal position percentage.\n  \"steer_pedal\":              &lt;option[float]&gt; -- Steering wheel position percentage.\n  \"steering_tire_angle\":      &lt;option[float]&gt; -- Steering tire angle in radians.\n  \"steering_wheel_angle\":     &lt;option[float]&gt; -- Steering wheel angle in radians.\n  \"shift_state\":              &lt;option[enum[\"PARK\", \"REVERSE\", \"NEUTRAL\", \"HIGH\", \"FORWARD\", \"LOW\", \"NONE\"]]&gt; -- Shift state of the vehicle.\n  \"indicators\":               &lt;option[Indicators]&gt; -- Indicator state of the vehicle.\n  \"additional_info\":          &lt;option[AdditionalInfo]&gt; -- Additional information about the vehicle state.\n}\n</code></pre>"},{"location":"schema/table/#autolabelmodel-definition","title":"AutolabelModel Definition","text":"<p>The <code>AutolabelModel</code> type used in <code>autolabel_metadata</code> fields has the following structure:</p> <pre><code>AutolabelModel {\n  \"name\":                     &lt;str&gt; -- Name of the model used for annotation. Can include version information.\n  \"score\":                    &lt;float&gt; -- Label score for the annotation from this model (range: 0.0\u20131.0).\n  \"uncertainty\":              &lt;option[float]&gt; -- Model-reported uncertainty for the annotation (range: 0.0\u20131.0). Lower values imply higher confidence.\n}\n</code></pre>"},{"location":"tutorials/customize/","title":"Schema Customization","text":""},{"location":"tutorials/customize/#generate-with-a-new-token","title":"Generate with a New Token","text":"<p>You can crate a schema containing the specified table data with a new token using <code>new(...)</code> methods.</p> <pre><code>&gt;&gt;&gt; from t4_devkit.schema import Attribute\n&gt;&gt;&gt; from t4_devkit.common.serialize import serialize_dataclass\n&gt;&gt;&gt;\n&gt;&gt;&gt; # schema data except of the unique identifier token\n&gt;&gt;&gt; data = {\n...     \"name\": \"foo\",\n...     \"description\": \"this is re-generated attribute.\"\n... }\n&gt;&gt;&gt;\n&gt;&gt;&gt; attr1 = Attribute.new(data)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Also, it allows us to create a copy of the existing table data with a new token\n&gt;&gt;&gt; serialized = serialize_dataclass(attr1)\n&gt;&gt;&gt; attr2 = Attribute.new(serialized)\n&gt;&gt;&gt;\n&gt;&gt;&gt; attr1.token != attr2.token\nTrue\n&gt;&gt;&gt; attr1\nAttribute(token='b08701e5095fbd12a45e7f51b85ffc08', name='foo', description='this is re-generated attribute.')\n&gt;&gt;&gt; attr2\nAttribute(token='f40e605870aa29b1473ca6e65255c45e', name='foo', description='this is re-generated attribute.')\n</code></pre>"},{"location":"tutorials/customize/#customize-schema-classes","title":"Customize Schema Classes","text":"<p>You can customize schema classes on your own code, if you need for some reasons.</p> <p>For example, you might meet the error because of missing some mandatory fields but it is OK whatever the actual value is.</p> <p>In here, let's define a custom <code>Attribute</code> class, called <code>CustomAttribute</code>, in your workspace. This class suppresses runtime exception caused by missing <code>description</code> in <code>attribute.json</code>.</p> <p>Now you have the following workspace structure:</p> <pre><code>my_package\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 custom_schema.py\n\u2502   \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>By editing <code>custom_schema.py</code>, you can define <code>CustomAttribute</code> overwriting <code>Attribute</code> as follows:</p> custom_schema.py<pre><code>from __future__ import annotations\n\nfrom attrs import define, field\n\nfrom t4_devkit.schema import SCHEMAS, SchemaName, SchemaBase\nfrom t4_devkit.common.io import load_json\n\n__all__ = [\"CustomAttribute\"]\n\n\n@define(slots=False)\n@SCHEMAS.register(SchemaName.ATTRIBUTE, force=True)\nclass CustomAttribute(SchemaBase):\n    \"\"\"Custom Attribute class ignoring if there is no `description` field.\n    Note that `description` field is mandatory in the original `Attribute` class.\n\n    `@SCHEMAS.register(SchemaName.ATTRIBUTE, force=True)` performs that\n    it forces to update the attribute table in the schema registry.\n    \"\"\"\n\n    name: str\n    description: str | None = field(default=None)\n</code></pre> <p>Note that <code>CustomAttribute</code> should be imported before instantiating <code>Tier4</code> class. Then modify <code>__init__.py</code> in order to import it automatically:</p> __init__.py<pre><code>from .custom_attribute import * # noqa\n</code></pre>"},{"location":"tutorials/initialize/","title":"Initialization","text":""},{"location":"tutorials/initialize/#initialize-tier4-class","title":"Initialize <code>Tier4</code> class","text":"<p><code>Tier4</code> class expects both following dataset directly structure with or without <code>&lt;VERSION&gt;</code> directory:</p> <ul> <li>With <code>&lt;VERSION&gt;</code> directory:</li> </ul> <pre><code>data/tier4/\n\u2514\u2500\u2500 &lt;VERSION&gt; ...version number\n    \u251c\u2500\u2500 annotation ...contains `*.json` files\n    \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_LEFT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_RIGHT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_LEFT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_RIGHT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 LIDAR_CONCAT\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ...Other sensor channels\n    ...\n</code></pre> <ul> <li>Without <code>&lt;VERSION&gt;</code> directory:</li> </ul> <pre><code>data/tier4/\n\u251c\u2500\u2500 annotation ...contains `*.json` files\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_LEFT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_RIGHT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_LEFT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_RIGHT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LIDAR_CONCAT\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...Other sensor channels\n...\n</code></pre> <p>You can initialize a <code>Tier4</code> instance as follows:</p> <pre><code>&gt;&gt;&gt; from t4_devkit import Tier4\n\n&gt;&gt;&gt; t4 = Tier4(\"data/tier4/\", verbose=True)\n======\nLoading T4 tables in `annotation`...\nReverse indexing...\nDone reverse indexing in 0.007 seconds.\n======\n13 attribute\n7 calibrated_sensor\n8 category\n2524 ego_pose\n106 instance\n1 log\n1 map\n72 sample\n2390 sample_annotation\n2524 sample_data\n4 visibility\n7 sensor\n1 scene\n1326 object_ann\n0 surface_ann\n0 keypoint\nDone loading in 0.061 seconds.\n======\n</code></pre> <p>Note that if you doesn't specify <code>revision</code> parameter in construction, it searches the latest version of the dataset. By specifying <code>revision=&lt;VERSION&gt;</code>, you can load the specific version of the dataset.</p> <pre><code>&gt;&gt;&gt; t4 = Tier4(\"data/tier4/\", revision=\"2\", verbose=True)\n</code></pre>"},{"location":"tutorials/initialize/#access-to-schema-fields","title":"Access to Schema Fields","text":""},{"location":"tutorials/initialize/#scene","title":"<code>scene</code>","text":"<pre><code>&gt;&gt;&gt; my_scene = t4.scene[0]\n</code></pre>"},{"location":"tutorials/initialize/#sample","title":"<code>sample</code>","text":"<p><code>sample</code> is an annotated keyframe of a scene at a given timestamp.</p> <pre><code>&gt;&gt;&gt; first_sample_token = my_scene.first_sample_token\n&gt;&gt;&gt; my_sample = t4.get(\"sample\", first_sample_token)\n</code></pre> <p>You can access the <code>sample_data</code> associated with this <code>sample</code>. <code>sample.data</code> returns a <code>dict</code> object consists of <code>{str: &lt;SAMPLE_DATA_TOKEN (str)&gt;}</code>.</p> <pre><code>&gt;&gt;&gt; my_sample.data\n</code></pre>"},{"location":"tutorials/initialize/#sample_data","title":"<code>sample_data</code>","text":"<p><code>sample_data</code> is references to a family of data that is collected from specific sensors.</p> <pre><code>&gt;&gt;&gt; sensor = \"CAM_FRONT\"\n&gt;&gt;&gt; t4.get(\"sample_data\", my_sample.data[sensor])\n</code></pre>"},{"location":"tutorials/initialize/#sample_annotation","title":"<code>sample_annotation</code>","text":"<p><code>sample_annotation</code> refers to any 3D bounding box in a corresponding <code>sample</code>. All location data is given with respect to the global coordinate system. You can access the list of <code>sample_annotation</code> tokens with <code>sample.ann_3ds: list[str]</code>.</p> <pre><code>&gt;&gt;&gt; my_annotation_token = my_sample.ann_3ds[0]\n&gt;&gt;&gt; t4.get(\"sample_annotation\", my_annotation_token)\n</code></pre>"},{"location":"tutorials/initialize/#instance","title":"<code>instance</code>","text":"<p>Each annotated object is instanced to be tracked.</p> <pre><code>&gt;&gt;&gt; t4.instance\n</code></pre>"},{"location":"tutorials/initialize/#category","title":"<code>category</code>","text":"<p>A <code>category</code> is the object assignment of an annotation.</p> <pre><code>&gt;&gt;&gt; t4.category\n</code></pre>"},{"location":"tutorials/initialize/#attribute","title":"<code>attribute</code>","text":"<p>An <code>attribute</code> is a property of an instance that may change throughout different parts of a scene while <code>category</code> remains the same.</p> <pre><code>&gt;&gt;&gt; t4.attribute\n</code></pre>"},{"location":"tutorials/initialize/#visibility","title":"<code>visibility</code>","text":"<p><code>visibility</code> is defined as the fraction of pixels of a particular annotation that are visible over the 6 camera feeds.</p> <pre><code>&gt;&gt;&gt; t4.visibility\n</code></pre> Warning <p>Expected <code>level</code> values in <code>visibility</code> are as below:</p> <p> <pre><code>- full    : No occlusion for the object.\n- most    : Object is occluded, but by less than 50%.\n- partial : Object is occluded, but by more than 50%.\n- none    : Object is 90-100% occluded and no points/pixels are visible.\n</code></pre></p> <p>Following old formats are also supported but deprecated:</p> <p> <pre><code>- v80-100 : full\n- v60-80  : most\n- v40-60  : partial\n- v0-40   : none\n</code></pre></p> <p>If input level does not satisfy any above cases, <code>VisibilityLevel.UNAVAILABLE</code> will be assigned.</p>"},{"location":"tutorials/initialize/#sensor","title":"<code>sensor</code>","text":"<p>T4 dataset consists of several type of sensors. The supported sensor modalities and channels are defined in <code>t4_devkit/schema/tables/sensor.py</code>.</p> <pre><code>&gt;&gt;&gt; t4.sensor\n</code></pre>"},{"location":"tutorials/initialize/#calibrated_sensor","title":"<code>calibrated_sensor</code>","text":"<p><code>calibrated_sensor</code> consists of the definition of a calibration of a particular sensor based on a vehicle.</p> <pre><code>&gt;&gt;&gt; t4.calibrated_sensor\n</code></pre> <p>Note that the <code>translation</code> and <code>rotation</code> parameters are given with respect to the ego vehicle body frame.</p>"},{"location":"tutorials/initialize/#ego_pose","title":"<code>ego_pose</code>","text":"<p><code>ego_pose</code> contains information about the <code>translation</code> and <code>rotation</code> of the ego vehicle, with respect to the global coordinate system.</p> <pre><code>&gt;&gt;&gt; t4.ego_pose\n</code></pre>"},{"location":"tutorials/render/","title":"Visualization","text":""},{"location":"tutorials/render/#rendering-with-tier4","title":"Rendering with <code>Tier4</code>","text":"<p>If you want to visualize annotation results, <code>Tier4</code> supports some rendering methods as below.</p>"},{"location":"tutorials/render/#scene","title":"Scene","text":"<pre><code>&gt;&gt;&gt; t4.render_scene()\n</code></pre>"},{"location":"tutorials/render/#specific-instances","title":"Specific Instance(s)","text":"<pre><code>&gt;&gt;&gt; instance_token = t4.instance[0].token\n&gt;&gt;&gt; t4.render_instance(instance_token)\n</code></pre> <p>Note</p> <p>You can also render multiple instances at once:</p> <p> <pre><code>&gt;&gt;&gt; instance_tokens = [inst.token for inst in t4.instance[:3]]\n&gt;&gt;&gt; t4.render_instance(instance_tokens)\n</code></pre></p>"},{"location":"tutorials/render/#pointcloud","title":"PointCloud","text":"<pre><code>&gt;&gt;&gt; t4.render_pointcloud()\n</code></pre> <p>Note</p> <p>In case of you want to ignore camera distortion, please specify <code>ignore_distortion=True</code>.</p> <p> <pre><code>&gt;&gt;&gt; t4.render_pointcloud(ignore_distortion=True)\n</code></pre></p>"},{"location":"tutorials/render/#save-recording","title":"Save Recording","text":"<p>You can save the rendering result as follows:</p> <pre><code>&gt;&gt;&gt; t4.render_scene(scene_token, save_dir=&lt;DIR_TO_SAVE&gt;)\n</code></pre> <p>When you specify <code>save_dir</code>, viewer will not be spawned on your screen.</p>"},{"location":"tutorials/render/#rendering-with-rerunviewer","title":"Rendering with <code>RerunViewer</code>","text":"<p>If you want to visualize your components, such as boxes that your ML-model estimated, <code>RerunViewer</code> allows you to visualize these components. For details, please refer to the API references.</p> <p>To initialize <code>RerunViewer</code>, you can use the <code>ViewerBuilder</code> class:</p> <pre><code>&gt;&gt;&gt; from t4_devkit.viewer import ViewerBuilder\n# You need to specify `cameras` if you want to 2D spaces\n&gt;&gt;&gt; viewer = (\n        ViewerBuilder()\n        .with_spatial3d()\n        .with_spatial2d(cameras=[\"CAM_FRONT\", \"CAM_BACK\"], projection=True)\n        .with_labels({\"car\": 1, \"pedestrian\": 2})\n        .build(\"foo\")\n    )\n\n# Timestamp in seconds\n&gt;&gt;&gt; seconds: int | float = ...\n</code></pre>"},{"location":"tutorials/render/#rendering-3d-boxes","title":"Rendering 3D boxes","text":"<pre><code># Rendering 3D boxes\n&gt;&gt;&gt; from t4_devkit.dataclass import Box3D\n&gt;&gt;&gt; box3ds = [Box3D(...)...]\n&gt;&gt;&gt; viewer.render_box3ds(seconds, box3ds)\n</code></pre> <p>It allows you to render boxes by specifying elements of boxes directly.</p> <pre><code># Rendering 3D boxes\n&gt;&gt;&gt; centers = [[i, i, i] for i in range(10)]\n&gt;&gt;&gt; frame_id = \"base_link\"\n&gt;&gt;&gt; rotations = [[1, 0, 0, 0] for _ in range(10)]\n&gt;&gt;&gt; sizes = [[1, 1, 1] for _ in range(10)]\n&gt;&gt;&gt; class_ids = [0 for _ in range(10)]\n&gt;&gt;&gt; viewer.render_box3ds(seconds, frame_id, centers, rotations, sizes, class_ids)\n</code></pre> <p></p>"},{"location":"tutorials/render/#rendering-2d-boxes","title":"Rendering 2D boxes","text":"<p>For 2D spaces, you need to specify camera names in the viewer constructor, and render images by specifying camera names:</p> <pre><code># RerunViewer(&lt;APP_ID:str&gt;, cameras=&lt;CAMERA_NAMES:[str;N]&gt;)\n&gt;&gt;&gt; viewer = (\n        ViewerBuilder()\n        .with_spatial3d()\n        .with_spatial2d(cameras=[\"camera1\"])\n        .with_labels({\"car\": 1, \"pedestrian\": 2})\n        .build(\"foo\")\n    )\n\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; image = np.zeros((100, 100, 3), dtype=np.uint8)\n&gt;&gt;&gt; viewer.render_image(seconds, \"camera1\", image)\n</code></pre> <pre><code># Rendering 2D boxes\n&gt;&gt;&gt; from t4_devkit.dataclass import Box2D\n&gt;&gt;&gt; box2ds = [Box2D(...)...]\n&gt;&gt;&gt; viewer.render_box2ds(seconds, \"camera1\", box2ds)\n</code></pre> <p>It allows you to render boxes by specifying elements of boxes directly:</p> <pre><code># Rendering 2D boxes\n&gt;&gt;&gt; rois = [[0, 0, 10 * i, 10 * i] for i in range(10)]\n&gt;&gt;&gt; viewer.render_box2ds(seconds, \"camera1\", rois, class_ids)\n</code></pre> <p></p>"},{"location":"tutorials/render/#rendering-point-cloud","title":"Rendering point cloud","text":"<pre><code>from t4_devkit.dataclass import LidarPointCloud\n# Point cloud channel name\n&gt;&gt;&gt; lidar_channel = \"LIDAR_TOP\"\n# Load point cloud from file\n&gt;&gt;&gt; pointcloud = LidarPointCloud.from_file(&lt;PATH_TO_POINTCLOUD.pcd.bin&gt;)\n&gt;&gt;&gt; viewer.render_pointcloud(seconds, lidar_channel, pointcloud)\n</code></pre>"},{"location":"tutorials/render/#rendering-lanelet-map","title":"Rendering lanelet map","text":"<pre><code># Rendering lanelet map\n&gt;&gt;&gt; viewer.render_map(&lt;PATH_TO_LANELET.osm&gt;)\n</code></pre>"},{"location":"tutorials/cli/","title":"Command Line Tools","text":""},{"location":"tutorials/cli/#cli-support","title":"CLI Support","text":"<p>Following command line tools are supported:</p> <ul> <li><code>t4viz</code>: Visualize T4 dataset features</li> <li><code>t4sanity</code>: Sanity checker of T4 dataset</li> </ul>"},{"location":"tutorials/cli/t4sanity/","title":"t4sanity","text":"<p><code>t4sanity</code> performs sanity checks on T4 datasets, reporting any issues in a structured format. It checks the dataset directories and versions, tries to load them using the <code>Tier4</code> library, and reports any exceptions or warnings.</p> <pre><code>$ t4sanity -h\n\n Usage: t4sanity [OPTIONS] DB_PARENT\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    db_parent      TEXT  Path to parent directory of the databases [default: None] [required]                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v         Show the application version and exit.                                              \u2502\n\u2502 --output              -o    TEXT Path to output JSON file. [default: None]                                           \u2502\n\u2502 --revision            -rv   TEXT Specify if you want to load the specific version. [default: None]                   \u2502\n\u2502 --include-warning     -iw        Indicates whether to report any warnings.                                           \u2502\n\u2502 --install-completion             Install completion for the current shell.                                           \u2502\n\u2502 --show-completion                Show completion for the current shell, to copy it or customize the installation.    \u2502\n\u2502 --help                -h         Show this message and exit.                                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#shell-completion","title":"Shell Completion","text":"<p>Run the following command to install completion, and reload shell.</p> <pre><code>t4sanity --install-completion\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#usages","title":"Usages","text":"<p>As an example, we have the following the dataset structure:</p> <pre><code>&lt;DATA_ROOT&gt;\n\u251c\u2500\u2500 dataset1\n\u2502   \u2514\u2500\u2500 &lt;VERSION&gt;\n\u2502       \u251c\u2500\u2500 annotation\n\u2502       \u251c\u2500\u2500 data\n|       ...\n\u251c\u2500\u2500 dataset2\n\u2502   \u251c\u2500\u2500 annotation\n\u2502   \u251c\u2500\u2500 data\n|   ...\n...\n</code></pre> <p>Then, you can run sanity checks with <code>t4sanity &lt;DATA_ROOT&gt;</code>:</p> <pre><code>&gt;&gt;&gt;Sanity checking...: 1it [00:00,  9.70it/s]\n\u2705 No exceptions occurred!!\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#exclude-warnings","title":"Exclude Warnings","text":"<p>To run sanity check ignoring warnings, providing the path to the parent directory of the datasets:</p> <pre><code>$ t4sanity &lt;DATA_ROOT&gt;\n\n&gt;&gt;&gt;Sanity checking...: 2it [00:00, 18.69it/s]\n\u26a0\ufe0f  Encountered some exceptions!!\n+-----------+---------+--------+------------------------------------------------------------------------------------------------+\n| DatasetID | Version | Status |                                            Message                                             |\n+-----------+---------+--------+------------------------------------------------------------------------------------------------+\n| dataset1  |    2    | ERROR  | bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1532, 198, 1440, 265) |\n| dataset2  |    1    |   OK   |                                                                                                |\n+-----------+---------+--------+------------------------------------------------------------------------------------------------+\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#include-warnings","title":"Include Warnings","text":"<p>To run sanity check and report any warnings, use the <code>-iw; --include-warning</code> option:</p> <pre><code>$ t4sanity &lt;DATA_ROOT&gt; -iw\n\n&gt;&gt;&gt;Sanity checking...: 2it [00:00, 21.54it/s]\n\u26a0\ufe0f  Encountered some exceptions!!\n+-----------+---------+---------+------------------------------------------------------------------------------------------------+\n| DatasetID | Version | Status  |                                            Message                                             |\n+-----------+---------+---------+------------------------------------------------------------------------------------------------+\n| dataset1  |    2    |  ERROR  | bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1532, 198, 1440, 265) |\n| dataset2  |    1    | WARNING |           Category token is empty for surface ann: 0c15d9c143fb2723c16ac7e0c735b0a8            |\n+-----------+---------+---------+------------------------------------------------------------------------------------------------+\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#dump-results-as-json","title":"Dump Results as JSON","text":"<p>To dump results into JSON, use the <code>-o; --output</code> option:</p> <pre><code>$ t4sanity &lt;DATA_ROOT&gt; -o results.json\n\n&gt;&gt;&gt;Sanity checking...: 2it [00:00, 21.54it/s]\n...\n</code></pre> <p>Then a JSON file named <code>results.json</code> will be generated:</p> <pre><code>[\n  {\n    \"dataset_id\": \"dataset1\",\n    \"version\": 2,\n    \"status\": \"ERROR\",\n    \"message\": \"bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1532, 198, 1440, 265)\"\n  },\n  {\n    \"dataset_id\": \"dataset2\",\n    \"version\": 1,\n    \"status\": \"WARNING\",\n    \"message\": \"Category token is empty for surface ann: 0c15d9c143fb2723c16ac7e0c735b0a8\"\n  }\n]\n</code></pre>"},{"location":"tutorials/cli/t4viz/","title":"t4viz","text":"<p><code>t4viz</code> performs visualizing particular dataset attributes from command line.</p> <pre><code>$ t4viz -h\n\n Usage: t4viz [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v        Show the application version and exit.                                           \u2502\n\u2502 --install-completion            Install completion for the current shell.                                        \u2502\n\u2502 --show-completion               Show completion for the current shell, to copy it or customize the installation. \u2502\n\u2502 --help                -h        Show this message and exit.                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 scene        Visualize a specific scene.                                                                         \u2502\n\u2502 instance     Visualize a particular instance in the corresponding scene.                                         \u2502\n\u2502 pointcloud   Visualize pointcloud in the corresponding scene.                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorials/cli/t4viz/#shell-completion","title":"Shell Completion","text":"<p>Run the following command to install completion, and reload shell.</p> <pre><code>t4viz --install-completion\n</code></pre>"},{"location":"tutorials/cli/t4viz/#usages","title":"Usages","text":""},{"location":"tutorials/cli/t4viz/#scene","title":"Scene","text":"<p>This command performs the same behavior with <code>Tier4.render_scene(...)</code>.</p> <p>For options, run <code>t4viz scene -h</code>.</p> <pre><code>t4viz scene &lt;DATA_ROOT&gt; [OPTIONS]\n</code></pre>"},{"location":"tutorials/cli/t4viz/#specific-instances","title":"Specific Instance(s)","text":"<p>This command performs the same behavior with <code>Tier4.render_instance(...)</code>.</p> <p>For options, run <code>t4viz instance -h</code>.</p> <pre><code>t4viz instance &lt;DATA_ROOT&gt; &lt;INSTANCE_TOKEN&gt; [OPTIONS]\n</code></pre> <p>You can also specify multiple instance tokens:</p> <pre><code>t4viz instance &lt;DATA_ROOT&gt; &lt;INSTANCE_TOKEN1&gt; &lt;INSTANCE_TOKEN2&gt; ... [OPTIONS]\n</code></pre>"},{"location":"tutorials/cli/t4viz/#pointcloud","title":"PointCloud","text":"<p>This command performs the same behavior with <code>Tier4.render_pointcloud(...)</code>.</p> <p>For options, run <code>t4viz pointcloud -h</code>.</p> <pre><code>t4viz pointcloud &lt;DATA_ROOT&gt; [OPTIONS]\n</code></pre>"},{"location":"tutorials/cli/t4viz/#future-trajectories","title":"Future Trajectories","text":"<p><code>scene</code> and <code>instance</code> commands support visualizing future trajectories for each object.</p> <p>By specifying <code>-f [--future]</code> option, you can render them in the particular time length:</p> <pre><code>t4viz &lt;COMMAND&gt; ... -f &lt;FUTURE_LENGTH[s]&gt;\n</code></pre>"},{"location":"tutorials/cli/t4viz/#save-recording-as-rrd","title":"Save Recording as <code>.rrd</code>","text":"<p>You can save visualized recording with <code>-o [--output]</code> option as follows:</p> <pre><code>t4viz &lt;COMMAND&gt; ... -o &lt;OUTPUT_DIR&gt;\n</code></pre> <p>Note that if you specify <code>--output</code> option, viewer will not be spawned.</p>"}]}