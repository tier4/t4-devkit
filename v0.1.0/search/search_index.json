{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>t4-devkit</code>","text":"<p><code>t4-devkit</code> is a toolkit to load and operate T4 dataset.</p>"},{"location":"#dataset-format","title":"Dataset Format","text":"<p>For details of T4 dataset format, please refer to tier4_perception_dataset/t4_format_3d_detailed.md.</p>"},{"location":"#feature-supports","title":"Feature supports","text":""},{"location":"#visualization","title":"Visualization","text":"Feature Task Support 3D 3D Boxes \u2705 PointCloud Segmentation Raw PointCloud \u2705 3D Trajectories TF Links \u2705 2D 2D Boxes \u2705 Image Segmentation \u2705 Raw Image \u2705 Raw PointCloud on Image \u2705 Map Vector Map Ego Position on Street View \u2705"},{"location":"#evaluation","title":"Evaluation","text":"Feature Task Support 3D 3D Detection 3D Tracking 3D Motion Prediction PointCloud Segmentation 2D 2D Detection 2D Tracking Image Segmentation Classification"},{"location":"install/","title":"Installation","text":""},{"location":"install/#install-via-github","title":"Install via GitHub","text":"<p>Note that the following command installs the latest <code>main</code> branch:</p> <pre><code># e.g) with pip\npip install git+https://github.com/tier4/t4-devkit.git\n</code></pre> <p>By specifying <code>@&lt;TAG_OR_BRANCH&gt;</code>, you can install the particular version of <code>t4-devkit</code>:</p> <pre><code># e.g) with pip\npip install git+https://github.com/tier4/t4-devkit.git@main\n</code></pre>"},{"location":"install/#install-from-source","title":"Install from source","text":"<p>You need to install <code>uv</code>. For details, please refer to OFFICIAL DOCUMENT.</p> <pre><code>git clone git@github.com:tier4/t4-devkit.git\ncd t4-devkit\nuv sync --python 3.10\n</code></pre> <p>The virtual environment can be activated with:</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"apis/common/","title":"<code>common</code>","text":""},{"location":"apis/common/#t4_devkit.common.converter.to_quaternion","title":"to_quaternion","text":"<pre><code>to_quaternion(x: ArrayLike | NDArray) -&gt; Quaternion\n</code></pre> <p>Convert input rotation like array to <code>Quaternion</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Quaternion</code> (              <code>Quaternion</code> )          \u2013            <p>Converted instance.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.converter.to_quaternion(x)","title":"<code>x</code>","text":"(<code>ArrayLike | NDArray</code>)           \u2013            <p>Rotation matrix or quaternion.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points","title":"view_points","text":"<pre><code>view_points(\n    points: NDArrayF64,\n    intrinsic: NDArrayF64,\n    distortion: NDArrayF64 | None = None,\n    *,\n    normalize: bool = True,\n) -&gt; NDArrayF64\n</code></pre> <p>Project 3d points on a 2d plane. It can be used to implement both perspective and orthographic projections.</p> <p>It first applies the dot product between the points and the view.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>NDArrayF64</code>           \u2013            <p>Projected points in the shape of (3, n). If <code>normalize=False</code>, the 3rd coordinate is the height.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(points)","title":"<code>points</code>","text":"(<code>NDArrayF64</code>)           \u2013            <p>Matrix of points, which is the shape of (3, n) and (x, y, z) is along each column.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(intrinsic)","title":"<code>intrinsic</code>","text":"(<code>NDArrayF64</code>)           \u2013            <p>nxn camera intrinsic matrix (n &lt;= 4).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(distortion)","title":"<code>distortion</code>","text":"(<code>NDArrayF64 | None</code>, default:                   <code>None</code> )           \u2013            <p>Camera distortion coefficients, which is the shape of (n,) (n &gt;= 5).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.view_points(normalize)","title":"<code>normalize</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to normalize the remaining coordinate (along the 3rd axis).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image","title":"is_box_in_image","text":"<pre><code>is_box_in_image(\n    box: Box3D,\n    intrinsic: NDArrayF64,\n    img_size: tuple[int, int],\n    visibility: VisibilityLevel = VisibilityLevel.NONE,\n) -&gt; bool\n</code></pre> <p>Check if a box is visible inside of an image without considering its occlusions.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Return True if visibility condition is satisfied.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(box)","title":"<code>box</code>","text":"(<code>Box3D</code>)           \u2013            <p>The box to be checked.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(intrinsic)","title":"<code>intrinsic</code>","text":"(<code>NDArrayF64</code>)           \u2013            <p>3x3 camera intrinsic matrix.</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(img_size)","title":"<code>img_size</code>","text":"(<code>tuple[int, int]</code>)           \u2013            <p>Image size in the order of (width, height).</p>"},{"location":"apis/common/#t4_devkit.common.geometry.is_box_in_image(visibility)","title":"<code>visibility</code>","text":"(<code>VisibilityLevel</code>, default:                   <code>NONE</code> )           \u2013            <p>Enum member of VisibilityLevel.</p>"},{"location":"apis/common/#t4_devkit.common.io.load_json","title":"load_json","text":"<pre><code>load_json(filename: str) -&gt; Any\n</code></pre> <p>Load json data from specified filepath.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>Loaded data.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.io.load_json(filename)","title":"<code>filename</code>","text":"(<code>str</code>)           \u2013            <p>File path to .json file.</p>"},{"location":"apis/common/#t4_devkit.common.io.save_json","title":"save_json","text":"<pre><code>save_json(data: Any, filename: str) -&gt; None\n</code></pre> <p>Save data into json file.</p> <p>Parameters:</p>"},{"location":"apis/common/#t4_devkit.common.io.save_json(data)","title":"<code>data</code>","text":"(<code>Any</code>)           \u2013            <p>Data to be saved.</p>"},{"location":"apis/common/#t4_devkit.common.io.save_json(filename)","title":"<code>filename</code>","text":"(<code>str</code>)           \u2013            <p>File path to save as json.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.DBException","title":"DBException","text":"<p>A dataclass to store error message of the corresponding dataset.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check","title":"sanity_check","text":"<pre><code>sanity_check(\n    db_root: str | Path,\n    *,\n    revision: str | None = None,\n    include_warning: bool = False,\n) -&gt; DBException | None\n</code></pre> <p>Perform sanity check and report exception or warning encountered while loading the dataset.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DBException | None</code>           \u2013            <p>Exception or warning if exits, otherwise returns None.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check(db_root)","title":"<code>db_root</code>","text":"(<code>str | Path</code>)           \u2013            <p>Path to root directory of the dataset.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check(revision)","title":"<code>revision</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Specific version of the dataset. If None, search the latest one.</p>"},{"location":"apis/common/#t4_devkit.common.sanity.sanity_check(include_warning)","title":"<code>include_warning</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Indicates whether to report warnings.</p>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclasses","title":"serialize_dataclasses","text":"<pre><code>serialize_dataclasses(data: list[Any]) -&gt; list[dict]\n</code></pre> <p>Serialize list of attrs' dataclasses into list of dict.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>Serialized list of dict data.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclasses(data)","title":"<code>data</code>","text":"(<code>list[Any]</code>)           \u2013            <p>List of attrs' dataclasses.</p>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclass","title":"serialize_dataclass","text":"<pre><code>serialize_dataclass(data: Any) -&gt; dict[str, Any]\n</code></pre> <p>Serialize attrs' dataclasses into dict.</p> <p>Note that all fields specified with <code>init=False</code> will be skipped to be serialized.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>Serialized dict.</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.serialize.serialize_dataclass(data)","title":"<code>data</code>","text":"(<code>Any</code>)           \u2013            <p>Dataclass object.</p>"},{"location":"apis/common/#t4_devkit.common.timestamp.us2sec","title":"us2sec","text":"<pre><code>us2sec(timestamp: Number) -&gt; float\n</code></pre> <p>Convert timestamp from micro seconds [us] to seconds [s].</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>Timestamp in [s].</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.timestamp.us2sec(timestamp)","title":"<code>timestamp</code>","text":"(<code>Number</code>)           \u2013            <p>Timestamp in [us].</p>"},{"location":"apis/common/#t4_devkit.common.timestamp.sec2us","title":"sec2us","text":"<pre><code>sec2us(timestamp: Number) -&gt; float\n</code></pre> <p>Convert timestamp from seconds [s] to micro seconds [us].</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>Timestamp in [us].</p> </li> </ul>"},{"location":"apis/common/#t4_devkit.common.timestamp.sec2us(timestamp)","title":"<code>timestamp</code>","text":"(<code>Number</code>)           \u2013            <p>Timestamp in [s].</p>"},{"location":"apis/dataclass/","title":"<code>dataclass</code>","text":""},{"location":"apis/dataclass/#t4_devkit.dataclass.label.SemanticLabel","title":"SemanticLabel","text":"<p>A dataclass to represent semantic labels.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Label name.</p> </li> <li> <code>attributes</code>               (<code>list[str]</code>)           \u2013            <p>List of attribute names.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D","title":"Box3D","text":"<p>A class to represent 3D box.</p> <p>Attributes:</p> <ul> <li> <code>unix_time</code>               (<code>int</code>)           \u2013            <p>Unix timestamp.</p> </li> <li> <code>frame_id</code>               (<code>str</code>)           \u2013            <p>Coordinates frame ID where the box is with respect to.</p> </li> <li> <code>semantic_label</code>               (<code>SemanticLabel</code>)           \u2013            <p><code>SemanticLabel</code> object.</p> </li> <li> <code>confidence</code>               (<code>float</code>)           \u2013            <p>Confidence score of the box.</p> </li> <li> <code>uuid</code>               (<code>str | None</code>)           \u2013            <p>Unique box identifier.</p> </li> <li> <code>position</code>               (<code>Vector3Like</code>)           \u2013            <p>Box center position (x, y, z).</p> </li> <li> <code>rotation</code>               (<code>QuaternionLike</code>)           \u2013            <p>Box rotation quaternion.</p> </li> <li> <code>shape</code>               (<code>Shape</code>)           \u2013            <p><code>Shape</code> object.</p> </li> <li> <code>velocity</code>               (<code>Vector3Like | None</code>)           \u2013            <p>Box velocity (vx, vy, vz).</p> </li> <li> <code>num_points</code>               (<code>int | None</code>)           \u2013            <p>The number of points inside the box.</p> </li> <li> <code>visibility</code>               (<code>VisibilityLevel</code>)           \u2013            <p>Box visibility.</p> </li> <li> <code>future</code>               (<code>Future | None</code>)           \u2013            <p>Box trajectory in the future of each mode.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # without future\n&gt;&gt;&gt; box3d = Box3D(\n...     unix_time=100,\n...     frame_id=\"base_link\",\n...     semantic_label=SemanticLabel(\"car\"),\n...     position=(1.0, 1.0, 1.0),\n...     rotation=Quaternion([0.0, 0.0, 0.0, 1.0]),\n...     shape=Shape(shape_type=ShapeType.BOUNDING_BOX, size=(1.0, 1.0, 1.0)),\n...     velocity=(1.0, 1.0, 1.0),\n...     confidence=1.0,\n...     uuid=\"car3d_0\",\n... )\n&gt;&gt;&gt; # with future\n&gt;&gt;&gt; box3d = box3d.with_future(\n...     waypoints=[[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0]]],\n...     confidences=[1.0],\n... )\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.size","title":"size  <code>property</code>","text":"<pre><code>size: Vector3Like\n</code></pre> <p>Return the box size in the order of (width, length, height).</p> <p>Returns:</p> <ul> <li> <code>Vector3Like</code>           \u2013            <p>(width, length, height) values.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future","title":"with_future","text":"<pre><code>with_future(\n    timestamps: ArrayLike,\n    confidences: ArrayLike,\n    waypoints: ArrayLike,\n) -&gt; Self\n</code></pre> <p>Return a self instance setting <code>future</code> attribute.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance after setting <code>future</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future(timestamps)","title":"<code>timestamps</code>","text":"(<code>ArrayLike</code>)           \u2013            <p>Array of future timestamps at each waypoint in the shape of (T).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future(confidences)","title":"<code>confidences</code>","text":"(<code>ArrayLike</code>)           \u2013            <p>Array of confidences for each mode in the shape of (M).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.with_future(waypoints)","title":"<code>waypoints</code>","text":"(<code>ArrayLike</code>)           \u2013            <p>Array of waypoints for each mode in the shape of (M, T, D).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.translate","title":"translate","text":"<pre><code>translate(x: Vector3Like) -&gt; None\n</code></pre> <p>Apply a translation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.translate(x)","title":"<code>x</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D translation vector in the order of (x, y, z).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.rotate","title":"rotate","text":"<pre><code>rotate(q: QuaternionLike) -&gt; None\n</code></pre> <p>Apply a rotation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.rotate(q)","title":"<code>q</code>","text":"(<code>QuaternionLike</code>)           \u2013            <p>Rotation quaternion.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.corners","title":"corners","text":"<pre><code>corners(box_scale: float = 1.0) -&gt; NDArrayF64\n</code></pre> <p>Return the bounding box corners.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>NDArrayF64</code>           \u2013            <p>First four corners are the ones facing forward. The last four are the ones facing backwards, in the shape of (8, 3).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box3D.corners(box_scale)","title":"<code>box_scale</code>","text":"(<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Multiply size by this factor to scale the box.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box2D","title":"Box2D","text":"<p>A class to represent 2D box.</p> <p>Attributes:</p> <ul> <li> <code>unix_time</code>               (<code>int</code>)           \u2013            <p>Unix timestamp.</p> </li> <li> <code>frame_id</code>               (<code>str</code>)           \u2013            <p>Coordinates frame ID where the box is with respect to.</p> </li> <li> <code>semantic_label</code>               (<code>SemanticLabel</code>)           \u2013            <p><code>SemanticLabel</code> object.</p> </li> <li> <code>confidence</code>               (<code>float</code>)           \u2013            <p>Confidence score of the box.</p> </li> <li> <code>uuid</code>               (<code>str | None</code>)           \u2013            <p>Unique box identifier.</p> </li> <li> <code>roi</code>               (<code>Roi | None</code>)           \u2013            <p><code>Roi</code> object.</p> </li> <li> <code>position</code>               (<code>Vector3Like | None</code>)           \u2013            <p>3D position (x, y, z).</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # without 3D position\n&gt;&gt;&gt; box2d = Box2D(\n...     unix_time=100,\n...     frame_id=\"camera\",\n...     semantic_label=SemanticLabel(\"car\"),\n...     roi=(100, 100, 50, 50),\n...     confidence=1.0,\n...     uuid=\"car2d_0\",\n... )\n&gt;&gt;&gt; # with 3D position\n&gt;&gt;&gt; box2d = box2d.with_position(position=(1.0, 1.0, 1.0))\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box2D.with_position","title":"with_position","text":"<pre><code>with_position(position: Vector3Like) -&gt; Self\n</code></pre> <p>Return a self instance setting <code>position</code> attribute.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance after setting <code>position</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.Box2D.with_position(position)","title":"<code>position</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D position.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.distance_box","title":"distance_box","text":"<pre><code>distance_box(\n    box: BoxLike, tf_matrix: HomogeneousMatrix\n) -&gt; float | None\n</code></pre> <p>Return a box distance from <code>base_link</code>.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>Expecting type of box is <code>Box2D</code> or <code>Box3D</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: Return <code>None</code> if the type of box is <code>Box2D</code> and its <code>position</code> is <code>None</code>, otherwise returns distance from <code>base_link</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.distance_box(box)","title":"<code>box</code>","text":"(<code>BoxLike</code>)           \u2013            <p>A box.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.box.distance_box(tf_matrix)","title":"<code>tf_matrix</code>","text":"(<code>HomogeneousMatrix</code>)           \u2013            <p>Transformation matrix.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud","title":"PointCloud","text":"<p>Abstract base dataclass for pointcloud data.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.num_dims","title":"num_dims  <code>abstractmethod</code> <code>staticmethod</code>","text":"<pre><code>num_dims() -&gt; int\n</code></pre> <p>Return the number of the point dimensions.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of the point dimensions.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.from_file","title":"from_file  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_file(filepath: str) -&gt; Self\n</code></pre> <p>Create an object from pointcloud file.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.from_file(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>File path of the pointcloud file.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.PointCloud.num_points","title":"num_points","text":"<pre><code>num_points() -&gt; int\n</code></pre> <p>Return the number of points.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.LidarPointCloud","title":"LidarPointCloud","text":"<p>A dataclass to represent lidar pointcloud.</p> <p>Attributes:</p> <ul> <li> <code>points</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Points matrix in the shape of (4, N).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.RadarPointCloud","title":"RadarPointCloud","text":"<p>A dataclass to represent radar pointcloud.</p> <p>Attributes:</p> <ul> <li> <code>points</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Points matrix in the shape of (18, N).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.pointcloud.SegmentationPointCloud","title":"SegmentationPointCloud","text":"<p>A dataclass to represent segmentation pointcloud.</p> <p>Attributes:</p> <ul> <li> <code>points</code>               (<code>NDArrayFloat</code>)           \u2013            <p>Points matrix in the shape of (4, N).</p> </li> <li> <code>labels</code>               (<code>NDArrayU8</code>)           \u2013            <p>Label matrix.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi","title":"Roi","text":"<p>A dataclass to represent 2D box ROI.</p> <p>Attributes:</p> <ul> <li> <code>roi</code>               (<code>RoiLike</code>)           \u2013            <p>Box ROI in the order of (xmin, ymin, xmax, ymax).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: tuple[int, int]\n</code></pre> <p>Return the xy offset from the image origin at the top left of the box.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>           \u2013            <p>Top left corner (x, y).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi.size","title":"size  <code>property</code>","text":"<pre><code>size: tuple[int, int]\n</code></pre> <p>Return the size of the box.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>           \u2013            <p>Box size (width, height).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi.width","title":"width  <code>property</code>","text":"<pre><code>width: int\n</code></pre> <p>Return the width of the box.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Box width.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi.height","title":"height  <code>property</code>","text":"<pre><code>height: int\n</code></pre> <p>Return the height of the box.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Box height.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi.center","title":"center  <code>property</code>","text":"<pre><code>center: tuple[int, int]\n</code></pre> <p>Return the center position of the box from the image origin.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, int]</code>           \u2013            <p>Center position of the box (cx, cy).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.roi.Roi.area","title":"area  <code>property</code>","text":"<pre><code>area: int\n</code></pre> <p>Return the area of the box.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Area of the box.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.ShapeType","title":"ShapeType","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.ShapeType.from_name","title":"from_name  <code>classmethod</code>","text":"<pre><code>from_name(name: str) -&gt; Self\n</code></pre> <p>Return an enum object from the name of the member.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Enum object.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.ShapeType.from_name(name)","title":"<code>name</code>","text":"(<code>str</code>)           \u2013            <p>Name of enum member.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.shape.Shape","title":"Shape","text":"<p>A dataclass to represent the 3D box shape.</p> <p>Attributes:</p> <ul> <li> <code>shape_type</code>               (<code>ShapeType</code>)           \u2013            <p>Box shape type.</p> </li> <li> <code>size</code>               (<code>Vector3Like</code>)           \u2013            <p>Box size in the order of (width, length, height).</p> </li> <li> <code>footprint</code>               (<code>Polygon</code>)           \u2013            <p>Polygon of footprint.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; shape = Shape(\n...     shape_type=ShapeType.BOUNDING_BOX,\n...     size=[1.0, 1.0, 1.0]\n... )\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory","title":"Trajectory","text":"<p>A dataclass to represent trajectory.</p> <p>Attributes:</p> <ul> <li> <code>waypoints</code>               (<code>TrajectoryType</code>)           \u2013            <p>Waypoints matrix in the shape of (N, 3).</p> </li> <li> <code>confidence</code>               (<code>float</code>)           \u2013            <p>Confidence score the trajectory.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trajectory = Trajectory(\n...     timestamps=[1.0, 2.0]\n...     confidences=[1.0],\n...     waypoints=[[[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]],\n... )\n# Get the number of modes.\n&gt;&gt;&gt; len(trajectory)\n1\n# Access the shape of waypoints matrix: (M, T, 3).\n&gt;&gt;&gt; trajectory.shape\n(1, 2, 3)\n# Access waypoints as subscriptable.\n&gt;&gt;&gt; trajectory[0] # for mode0\narray([[1., 1., 1.],\n       [2., 2., 2.]])\n&gt;&gt;&gt; trajectory[0, 0] # point0 at mode0\narray([1., 1., 1.])\n# Access confidence and waypoints for each mode as iterable.\n&gt;&gt;&gt; for i, (confidence, waypoints) in trajectory:\n...     print(f\"Mode{i}: {confidence}, {waypoints}\")\n...\nMode0: 1.0, [[1. 1. 1.] [2. 2. 2.]]\n</code></pre>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.num_mode","title":"num_mode  <code>property</code>","text":"<pre><code>num_mode: int\n</code></pre> <p>Return the number of trajectory modes.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of trajectory modes.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.num_timestamp","title":"num_timestamp  <code>property</code>","text":"<pre><code>num_timestamp: int\n</code></pre> <p>Return the number of timestamps.</p> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>The number of timestamps.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: tuple[int, ...]\n</code></pre> <p>Return the shape of the waypoints matrix.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, ...]</code>           \u2013            <p>Shape of the matrix (M, T, D).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.translate","title":"translate","text":"<pre><code>translate(x: Vector3Like) -&gt; None\n</code></pre> <p>Apply a translation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.translate(x)","title":"<code>x</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D translation vector.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.rotate","title":"rotate","text":"<pre><code>rotate(q: QuaternionLike) -&gt; None\n</code></pre> <p>Apply a rotation.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Trajectory.rotate(q)","title":"<code>q</code>","text":"(<code>QuaternionLike</code>)           \u2013            <p>Rotation quaternion.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Past","title":"Past","text":"<p>               Bases: <code>Trajectory</code></p> <p>Represent the past trajectory features.</p> <p>Note that the expected shape of waypoints is (1, T, D).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.trajectory.Future","title":"Future","text":"<p>               Bases: <code>Trajectory</code></p> <p>Represent the future trajectory features.</p> <p>Note that the expected shape of waypoints is (M, T, D).</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer","title":"TransformBuffer","text":"<p>A buffer class to store transformation matrices.</p> <p>Attributes:</p> <ul> <li> <code>buffer</code>               (<code>dict[tuple[str, str], HomogeneousMatrix]</code>)           \u2013            <p>Matrix buffer whose key is <code>(src, dst)</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.set_transform","title":"set_transform","text":"<pre><code>set_transform(matrix: HomogeneousMatrix) -&gt; None\n</code></pre> <p>Set transform matrix to the buffer. Also, if its inverse transformation has not been registered, registers it too.</p> <p>Parameters:</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.set_transform(matrix)","title":"<code>matrix</code>","text":"(<code>HomogeneousMatrix</code>)           \u2013            <p>Transformation matrix.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.lookup_transform","title":"lookup_transform","text":"<pre><code>lookup_transform(\n    src: str, dst: str\n) -&gt; HomogeneousMatrix | None\n</code></pre> <p>Look up the transform matrix corresponding to the <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>HomogeneousMatrix | None</code>           \u2013            <p>Returns <code>HomogeneousMatrix</code> if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.lookup_transform(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.lookup_transform(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_translate","title":"do_translate","text":"<pre><code>do_translate(\n    src: str, dst: str, *args, **kwargs\n) -&gt; TranslateItemLike | None\n</code></pre> <p>Translate specified items with the matrix corresponding to <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>TranslateItemLike | None</code>           \u2013            <p>TranslateItemLike | None: Returns translated items if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_translate(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_translate(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_rotate","title":"do_rotate","text":"<pre><code>do_rotate(\n    src: str, dst: str, *args, **kwargs\n) -&gt; RotateItemLike | None\n</code></pre> <p>Rotate specified items with the matrix corresponding to <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>RotateItemLike | None</code>           \u2013            <p>TranslateItemLike | None: Returns rotated items if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_rotate(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_rotate(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_transform","title":"do_transform","text":"<pre><code>do_transform(\n    src: str, dst: str, *args, **kwargs\n) -&gt; TransformItemLike | None\n</code></pre> <p>Transform specified items with the matrix corresponding to <code>src</code> and <code>dst</code> frame ID.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>TransformItemLike | None</code>           \u2013            <p>TranslateItemLike | None: Returns transformed items if the corresponding matrix can be found, otherwise it returns <code>None</code>.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_transform(src)","title":"<code>src</code>","text":"(<code>str</code>)           \u2013            <p>Source frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.TransformBuffer.do_transform(dst)","title":"<code>dst</code>","text":"(<code>str</code>)           \u2013            <p>Destination frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix","title":"HomogeneousMatrix","text":""},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: tuple[int, ...]\n</code></pre> <p>Return a shape of the homogeneous matrix.</p> <p>Returns:</p> <ul> <li> <code>tuple[int, ...]</code>           \u2013            <p>Return the shape of (4, 4).</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.yaw_pitch_roll","title":"yaw_pitch_roll  <code>property</code>","text":"<pre><code>yaw_pitch_roll: tuple[float, float, float]\n</code></pre> <p>Return yaw, pitch and roll.</p> NOTE <p>yaw: Rotation angle around the z-axis in [rad], in the range <code>[-pi, pi]</code>. pitch: Rotation angle around the y'-axis in [rad], in the range <code>[-pi/2, pi/2]</code>. roll: Rotation angle around the x\"-axis in [rad], in the range <code>[-pi, pi]</code>.</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float]</code>           \u2013            <p>Yaw, pitch and roll in [rad].</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.rotation_matrix","title":"rotation_matrix  <code>property</code>","text":"<pre><code>rotation_matrix: NDArray\n</code></pre> <p>Return a 3x3 rotation matrix.</p> <p>Returns:</p> <ul> <li> <code>NDArray</code>           \u2013            <p>3x3 rotation matrix.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.as_identity","title":"as_identity  <code>classmethod</code>","text":"<pre><code>as_identity(frame_id: str) -&gt; Self\n</code></pre> <p>Construct a new object with identity.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Constructed self instance.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.as_identity(frame_id)","title":"<code>frame_id</code>","text":"(<code>str</code>)           \u2013            <p>Frame ID.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix","title":"from_matrix  <code>classmethod</code>","text":"<pre><code>from_matrix(\n    matrix: NDArray | HomogeneousMatrix,\n    src: str | None = None,\n    dst: str | None = None,\n) -&gt; Self\n</code></pre> <p>Construct a new object from a homogeneous matrix.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Constructed self instance.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix(matrix)","title":"<code>matrix</code>","text":"(<code>NDArray | HomogeneousMatrix</code>)           \u2013            <p>4x4 homogeneous matrix.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix(src)","title":"<code>src</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Source frame ID. This must be specified only if the input matrix is <code>NDArray</code>.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.from_matrix(dst)","title":"<code>dst</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Destination frame ID. This must be specified only if the input matrix is <code>NDArray</code>.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.dot","title":"dot","text":"<pre><code>dot(other: HomogeneousMatrix) -&gt; HomogeneousMatrix\n</code></pre> <p>Return a dot product of myself and another.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p><code>self.src</code> and <code>other.dst</code> must be the same frame ID.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HomogeneousMatrix</code>           \u2013            <p>Result of a dot product.</p> </li> </ul>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.dot(other)","title":"<code>other</code>","text":"(<code>HomogeneousMatrix</code>)           \u2013            <p><code>HomogeneousMatrix</code> object.</p>"},{"location":"apis/dataclass/#t4_devkit.dataclass.transform.HomogeneousMatrix.inv","title":"inv","text":"<pre><code>inv() -&gt; HomogeneousMatrix\n</code></pre> <p>Return a inverse matrix of myself.</p> <p>Returns:</p> <ul> <li> <code>HomogeneousMatrix</code>           \u2013            <p>Inverse matrix.</p> </li> </ul>"},{"location":"apis/filtering/","title":"<code>filtering</code>","text":""},{"location":"apis/filtering/#t4_devkit.filtering.compose.BoxFilter","title":"BoxFilter","text":"<pre><code>BoxFilter(params: FilterParams, tf_buffer: TransformBuffer)\n</code></pre> <p>A class composes multiple filtering functions.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.compose.BoxFilter(params)","title":"<code>params</code>","text":"(<code>FilterParams</code>)           \u2013            <p>Filtering parameters.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.compose.BoxFilter(tf_buffer)","title":"<code>tf_buffer</code>","text":"(<code>TransformBuffer</code>)           \u2013            <p>Transformation buffer.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByLabel","title":"FilterByLabel","text":"<pre><code>FilterByLabel(\n    labels: Sequence[str | SemanticLabel] | None = None,\n)\n</code></pre> <p>Filter a box by checking if the label of the box is included in specified labels.</p> <p>Note that, if <code>labels</code> is None all boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByLabel(labels)","title":"<code>labels</code>","text":"(<code>Sequence[str | SemanticLabel] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of target labels. If <code>None</code>, this filter always returns <code>True</code>.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByUUID","title":"FilterByUUID","text":"<pre><code>FilterByUUID(uuids: Sequence[str] | None = None)\n</code></pre> <p>Filter a box by checking if the uuid of the box is included in specified uuids.</p> <p>Note that, if <code>uuids</code> is None all boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByUUID(uuids)","title":"<code>uuids</code>","text":"(<code>Sequence[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of target uuids. If <code>None</code>, this filter always returns <code>True</code>.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByDistance","title":"FilterByDistance","text":"<pre><code>FilterByDistance(min_distance: float, max_distance: float)\n</code></pre> <p>Filter a box by checking if the box is within the specified distance.</p> <p>Note that, the type box is <code>Box2D</code> and its <code>position</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByDistance(min_distance)","title":"<code>min_distance</code>","text":"(<code>float</code>)           \u2013            <p>Minimum distance from the ego [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByDistance(max_distance)","title":"<code>max_distance</code>","text":"(<code>float</code>)           \u2013            <p>Maximum distance from the ego [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByRegion","title":"FilterByRegion","text":"<pre><code>FilterByRegion(\n    min_xy: tuple[float, float], max_xy: tuple[float, float]\n)\n</code></pre> <p>Filter a box by checking if the box xy position is within the specified xy region.</p> <p>Note that, the type box is <code>Box2D</code> and its <code>position</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByRegion(min_xy)","title":"<code>min_xy</code>","text":"(<code>tuple[float, float]</code>)           \u2013            <p>Minimum xy position [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByRegion(max_xy)","title":"<code>max_xy</code>","text":"(<code>tuple[float, float]</code>)           \u2013            <p>Maximum xy position [m].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterBySpeed","title":"FilterBySpeed","text":"<pre><code>FilterBySpeed(min_speed: float, max_speed: float)\n</code></pre> <p>Filter a 3D box by checking if the box speed is within the specified one.</p> <p>Note that, the type box is <code>Box2D</code>, or <code>Box3D</code> and its <code>velocity</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterBySpeed(min_speed)","title":"<code>min_speed</code>","text":"(<code>float</code>)           \u2013            <p>Minimum speed [m/s].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterBySpeed(max_speed)","title":"<code>max_speed</code>","text":"(<code>float</code>)           \u2013            <p>Maximum speed [m/s].</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByNumPoints","title":"FilterByNumPoints","text":"<pre><code>FilterByNumPoints(min_num_points: int = 0)\n</code></pre> <p>Filter a 3D box by checking if the box includes points greater than the specified one.</p> <p>Note that, the type box is <code>Box2D</code>, or <code>Box3D</code> and its <code>num_points</code> is None, these boxes pass through this filter.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByNumPoints(min_num_points)","title":"<code>min_num_points</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The minimum number of points that a box should include.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByVisibility","title":"FilterByVisibility","text":"<pre><code>FilterByVisibility(\n    visibility: VisibilityLevel = VisibilityLevel.NONE,\n)\n</code></pre> <p>A filter that excludes 3D boxes with lower visibility than a specified threshold.</p> <p>Boxes with <code>UNAVAILABLE</code> visibility are always passed through (i.e., not filtered).</p> <p>Initialize the filter with a visibility threshold.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the given visibility is not comparable (e.g., UNAVAILABLE).</p> </li> </ul>"},{"location":"apis/filtering/#t4_devkit.filtering.functional.FilterByVisibility(visibility)","title":"<code>visibility</code>","text":"(<code>VisibilityLevel</code>, default:                   <code>NONE</code> )           \u2013            <p>The minimum visibility level for a box to pass the filter.</p>"},{"location":"apis/filtering/#t4_devkit.filtering.parameter.FilterParams","title":"FilterParams","text":"<p>A dataclass to represent filtering parameters.</p> <p>Attributes:</p> <ul> <li> <code>labels</code>               (<code>Sequence[str | SemanticLabel] | None</code>)           \u2013            <p>Sequence of target labels.</p> </li> <li> <code>uuids</code>               (<code>Sequence[str] | None</code>)           \u2013            <p>Sequence of target uuids.</p> </li> <li> <code>min_distance</code>               (<code>float</code>)           \u2013            <p>Minimum distance from the ego [m].</p> </li> <li> <code>max_distance</code>               (<code>float</code>)           \u2013            <p>Maximum distance from the ego [m].</p> </li> <li> <code>min_xy</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Minimum xy position from the ego [m].</p> </li> <li> <code>min_xy</code>               (<code>tuple[float, float]</code>)           \u2013            <p>Maximum xy position from the ego [m].</p> </li> <li> <code>min_speed</code>               (<code>float</code>)           \u2013            <p>Minimum speed [m/s].</p> </li> <li> <code>max_speed</code>               (<code>float</code>)           \u2013            <p>Maximum speed [m/s].</p> </li> <li> <code>min_num_points</code>               (<code>int</code>)           \u2013            <p>The minimum number of points which the 3D box should include.</p> </li> <li> <code>visibility</code>               (<code>str | VisibilityLevel</code>)           \u2013            <p>Visibility threshold.</p> </li> </ul>"},{"location":"apis/helper/","title":"<code>helper</code>","text":""},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper","title":"RenderingHelper","text":"<pre><code>RenderingHelper(t4: Tier4)\n</code></pre> <p>Help <code>Tier4</code> class with rendering tasks.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper(t4)","title":"<code>t4</code>","text":"(<code>Tier4</code>)           \u2013            <p><code>Tier4</code> instance.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene","title":"render_scene","text":"<pre><code>render_scene(\n    *,\n    max_time_seconds: float = np.inf,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render specified scene.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_scene(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance","title":"render_instance","text":"<pre><code>render_instance(\n    instance_token: str | Sequence[str],\n    *,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render particular instance.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance(instance_token)","title":"<code>instance_token</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>Instance token(s).</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_instance(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud","title":"render_pointcloud","text":"<pre><code>render_pointcloud(\n    *,\n    max_time_seconds: float = np.inf,\n    ignore_distortion: bool = True,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render pointcloud on 3D and 2D view.</p> <p>Parameters:</p> TODO <p>Add an option of rendering radar channels.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud(ignore_distortion)","title":"<code>ignore_distortion</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to ignore distortion parameters.</p>"},{"location":"apis/helper/#t4_devkit.helper.RenderingHelper.render_pointcloud(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper","title":"TimeseriesHelper","text":"<pre><code>TimeseriesHelper(t4: Tier4)\n</code></pre> <p>Help <code>Tier4</code> class with timeseries relevant operations.</p> <p>Construct a new object.</p> <p>Parameters:</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper(t4)","title":"<code>t4</code>","text":"(<code>Tier4</code>)           \u2013            <p><code>Tier4</code> instance.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until","title":"get_sample_annotations_until","text":"<pre><code>get_sample_annotations_until(\n    instance_token: str, sample_token: str, seconds: float\n) -&gt; tuple[list[int], list[SampleAnnotation]]\n</code></pre> <p>Return a list of sample annotations until the specified seconds.</p> <p>If <code>seconds&gt;=0</code> explores future, otherwise past.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[list[int], list[SampleAnnotation]]</code>           \u2013            <p>List of timestamps and associated sample annotation records of the specified instance.</p> </li> </ul>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until(instance_token)","title":"<code>instance_token</code>","text":"(<code>str</code>)           \u2013            <p>Instance token of any sample annotations.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until(sample_token)","title":"<code>sample_token</code>","text":"(<code>str</code>)           \u2013            <p>Start sample token.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_sample_annotations_until(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Time seconds until. If <code>&gt;=0</code> explore future, otherwise past.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until","title":"get_object_anns_until","text":"<pre><code>get_object_anns_until(\n    instance_token: str,\n    sample_data_token: str,\n    seconds: float,\n) -&gt; tuple[list[int], list[ObjectAnn]]\n</code></pre> <p>Return a list of object anns until the specified seconds.</p> <p>If <code>seconds&gt;=0</code> explores future, otherwise past.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[list[int], list[ObjectAnn]]</code>           \u2013            <p>List of timestamps and associated object annotation records of the specified instance.</p> </li> </ul>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until(instance_token)","title":"<code>instance_token</code>","text":"(<code>str</code>)           \u2013            <p>Instance token of any object anns.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Start sample data token.</p>"},{"location":"apis/helper/#t4_devkit.helper.TimeseriesHelper.get_object_anns_until(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Time seconds until. If <code>&gt;=0</code> explore future, otherwise past.</p>"},{"location":"apis/tier4/","title":"TIER IV API","text":""},{"location":"apis/tier4/#t4_devkit.tier4.DBMetadata","title":"DBMetadata","text":"<p>A dataclass to represent dataset metadata.</p> <p>Attributes:</p> <ul> <li> <code>data_root</code>               (<code>str</code>)           \u2013            <p>Root directory path.</p> </li> <li> <code>dataset_id</code>               (<code>str</code>)           \u2013            <p>Unique dataset ID.</p> </li> <li> <code>version</code>               (<code>str | None</code>)           \u2013            <p>Dataset version.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4","title":"Tier4","text":"<pre><code>Tier4(\n    data_root: str,\n    revision: str | None = None,\n    verbose: bool = True,\n)\n</code></pre> <p>Database class for T4 dataset to help query and retrieve information from the database.</p> <p>Load database and creates reverse indexes and shortcuts.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from t4_devkit import Tier4\n&gt;&gt;&gt; t4 = Tier4(\"data/tier4\")\n======\nLoading T4 tables in `annotation`...\nReverse indexing...\nDone reverse indexing in 0.010 seconds.\n======\n21 category\n8 attribute\n4 visibility\n31 instance\n7 sensor\n7 calibrated_sensor\n2529 ego_pose\n1 log\n1 scene\n88 sample\n2529 sample_data\n1919 sample_annotation\n0 object_ann\n0 surface_ann\n0 keypoint\n1 map\nDone loading in 0.046 seconds.\n======\n</code></pre>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4(data_root)","title":"<code>data_root</code>","text":"(<code>str</code>)           \u2013            <p>Path to the root directory of dataset.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4(revision)","title":"<code>revision</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>You can specify any specific version if you want. If None, search the latest one.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to display status during load.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.data_root","title":"data_root  <code>property</code>","text":"<pre><code>data_root: str\n</code></pre> <p>Return the path to dataset root directory.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.dataset_id","title":"dataset_id  <code>property</code>","text":"<pre><code>dataset_id: str\n</code></pre> <p>Return the dataset ID.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.version","title":"version  <code>property</code>","text":"<pre><code>version: str | None\n</code></pre> <p>Return the dataset version, or None if it is failed to lookup.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_table","title":"get_table","text":"<pre><code>get_table(schema: str | SchemaName) -&gt; list[SchemaTable]\n</code></pre> <p>Return the list of dataclasses corresponding to the schema table.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>List of dataclasses.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_table(schema)","title":"<code>schema</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema table.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get","title":"get","text":"<pre><code>get(schema: str | SchemaName, token: str) -&gt; SchemaTable\n</code></pre> <p>Return a record identified by the associated token.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>SchemaTable</code>           \u2013            <p>Table record of the corresponding token.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get(schema)","title":"<code>schema</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get(token)","title":"<code>token</code>","text":"(<code>str</code>)           \u2013            <p>Token to identify the specific record.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_idx","title":"get_idx","text":"<pre><code>get_idx(schema: str | SchemaName, token: str) -&gt; int\n</code></pre> <p>Return the index of the record in a table in constant runtime.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The index of the record in table.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_idx(schema)","title":"<code>schema</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_idx(token)","title":"<code>token</code>","text":"(<code>str</code>)           \u2013            <p>Token of record.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data_path","title":"get_sample_data_path","text":"<pre><code>get_sample_data_path(sample_data_token: str) -&gt; str\n</code></pre> <p>Return the file path to a raw data recorded in <code>sample_data</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>File path.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data_path(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data","title":"get_sample_data","text":"<pre><code>get_sample_data(\n    sample_data_token: str,\n    *,\n    selected_ann_tokens: list[str] | None = None,\n    as_3d: bool = True,\n    as_sensor_coord: bool = True,\n    future_seconds: float = 0.0,\n    visibility: VisibilityLevel = VisibilityLevel.NONE,\n) -&gt; tuple[str, list[BoxLike], CamIntrinsicLike | None]\n</code></pre> <p>Return the data path as well as all annotations related to that <code>sample_data</code>. Note that output boxes is w.r.t base link or sensor coordinate system.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str, list[BoxLike], CamIntrinsicLike | None]</code>           \u2013            <p>Data path, a list of boxes and 3x3 camera intrinsic matrix.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(selected_ann_tokens)","title":"<code>selected_ann_tokens</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Specify if you want to extract only particular annotations.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(as_3d)","title":"<code>as_3d</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to return 3D or 2D boxes.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(as_sensor_coord)","title":"<code>as_sensor_coord</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to transform boxes as sensor origin coordinate system.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_sample_data(visibility)","title":"<code>visibility</code>","text":"(<code>VisibilityLevel</code>, default:                   <code>NONE</code> )           \u2013            <p>If <code>sample_data</code> is an image, this sets required visibility for only 3D boxes.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_semantic_label","title":"get_semantic_label","text":"<pre><code>get_semantic_label(\n    category_token: str,\n    attribute_tokens: list[str] | None = None,\n) -&gt; SemanticLabel\n</code></pre> <p>Return a SemanticLabel instance from specified <code>category_token</code> and <code>attribute_tokens</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>SemanticLabel</code>           \u2013            <p>Instantiated SemanticLabel.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_semantic_label(category_token)","title":"<code>category_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>Category</code> table.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_semantic_label(attribute_tokens)","title":"<code>attribute_tokens</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of attribute tokens.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3d","title":"get_box3d","text":"<pre><code>get_box3d(\n    sample_annotation_token: str,\n    *,\n    future_seconds: float = 0.0,\n) -&gt; Box3D\n</code></pre> <p>Return a Box3D class from a <code>sample_annotation</code> record.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Box3D</code>           \u2013            <p>Instantiated Box3D.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3d(sample_annotation_token)","title":"<code>sample_annotation_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_annotation</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3d(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2d","title":"get_box2d","text":"<pre><code>get_box2d(object_ann_token: str) -&gt; Box2D\n</code></pre> <p>Return a Box2D class from a <code>object_ann</code> record.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Box2D</code>           \u2013            <p>Instantiated Box2D.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2d(object_ann_token)","title":"<code>object_ann_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>object_ann</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3ds","title":"get_box3ds","text":"<pre><code>get_box3ds(\n    sample_data_token: str, *, future_seconds: float = 0.0\n) -&gt; list[Box3D]\n</code></pre> <p>Rerun a list of Box3D classes for all annotations of a particular <code>sample_data</code> record. It the <code>sample_data</code> is a keyframe, this returns annotations for the corresponding <code>sample</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Box3D]</code>           \u2013            <p>List of instantiated Box3D classes.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3ds(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box3ds(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2ds","title":"get_box2ds","text":"<pre><code>get_box2ds(sample_data_token: str) -&gt; list[Box2D]\n</code></pre> <p>Rerun a list of Box2D classes for all annotations of a particular <code>sample_data</code> record. It the <code>sample_data</code> is a keyframe, this returns annotations for the corresponding <code>sample</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Box2D]</code>           \u2013            <p>List of instantiated Box2D classes.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.get_box2ds(sample_data_token)","title":"<code>sample_data_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_data</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.box_velocity","title":"box_velocity","text":"<pre><code>box_velocity(\n    sample_annotation_token: str, max_time_diff: float = 1.5\n) -&gt; Vector3Like\n</code></pre> <p>Return the velocity of an annotation. If corresponding annotation has a true velocity, this returns it. Otherwise, this estimates the velocity by computing the difference between the previous and next frame. If it is failed to estimate the velocity, values are set to np.nan.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Vector3Like</code> (              <code>Vector3Like</code> )          \u2013            <p>Velocity in the order of (vx, vy, vz) in m/s.</p> </li> </ul> TODO <p>Currently, velocity coordinates is with respect to map, but if should be each box.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.box_velocity(sample_annotation_token)","title":"<code>sample_annotation_token</code>","text":"(<code>str</code>)           \u2013            <p>Token of <code>sample_annotation</code>.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.box_velocity(max_time_diff)","title":"<code>max_time_diff</code>","text":"(<code>float</code>, default:                   <code>1.5</code> )           \u2013            <p>Max allowed time difference between consecutive samples.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene","title":"render_scene","text":"<pre><code>render_scene(\n    *,\n    max_time_seconds: float = np.inf,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render specified scene.</p> <p>Parameters:</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_scene(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance","title":"render_instance","text":"<pre><code>render_instance(\n    instance_token: str | Sequence[str],\n    *,\n    future_seconds: float = 0.0,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render particular instance.</p> <p>Parameters:</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance(instance_token)","title":"<code>instance_token</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>Instance token(s).</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance(future_seconds)","title":"<code>future_seconds</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Future time in [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_instance(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud","title":"render_pointcloud","text":"<pre><code>render_pointcloud(\n    *,\n    max_time_seconds: float = np.inf,\n    ignore_distortion: bool = True,\n    save_dir: str | None = None,\n) -&gt; None\n</code></pre> <p>Render pointcloud on 3D and 2D view.</p> <p>Parameters:</p> TODO <p>Add an option of rendering radar channels.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud(max_time_seconds)","title":"<code>max_time_seconds</code>","text":"(<code>float</code>, default:                   <code>inf</code> )           \u2013            <p>Max time length to be rendered [s].</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.Tier4.render_pointcloud(ignore_distortion)","title":"<code>ignore_distortion</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to ignore distortion parameters.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.load_metadata","title":"load_metadata","text":"<pre><code>load_metadata(\n    db_root: str, revision: str | None = None\n) -&gt; DBMetadata\n</code></pre> <p>Load metadata of T4 dataset including root directory path, dataset ID, and version.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DBMetadata</code>           \u2013            <p>Metadata of T4 dataset.</p> </li> </ul>"},{"location":"apis/tier4/#t4_devkit.tier4.load_metadata(db_root)","title":"<code>db_root</code>","text":"(<code>str</code>)           \u2013            <p>Path to root directory of database.</p>"},{"location":"apis/tier4/#t4_devkit.tier4.load_metadata(revision)","title":"<code>revision</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Specify version of the dataset. If None, search the latest one.</p>"},{"location":"apis/viewer/","title":"<code>viewer</code>","text":""},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer","title":"RerunViewer","text":"<pre><code>RerunViewer(\n    app_id: str,\n    *,\n    cameras: Sequence[str] | None = None,\n    with_3d: bool = True,\n    save_dir: str | None = None,\n)\n</code></pre> <p>A viewer class that renders some components powered by rerun.</p> <p>Construct a new object.</p> <p>Parameters:</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from t4_devkit.viewer import RerunViewer\n# Rendering both 3D/2D spaces\n&gt;&gt;&gt; viewer = RerunViewer(\"myapp\", cameras=[\"camera0\", \"camera1\"])\n# Rendering 3D space only\n&gt;&gt;&gt; viewer = RerunViewer(\"myapp\")\n# Rendering 2D space only\n&gt;&gt;&gt; viewer = RerunViewer(\"myapp\", cameras=[\"camera0\", \"camera1\"], with_3d=False)\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(app_id)","title":"<code>app_id</code>","text":"(<code>str</code>)           \u2013            <p>Application ID.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(cameras)","title":"<code>cameras</code>","text":"(<code>Sequence[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of camera names. If <code>None</code>, any 2D spaces will not be visualized.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(with_3d)","title":"<code>with_3d</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to render objects with the 3D space.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer(save_dir)","title":"<code>save_dir</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Directory path to save the recording. Viewer will be spawned if it is None, otherwise not.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.with_labels","title":"with_labels","text":"<pre><code>with_labels(label2id: dict[str, int]) -&gt; Self\n</code></pre> <p>Return myself after creating <code>rr.AnnotationContext</code> on the recording.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; label2id = {\"car\": 0, \"pedestrian\": 1}\n&gt;&gt;&gt; viewer = RerunViewer(\"myapp\").with_labels(label2id)\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.with_labels(label2id)","title":"<code>label2id</code>","text":"(<code>dict[str, int]</code>)           \u2013            <p>Key-value mapping which maps label name to its class ID.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.with_global_origin","title":"with_global_origin","text":"<pre><code>with_global_origin(lat_lon: tuple[float, float]) -&gt; Self\n</code></pre> <p>Return myself after setting global origin.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Self</code>           \u2013            <p>Self instance.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lat_lon = (42.336849169438615, -71.05785369873047)\n&gt;&gt;&gt; viewer = RerunViewer(\"myapp\").with_global_origin(lat_lon)\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.with_global_origin(lat_lon)","title":"<code>lat_lon</code>","text":"(<code>tuple[float, float]</code>)           \u2013            <p>Global origin of map (latitude, longitude).</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_box3ds","title":"render_box3ds","text":"<pre><code>render_box3ds(\n    seconds: float, boxes: Sequence[Box3D]\n) -&gt; None\n</code></pre><pre><code>render_box3ds(\n    seconds: float,\n    centers: Sequence[Vector3Like],\n    rotations: Sequence[QuaternionLike],\n    sizes: Sequence[Vector3Like],\n    class_ids: Sequence[int],\n    velocities: Sequence[Vector3Like] | None = None,\n    uuids: Sequence[str] | None = None,\n    futures: Sequence[Future] | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_box3ds(*args, **kwargs) -&gt; None\n</code></pre> <p>Render 3D boxes.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_box2ds","title":"render_box2ds","text":"<pre><code>render_box2ds(\n    seconds: float, boxes: Sequence[Box2D]\n) -&gt; None\n</code></pre><pre><code>render_box2ds(\n    seconds: float,\n    camera: str,\n    rois: Sequence[RoiLike],\n    class_ids: Sequence[int],\n    uuids: Sequence[str] | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_box2ds(*args, **kwargs) -&gt; None\n</code></pre> <p>Render 2D boxes.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d","title":"render_segmentation2d","text":"<pre><code>render_segmentation2d(\n    seconds: float,\n    camera: str,\n    masks: Sequence[NDArrayU8],\n    class_ids: Sequence[int],\n    uuids: Sequence[str | None] | None = None,\n) -&gt; None\n</code></pre> <p>Render 2D segmentation image.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Timestamp in [sec].</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(camera)","title":"<code>camera</code>","text":"(<code>str</code>)           \u2013            <p>Name of camera channel.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(masks)","title":"<code>masks</code>","text":"(<code>Sequence[NDArrayU8]</code>)           \u2013            <p>Sequence of segmentation mask of each instance, each mask is the shape of (W, H).</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(class_ids)","title":"<code>class_ids</code>","text":"(<code>Sequence[int]</code>)           \u2013            <p>Sequence of label ids.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_segmentation2d(uuids)","title":"<code>uuids</code>","text":"(<code>Sequence[str | None] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sequence of each instance ID.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud","title":"render_pointcloud","text":"<pre><code>render_pointcloud(\n    seconds: float, channel: str, pointcloud: PointCloudLike\n) -&gt; None\n</code></pre> <p>Render pointcloud.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Timestamp in [sec].</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(channel)","title":"<code>channel</code>","text":"(<code>str</code>)           \u2013            <p>Name of the pointcloud sensor channel.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_pointcloud(pointcloud)","title":"<code>pointcloud</code>","text":"(<code>PointCloudLike</code>)           \u2013            <p>Inherence object of <code>PointCloud</code>.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image","title":"render_image","text":"<pre><code>render_image(\n    seconds: float, camera: str, image: str | NDArrayU8\n) -&gt; None\n</code></pre> <p>Render an image.</p> <p>Parameters:</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image(seconds)","title":"<code>seconds</code>","text":"(<code>float</code>)           \u2013            <p>Timestamp in [sec].</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image(camera)","title":"<code>camera</code>","text":"(<code>str</code>)           \u2013            <p>Name of the camera channel.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_image(image)","title":"<code>image</code>","text":"(<code>str | NDArrayU8</code>)           \u2013            <p>Image tensor or path of the image file.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_ego","title":"render_ego","text":"<pre><code>render_ego(ego_pose: EgoPose) -&gt; None\n</code></pre><pre><code>render_ego(\n    seconds: float,\n    translation: Vector3Like,\n    rotation: QuaternionLike,\n    geocoordinate: Vector3Like | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_ego(*args, **kwargs) -&gt; None\n</code></pre> <p>Render an ego pose.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.RerunViewer.render_calibration","title":"render_calibration","text":"<pre><code>render_calibration(\n    sensor: Sensor, calibration: CalibratedSensor\n) -&gt; None\n</code></pre><pre><code>render_calibration(\n    channel: str,\n    modality: str | SensorModality,\n    translation: Vector3Like,\n    rotation: QuaternionLike,\n    camera_intrinsic: CamIntrinsicLike | None = None,\n) -&gt; None\n</code></pre> <pre><code>render_calibration(*args, **kwargs) -&gt; None\n</code></pre> <p>Render a sensor calibration.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.distance_color","title":"distance_color","text":"<pre><code>distance_color(\n    distances: Number | ArrayLike,\n    cmap: str | None = None,\n    v_min: float = 3.0,\n    v_max: float = 75.0,\n) -&gt; tuple[float, float, float] | NDArrayF64\n</code></pre> <p>Return color map depending on distance values.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float, float] | NDArrayF64</code>           \u2013            <p>Color map in the shape of (N,). If input type is any number, returns a color as <code>tuple[float, float, float]</code>. Otherwise, returns colors as <code>NDArrayF64</code>.</p> </li> </ul>"},{"location":"apis/viewer/#t4_devkit.viewer.distance_color(distances)","title":"<code>distances</code>","text":"(<code>Number | ArrayLike</code>)           \u2013            <p>Array of distances in the shape of (N,).</p>"},{"location":"apis/viewer/#t4_devkit.viewer.distance_color(cmap)","title":"<code>cmap</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Color map name in matplotlib. If None, <code>turbo_r</code> will be used.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.distance_color(v_min)","title":"<code>v_min</code>","text":"(<code>float</code>, default:                   <code>3.0</code> )           \u2013            <p>Min value to normalize.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.distance_color(v_max)","title":"<code>v_max</code>","text":"(<code>float</code>, default:                   <code>75.0</code> )           \u2013            <p>Max value to normalize.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.calculate_geodetic_point","title":"calculate_geodetic_point","text":"<pre><code>calculate_geodetic_point(\n    position: Vector3Like, origin: tuple[float, float]\n) -&gt; tuple[float, float]\n</code></pre> <p>Transform a position in a map coordinate system to a position in a geodetic coordinate system.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[float, float]</code>           \u2013            <p>tuple[float, float]: Transformed position in a geodetic coordinate system, which is (latitude, longitude).</p> </li> </ul>"},{"location":"apis/viewer/#t4_devkit.viewer.calculate_geodetic_point(position)","title":"<code>position</code>","text":"(<code>Vector3Like</code>)           \u2013            <p>3D position in a map coordinate system.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.calculate_geodetic_point(origin)","title":"<code>origin</code>","text":"(<code>tuple[float, float]</code>)           \u2013            <p>Map origin position in a geodetic coordinate system, which is (latitude, longitude).</p>"},{"location":"apis/viewer/#t4_devkit.viewer.format_entity","title":"format_entity","text":"<pre><code>format_entity(root: str, *entities: Sequence[str]) -&gt; str\n</code></pre> <p>Format entity path.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted entity path.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_entity(\"map\")\n\"map\"\n&gt;&gt;&gt; format_entity(\"map\", \"map/base_link\")\n\"map/base_link\"\n&gt;&gt;&gt; format_entity(\"map\", \"map/base_link\", \"camera\")\n\"map/base_link/camera\"\n</code></pre>"},{"location":"apis/viewer/#t4_devkit.viewer.format_entity(root)","title":"<code>root</code>","text":"(<code>str</code>)           \u2013            <p>Root entity path.</p>"},{"location":"apis/viewer/#t4_devkit.viewer.format_entity(*entities)","title":"<code>*entities</code>","text":"(<code>Sequence[str]</code>, default:                   <code>()</code> )           \u2013            <p>Entity path(s).</p>"},{"location":"apis/schema/","title":"<code>schema</code>","text":"<ul> <li>Schema Names</li> <li>Schema Tables</li> <li>Other Items for Schema Tables</li> <li>Schema Registry</li> <li>Serialize Schema</li> </ul>"},{"location":"apis/schema/name/","title":"Schema Names","text":"<p>Under the hood, <code>t4-devkit</code> declares an enum called <code>SchemaName</code>. This enum includes names of each schema table that should be contained in the T4 dataset as <code>.json</code> file.</p> <p>Note that some schema tables are not mandatory, such as <code>object_ann.json</code> and <code>surface_ann.json</code>. For these tables, the method called <code>is_optional()</code> returns <code>True</code> and it is OK that these corresponding <code>.json</code> files are not contained in T4 dataset:</p> <pre><code>from t4_devkit.schema import SchemaName\n\n&gt;&gt;&gt; SchemaName.OBJECT_ANN.is_optional()\nTrue\n</code></pre>"},{"location":"apis/schema/name/#t4_devkit.schema.name.SchemaName","title":"SchemaName","text":"<p>An enum to represent schema filenames.</p> <p>Attributes:</p> <ul> <li> <code>ATTRIBUTE</code>           \u2013            <p>Property of an instance that can change while the category remains the same.</p> </li> <li> <code>CALIBRATED_SENSOR</code>           \u2013            <p>Definition of a particular sensor as calibrated on a vehicle.</p> </li> <li> <code>CATEGORY</code>           \u2013            <p>Object categories.</p> </li> <li> <code>EGO_POSE</code>           \u2013            <p>Ego vehicle pose at at particular timestamp.</p> </li> <li> <code>INSTANCE</code>           \u2013            <p>An object instance.</p> </li> <li> <code>LOG</code>           \u2013            <p>Information about the log from which the data aws extracted.</p> </li> <li> <code>MAP</code>           \u2013            <p>Map data that is stored as binary semantic masks from a top-down view.</p> </li> <li> <code>SAMPLE</code>           \u2013            <p>A sample is an annotated keyframe at specific Hz.</p> </li> <li> <code>SAMPLE_ANNOTATION</code>           \u2013            <p>A bounding box defining the position of an object seen in a sample.</p> </li> <li> <code>SAMPLE_DATA</code>           \u2013            <p>A sensor data e.g. image, pointcloud or radar return.</p> </li> <li> <code>SCENE</code>           \u2013            <p>A scene is a specific long sequence of consecutive frames extracted from a log.</p> </li> <li> <code>SENSOR</code>           \u2013            <p>A specific sensor type.</p> </li> <li> <code>VISIBILITY</code>           \u2013            <p>The visibility of instance is the fraction of annotation visible in all images.</p> </li> <li> <code>OBJECT_ANN</code>               (<code>optional</code>)           \u2013            <p>The annotation of a foreground object in an image.</p> </li> <li> <code>SURFACE_ANN</code>               (<code>optional</code>)           \u2013            <p>The annotation of a background object in an image.</p> </li> <li> <code>KEYPOINT</code>               (<code>optional</code>)           \u2013            <p>The annotation of pose keypoints of an object in an image.</p> </li> <li> <code>VEHICLE_STATE</code>               (<code>optional</code>)           \u2013            <p>The annotation of ego vehicle states.</p> </li> </ul>"},{"location":"apis/schema/name/#t4_devkit.schema.name.SchemaName.filename","title":"filename  <code>property</code>","text":"<pre><code>filename: str\n</code></pre> <p>Return the annotation json filename.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Annotation json filename.</p> </li> </ul>"},{"location":"apis/schema/name/#t4_devkit.schema.name.SchemaName.is_optional","title":"is_optional","text":"<pre><code>is_optional() -&gt; bool\n</code></pre> <p>Indicates if this schema name is optional.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Return True if this schema is optional.</p> </li> </ul>"},{"location":"apis/schema/other/","title":"Other Items for Tables","text":"<p>Following classes are sub items composed of each schema tables.</p>"},{"location":"apis/schema/other/#sampledata","title":"<code>SampleData</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat","title":"FileFormat","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent file formats.</p> <p>Attributes:</p> <ul> <li> <code>JPG</code>           \u2013            <p>JPG format for image data.</p> </li> <li> <code>PNG</code>           \u2013            <p>PNG format for image data.</p> </li> <li> <code>PCD</code>           \u2013            <p>PCD format for pointcloud data.</p> </li> <li> <code>BIN</code>           \u2013            <p>BIN format.</p> </li> <li> <code>PCDBIN</code>           \u2013            <p>PCD.BIN format for pointcloud data.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.is_member","title":"is_member  <code>staticmethod</code>","text":"<pre><code>is_member(item)\n</code></pre> <p>Indicate whether the input item is the one of members of FileFormat.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Return True if the item is included.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.is_member(item)","title":"<code>item</code>","text":"(<code>str</code>)           \u2013            <p>Any file format name.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.values","title":"values  <code>staticmethod</code>","text":"<pre><code>values()\n</code></pre> <p>Return a list of values of members.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of values.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.FileFormat.as_ext","title":"as_ext","text":"<pre><code>as_ext()\n</code></pre> <p>Return the value as file extension.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>File extension.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.SensorModality","title":"SensorModality","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent sensor modalities.</p> <p>Attributes:</p> <ul> <li> <code>LIDAR</code>           \u2013            <p>Lidar sensor.</p> </li> <li> <code>CAMERA</code>           \u2013            <p>Camera sensor.</p> </li> <li> <code>RADAR</code>           \u2013            <p>Radar sensor.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel","title":"VisibilityLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent visibility levels.</p> <p>Attributes:</p> <ul> <li> <code>FULL</code>           \u2013            <p>No occlusion for the object.</p> </li> <li> <code>MOST</code>           \u2013            <p>Object is occluded, but by less than 50%.</p> </li> <li> <code>PARTIAL</code>           \u2013            <p>Object is occluded, but by more than 50%.</p> </li> <li> <code>NONE</code>           \u2013            <p>Object is 90-100% occluded and no points/pixels are visible in the label.</p> </li> <li> <code>UNAVAILABLE</code>           \u2013            <p>Visibility level is not specified.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.from_value","title":"from_value  <code>classmethod</code>","text":"<pre><code>from_value(level)\n</code></pre> <p>Load member from its value.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.rank","title":"rank","text":"<pre><code>rank()\n</code></pre> <p>Return an integer rank for comparison (higher is more visible).</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.is_comparable","title":"is_comparable","text":"<pre><code>is_comparable()\n</code></pre> <p>Return True if the visibility level has a defined rank.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask","title":"RLEMask","text":"<p>A dataclass to represent segmentation mask compressed by RLE.</p> <p>Attributes:</p> <ul> <li> <code>size</code>               (<code>list[int, int]</code>)           \u2013            <p>Size of image ordering (width, height).</p> </li> <li> <code>counts</code>               (<code>str</code>)           \u2013            <p>RLE compressed mask data.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask.decode","title":"decode","text":"<pre><code>decode()\n</code></pre> <p>Decode segmentation mask.</p> <p>Returns:</p> <ul> <li> <code>NDArrayU8</code>           \u2013            <p>Decoded mask in shape of (H, W).</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.ShiftState","title":"ShiftState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent gear shift state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.IndicatorState","title":"IndicatorState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent indicator state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.Indicators","title":"Indicators","text":"<p>A dataclass to represent state of each indicator.</p> <p>Attributes:</p> <ul> <li> <code>left</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the left indicator.</p> </li> <li> <code>right</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the right indicator.</p> </li> <li> <code>hazard</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the hazard lights.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.AdditionalInfo","title":"AdditionalInfo","text":"<p>A dataclass to represent additional state information of the ego vehicle.</p> <p>Attributes:</p> <ul> <li> <code>speed</code>               (<code>float | None</code>)           \u2013            <p>Speed of the ego vehicle.</p> </li> </ul>"},{"location":"apis/schema/other/#sensor","title":"<code>Sensor</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.SensorModality","title":"SensorModality","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent sensor modalities.</p> <p>Attributes:</p> <ul> <li> <code>LIDAR</code>           \u2013            <p>Lidar sensor.</p> </li> <li> <code>CAMERA</code>           \u2013            <p>Camera sensor.</p> </li> <li> <code>RADAR</code>           \u2013            <p>Radar sensor.</p> </li> </ul>"},{"location":"apis/schema/other/#objectannsurfaceann","title":"<code>ObjectAnn</code>/<code>SurfaceAnn</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask","title":"RLEMask","text":"<p>A dataclass to represent segmentation mask compressed by RLE.</p> <p>Attributes:</p> <ul> <li> <code>size</code>               (<code>list[int, int]</code>)           \u2013            <p>Size of image ordering (width, height).</p> </li> <li> <code>counts</code>               (<code>str</code>)           \u2013            <p>RLE compressed mask data.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.RLEMask.decode","title":"decode","text":"<pre><code>decode()\n</code></pre> <p>Decode segmentation mask.</p> <p>Returns:</p> <ul> <li> <code>NDArrayU8</code>           \u2013            <p>Decoded mask in shape of (H, W).</p> </li> </ul>"},{"location":"apis/schema/other/#visibility","title":"<code>Visibility</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel","title":"VisibilityLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent visibility levels.</p> <p>Attributes:</p> <ul> <li> <code>FULL</code>           \u2013            <p>No occlusion for the object.</p> </li> <li> <code>MOST</code>           \u2013            <p>Object is occluded, but by less than 50%.</p> </li> <li> <code>PARTIAL</code>           \u2013            <p>Object is occluded, but by more than 50%.</p> </li> <li> <code>NONE</code>           \u2013            <p>Object is 90-100% occluded and no points/pixels are visible in the label.</p> </li> <li> <code>UNAVAILABLE</code>           \u2013            <p>Visibility level is not specified.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.from_value","title":"from_value  <code>classmethod</code>","text":"<pre><code>from_value(level)\n</code></pre> <p>Load member from its value.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.rank","title":"rank","text":"<pre><code>rank()\n</code></pre> <p>Return an integer rank for comparison (higher is more visible).</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.VisibilityLevel.is_comparable","title":"is_comparable","text":"<pre><code>is_comparable()\n</code></pre> <p>Return True if the visibility level has a defined rank.</p>"},{"location":"apis/schema/other/#vehiclestate","title":"<code>VehicleState</code>","text":""},{"location":"apis/schema/other/#t4_devkit.schema.tables.ShiftState","title":"ShiftState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent gear shift state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.IndicatorState","title":"IndicatorState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>An enum to represent indicator state.</p>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.Indicators","title":"Indicators","text":"<p>A dataclass to represent state of each indicator.</p> <p>Attributes:</p> <ul> <li> <code>left</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the left indicator.</p> </li> <li> <code>right</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the right indicator.</p> </li> <li> <code>hazard</code>               (<code>IndicatorState</code>)           \u2013            <p>State of the hazard lights.</p> </li> </ul>"},{"location":"apis/schema/other/#t4_devkit.schema.tables.AdditionalInfo","title":"AdditionalInfo","text":"<p>A dataclass to represent additional state information of the ego vehicle.</p> <p>Attributes:</p> <ul> <li> <code>speed</code>               (<code>float | None</code>)           \u2013            <p>Speed of the ego vehicle.</p> </li> </ul>"},{"location":"apis/schema/registry/","title":"Schema Registry","text":"<p>Each schema table is registered in <code>SchemaRegistry</code> dynamically at the runtime.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.builder.build_schema","title":"build_schema","text":"<pre><code>build_schema(\n    name: str | SchemaName, filepath: str\n) -&gt; list[SchemaTable]\n</code></pre> <p>Build schema dataclass from json file path.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>List of schema dataclasses.</p> </li> </ul>"},{"location":"apis/schema/registry/#t4_devkit.schema.builder.build_schema(name)","title":"<code>name</code>","text":"(<code>str | SchemaName</code>)           \u2013            <p>Name of schema table.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.builder.build_schema(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>Path to json file.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SCHEMAS","title":"SCHEMAS  <code>module-attribute</code>","text":"<pre><code>SCHEMAS = SchemaRegistry()\n</code></pre>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry","title":"SchemaRegistry","text":"<pre><code>SchemaRegistry()\n</code></pre> <p>A manager class to register schema tables.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry.build_from_json","title":"build_from_json","text":"<pre><code>build_from_json(\n    key: str | SchemaName, filepath: str\n) -&gt; list[SchemaTable]\n</code></pre> <p>Build schema dataclass from json.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[SchemaTable]</code>           \u2013            <p>Instantiated dataclass.</p> </li> </ul>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry.build_from_json(key)","title":"<code>key</code>","text":"(<code>str</code>)           \u2013            <p>Name of schema field.</p>"},{"location":"apis/schema/registry/#t4_devkit.schema.tables.registry.SchemaRegistry.build_from_json(filepath)","title":"<code>filepath</code>","text":"(<code>str</code>)           \u2013            <p>Path to schema json file.</p>"},{"location":"apis/schema/serialize/","title":"Serialize Schema","text":"<p>You can serialize each schema table into <code>dict</code> using following functions.</p>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schemas","title":"serialize_schemas","text":"<pre><code>serialize_schemas(data: list[SchemaTable]) -&gt; list[dict]\n</code></pre> <p>Serialize a list of schema dataclasses into list of dict.</p> Deprecated <p>This function is deprecated. Please use <code>serialize_dataclasses()</code> instead.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>Serialized list of dict data.</p> </li> </ul>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schemas(data)","title":"<code>data</code>","text":"(<code>list[SchemaTable]</code>)           \u2013            <p>List of schema dataclasses.</p>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schema","title":"serialize_schema","text":"<pre><code>serialize_schema(data: SchemaTable) -&gt; dict\n</code></pre> <p>Serialize a schema dataclass into dict.</p> Deprecated <p>This function is deprecated. Please use <code>serialize_dataclass()</code> instead.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>Serialized dict data.</p> </li> </ul>"},{"location":"apis/schema/serialize/#t4_devkit.schema.serialize.serialize_schema(data)","title":"<code>data</code>","text":"(<code>SchemaTable</code>)           \u2013            <p>Schema dataclass.</p>"},{"location":"apis/schema/table/","title":"Schema Tables","text":""},{"location":"apis/schema/table/#t4_devkit.schema.tables.Attribute","title":"Attribute","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>attribute.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Attribute name.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Attribute description.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.CalibratedSensor","title":"CalibratedSensor","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>calibrated_sensor.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sensor_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sensor type.</p> </li> <li> <code>translation</code>               (<code>Vector3Like</code>)           \u2013            <p>Coordinates system origin given as [x, y, z] in [m].</p> </li> <li> <code>rotation</code>               (<code>QuaternionLike</code>)           \u2013            <p>Coordinates system orientation given as quaternion [w, x, y, z].</p> </li> <li> <code>camera_intrinsic</code>               (<code>CamIntrinsicLike</code>)           \u2013            <p>3x3 camera intrinsic matrix. Empty for sensors that are not cameras.</p> </li> <li> <code>camera_distortion</code>               (<code>CamDistortionLike</code>)           \u2013            <p>Camera distortion array. Empty for sensors that are not cameras.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Category","title":"Category","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>category.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Category name.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Category description.</p> </li> <li> <code>index</code>               (<code>int | None</code>)           \u2013            <p>Category index for lidar segmentation.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.EgoPose","title":"EgoPose","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>ego_pose.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>translation</code>               (<code>Vector3Like</code>)           \u2013            <p>Coordinate system origin given as [x, y, z] in [m].</p> </li> <li> <code>rotation</code>               (<code>QuaternionLike</code>)           \u2013            <p>Coordinate system orientation given as quaternion [w, x, y, z].</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>twist</code>               (<code>Vector6Like | None</code>)           \u2013            <p>Linear and angular velocities in the local coordinate system of the ego vehicle (in m/s for linear and rad/s for angular), in the order of (vx, vy, vz, yaw_rate, pitch_rate, roll_rate).</p> </li> <li> <code>acceleration</code>               (<code>Vector3Like | None</code>)           \u2013            <p>Acceleration in the local coordinate system of the ego vehicle (in m/s2), in the order of (ax, ay, az).</p> </li> <li> <code>geocoordinate</code>               (<code>Vector3Like | None</code>)           \u2013            <p>Coordinates in the WGS 84 reference ellipsoid (latitude, longitude, altitude) in degrees and meters.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Instance","title":"Instance","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>instance.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>category_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the object category.</p> </li> <li> <code>instance_name</code>               (<code>str</code>)           \u2013            <p>Dataset name and instance ID defined in annotation tool.</p> </li> <li> <code>nbr_annotations</code>               (<code>int</code>)           \u2013            <p>Number of annotations of this instance.</p> </li> <li> <code>first_annotation_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the first annotation of this instance.</p> </li> <li> <code>last_annotation_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the last annotation of this instance.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Keypoint","title":"Keypoint","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>keypoint.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sample data, which must be a keyframe image.</p> </li> <li> <code>instance_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the instance.</p> </li> <li> <code>category_tokens</code>               (<code>list[str]</code>)           \u2013            <p>Foreign key pointing to keypoints categories.</p> </li> <li> <code>keypoints</code>               (<code>KeypointLike</code>)           \u2013            <p>Annotated keypoints. Given as a list of [x, y].</p> </li> <li> <code>num_keypoints</code>               (<code>int</code>)           \u2013            <p>The number of keypoints to be annotated.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Log","title":"Log","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>log.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>logfile</code>               (<code>str</code>)           \u2013            <p>Log file name.</p> </li> <li> <code>vehicle</code>               (<code>str</code>)           \u2013            <p>Vehicle name.</p> </li> <li> <code>data_captured</code>               (<code>str</code>)           \u2013            <p>Date of the data was captured (YYYY-MM-DD-HH-mm-ss).</p> </li> <li> <code>location</code>               (<code>str</code>)           \u2013            <p>Area where log was captured.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Log--shortcuts","title":"Shortcuts:","text":"<pre><code>map_token (str): Foreign key pointing to the map record.\n    This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Map","title":"Map","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>map.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>log_tokens</code>               (<code>str</code>)           \u2013            <p>Foreign keys pointing the log tokens.</p> </li> <li> <code>category</code>               (<code>str</code>)           \u2013            <p>Map category.</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>Relative path to the file with the map mask.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.ObjectAnn","title":"ObjectAnn","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>object_ann.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sample data, which must be a keyframe image.</p> </li> <li> <code>instance_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the instance.</p> </li> <li> <code>category_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the object category.</p> </li> <li> <code>attribute_tokens</code>               (<code>list[str]</code>)           \u2013            <p>Foreign keys. List of attributes for this annotation.</p> </li> <li> <code>bbox</code>               (<code>RoiLike</code>)           \u2013            <p>Annotated bounding box. Given as [xmin, ymin, xmax, ymax].</p> </li> <li> <code>mask</code>               (<code>RLEMask</code>)           \u2013            <p>Instance mask using the COCO format compressed by RLE.</p> </li> <li> <code>automatic_annotation</code>               (<code>bool</code>)           \u2013            <p>Indicates if the annotation is fully generated by an ML model. If any part is manually modified or annotated by human this value is False.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.ObjectAnn--shortcuts","title":"Shortcuts:","text":"<pre><code>category_name (str): Category name. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.ObjectAnn.width","title":"width  <code>property</code>","text":"<pre><code>width\n</code></pre> <p>Return the width of the bounding box.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Bounding box width in pixel.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.ObjectAnn.height","title":"height  <code>property</code>","text":"<pre><code>height\n</code></pre> <p>Return the height of the bounding box.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Bounding box height in pixel.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sample","title":"Sample","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>sample.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>scene_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the scene.</p> </li> <li> <code>next</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample that follows this in time. Empty if end of scene.</p> </li> <li> <code>prev</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample that precedes this in time. Empty if start of scene.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sample--shortcuts","title":"Shortcuts:","text":"<pre><code>data (dict[str, str]): Sensor channel and its token.\n    This should be set after instantiated.\nann_3ds (list[str]): List of foreign keys pointing the sample annotations.\n    This should be set after instantiated.\nann_2ds (list[str]): List of foreign keys pointing the object annotations.\n    This should be set after instantiated.\nsurface_anns (list[str]): List of foreign keys pointing the surface annotations.\n    This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleAnnotation","title":"SampleAnnotation","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>sample_annotation.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample.</p> </li> <li> <code>instance_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the object instance.</p> </li> <li> <code>attribute_tokens</code>               (<code>list[str]</code>)           \u2013            <p>Foreign keys. List of attributes for this annotation.</p> </li> <li> <code>visibility_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the object visibility.</p> </li> <li> <code>translation</code>               (<code>Vector3Like</code>)           \u2013            <p>Bounding box location given as [x, y, z] in [m].</p> </li> <li> <code>size</code>               (<code>Vector3Like</code>)           \u2013            <p>Bounding box size given as [width, length, height] in [m].</p> </li> <li> <code>rotation</code>               (<code>QuaternionLike</code>)           \u2013            <p>Bounding box orientation given as quaternion [w, x, y, z].</p> </li> <li> <code>num_lidar_pts</code>               (<code>int</code>)           \u2013            <p>Number of lidar points in this box.</p> </li> <li> <code>num_radar_pts</code>               (<code>int</code>)           \u2013            <p>Number of radar points in this box.</p> </li> <li> <code>next</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the annotation that follows this in time. Empty if this is the last annotation for this object.</p> </li> <li> <code>prev</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the annotation that precedes this in time. Empty if this the first annotation for this object.</p> </li> <li> <code>velocity</code>               (<code>Vector3Like | None</code>)           \u2013            <p>Bounding box velocity given as [vx, vy, vz] in [m/s].</p> </li> <li> <code>acceleration</code>               (<code>Vector3Like | None</code>)           \u2013            <p>Bonding box acceleration given as [ax, ay, av] in [m/s^2].</p> </li> <li> <code>automatic_annotation</code>               (<code>bool</code>)           \u2013            <p>Indicates if the annotation is fully generated by an ML model. If any part is manually modified or annotated by human this value is False.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleAnnotation--shortcuts","title":"Shortcuts:","text":"<pre><code>category_name (str): Category name. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleData","title":"SampleData","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A class to represent schema table of <code>sample_data.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample.</p> </li> <li> <code>ego_pose_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the ego_pose.</p> </li> <li> <code>calibrated_sensor_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the calibrated_sensor.</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>Relative path to data-blob on disk.</p> </li> <li> <code>fileformat</code>               (<code>FileFormat</code>)           \u2013            <p>Data file format.</p> </li> <li> <code>width</code>               (<code>int</code>)           \u2013            <p>If the sample data is an image, this is the image width in [px].</p> </li> <li> <code>height</code>               (<code>int</code>)           \u2013            <p>If the sample data is an image, this is the image height in [px].</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>is_key_frame</code>               (<code>bool</code>)           \u2013            <p>True if sample_data is part of key frame else, False.</p> </li> <li> <code>next</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample_data that follows this in time. Empty if end of scene.</p> </li> <li> <code>prev</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing the sample_data that precedes this in time. Empty if start of scene.</p> </li> <li> <code>is_valid</code>               (<code>bool</code>)           \u2013            <p>True if this data is valid, else False. Invalid data should be ignored.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SampleData--shortcuts","title":"Shortcuts:","text":"<pre><code>modality (SensorModality): Sensor modality. This should be set after instantiated.\nchannel (str): Sensor channel. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Scene","title":"Scene","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>scene.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Short string identifier.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Longer description for the scene.</p> </li> <li> <code>log_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to log from where the data was extracted.</p> </li> <li> <code>nbr_samples</code>               (<code>int</code>)           \u2013            <p>Number of samples in the scene.</p> </li> <li> <code>first_sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the first sample in scene.</p> </li> <li> <code>last_sample_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the last sample in scene.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sensor","title":"Sensor","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>sensor.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>channel</code>               (<code>str</code>)           \u2013            <p>Sensor channel name.</p> </li> <li> <code>modality</code>               (<code>SensorModality</code>)           \u2013            <p>Sensor modality.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Sensor--shortcuts","title":"Shortcuts:","text":"<pre><code>first_sd_token (str): The first sample data token corresponding to its sensor channel.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SurfaceAnn","title":"SurfaceAnn","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>surface_ann.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>sample_data_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the sample data, which must be a keyframe image.</p> </li> <li> <code>category_token</code>               (<code>str</code>)           \u2013            <p>Foreign key pointing to the surface category.</p> </li> <li> <code>mask</code>               (<code>RLEMask</code>)           \u2013            <p>Segmentation mask using the COCO format compressed by RLE.</p> </li> <li> <code>automatic_annotation</code>               (<code>bool</code>)           \u2013            <p>Indicates if the annotation is fully generated by an ML model. If any part is manually modified or annotated by human this value is False.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SurfaceAnn--shortcuts","title":"Shortcuts:","text":"<pre><code>category_name (str): Category name. This should be set after instantiated.\n</code></pre>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.SurfaceAnn.bbox","title":"bbox  <code>property</code>","text":"<pre><code>bbox\n</code></pre> <p>Return a bounding box corners calculated from polygon vertices.</p> <p>Returns:</p> <ul> <li> <code>RoiLike | None</code>           \u2013            <p>Given as [xmin, ymin, xmax, ymax].</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.VehicleState","title":"VehicleState","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>vehicle_state.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>timestamp</code>               (<code>int</code>)           \u2013            <p>Unix time stamp.</p> </li> <li> <code>accel_pedal</code>               (<code>float | None</code>)           \u2013            <p>Accel pedal position [%].</p> </li> <li> <code>brake_pedal</code>               (<code>float | None</code>)           \u2013            <p>Brake pedal position [%].</p> </li> <li> <code>steer_pedal</code>               (<code>float | None</code>)           \u2013            <p>Steering wheel position [%].</p> </li> <li> <code>steering_tire_angle</code>               (<code>float | None</code>)           \u2013            <p>Steering tire angle [rad].</p> </li> <li> <code>steering_wheel_angle</code>               (<code>float | None</code>)           \u2013            <p>Steering wheel angle [rad].</p> </li> <li> <code>shift_state</code>               (<code>ShiftState | None</code>)           \u2013            <p>Gear shift state.</p> </li> <li> <code>indicators</code>               (<code>Indicators | None</code>)           \u2013            <p>State of each indicator.</p> </li> <li> <code>additional_info</code>               (<code>AdditionalInfo | None</code>)           \u2013            <p>Additional state information.</p> </li> </ul>"},{"location":"apis/schema/table/#t4_devkit.schema.tables.Visibility","title":"Visibility","text":"<p>               Bases: <code>SchemaBase</code></p> <p>A dataclass to represent schema table of <code>visibility.json</code>.</p> <p>Attributes:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Unique record identifier.</p> </li> <li> <code>level</code>               (<code>VisibilityLevel</code>)           \u2013            <p>Visibility level.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of visibility level.</p> </li> </ul>"},{"location":"tutorials/customize/","title":"Schema Customization","text":""},{"location":"tutorials/customize/#generate-with-a-new-token","title":"Generate with a New Token","text":"<p>You can crate a schema containing the specified table data with a new token using <code>new(...)</code> methods.</p> <pre><code>&gt;&gt;&gt; from t4_devkit.schema import Attribute\n&gt;&gt;&gt; from t4_devkit.common.serialize import serialize_dataclass\n&gt;&gt;&gt;\n&gt;&gt;&gt; # schema data except of the unique identifier token\n&gt;&gt;&gt; data = {\n...     \"name\": \"foo\",\n...     \"description\": \"this is re-generated attribute.\"\n... }\n&gt;&gt;&gt;\n&gt;&gt;&gt; attr1 = Attribute.new(data)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Also, it allows us to create a copy of the existing table data with a new token\n&gt;&gt;&gt; serialized = serialize_dataclass(attr1)\n&gt;&gt;&gt; attr2 = Attribute.new(serialized)\n&gt;&gt;&gt;\n&gt;&gt;&gt; attr1.token != attr2.token\nTrue\n&gt;&gt;&gt; attr1\nAttribute(token='b08701e5095fbd12a45e7f51b85ffc08', name='foo', description='this is re-generated attribute.')\n&gt;&gt;&gt; attr2\nAttribute(token='f40e605870aa29b1473ca6e65255c45e', name='foo', description='this is re-generated attribute.')\n</code></pre>"},{"location":"tutorials/customize/#customize-schema-classes","title":"Customize Schema Classes","text":"<p>You can customize schema classes on your own code, if you need for some reasons.</p> <p>For example, you might meet the error because of missing some mandatory fields but it is OK whatever the actual value is.</p> <p>In here, let's define a custom <code>Attribute</code> class, called <code>CustomAttribute</code>, in your workspace. This class suppresses runtime exception caused by missing <code>description</code> in <code>attribute.json</code>.</p> <p>Now you have the following workspace structure:</p> <pre><code>my_package\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 custom_schema.py\n\u2502   \u2514\u2500\u2500 main.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>By editing <code>custom_schema.py</code>, you can define <code>CustomAttribute</code> overwriting <code>Attribute</code> as follows:</p> custom_schema.py<pre><code>from __future__ import annotations\n\nfrom attrs import define, field\n\nfrom t4_devkit.schema import SCHEMAS, SchemaName, SchemaBase\nfrom t4_devkit.common.io import load_json\n\n__all__ = [\"CustomAttribute\"]\n\n\n@define(slots=False)\n@SCHEMAS.register(SchemaName.ATTRIBUTE, force=True)\nclass CustomAttribute(SchemaBase):\n    \"\"\"Custom Attribute class ignoring if there is no `description` field.\n    Note that `description` field is mandatory in the original `Attribute` class.\n\n    `@SCHEMAS.register(SchemaName.ATTRIBUTE, force=True)` performs that\n    it forces to update the attribute table in the schema registry.\n    \"\"\"\n\n    name: str\n    description: str | None = field(default=None)\n</code></pre> <p>Note that <code>CustomAttribute</code> should be imported before instantiating <code>Tier4</code> class. Then modify <code>__init__.py</code> in order to import it automatically:</p> __init__.py<pre><code>from .custom_attribute import * # noqa\n</code></pre>"},{"location":"tutorials/initialize/","title":"Initialization","text":""},{"location":"tutorials/initialize/#initialize-tier4-class","title":"Initialize <code>Tier4</code> class","text":"<p><code>Tier4</code> class expects both following dataset directly structure with or without <code>&lt;VERSION&gt;</code> directory:</p> <ul> <li>With <code>&lt;VERSION&gt;</code> directory:</li> </ul> <pre><code>data/tier4/\n\u2514\u2500\u2500 &lt;VERSION&gt; ...version number\n    \u251c\u2500\u2500 annotation ...contains `*.json` files\n    \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_LEFT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_RIGHT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_LEFT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_RIGHT\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 LIDAR_CONCAT\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ...Other sensor channels\n    ...\n</code></pre> <ul> <li>Without <code>&lt;VERSION&gt;</code> directory:</li> </ul> <pre><code>data/tier4/\n\u251c\u2500\u2500 annotation ...contains `*.json` files\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_LEFT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_BACK_RIGHT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_LEFT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CAM_FRONT_RIGHT\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LIDAR_CONCAT\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...Other sensor channels\n...\n</code></pre> <p>You can initialize a <code>Tier4</code> instance as follows:</p> <pre><code>&gt;&gt;&gt; from t4_devkit import Tier4\n\n&gt;&gt;&gt; t4 = Tier4(\"data/tier4/\", verbose=True)\n======\nLoading T4 tables in `annotation`...\nReverse indexing...\nDone reverse indexing in 0.007 seconds.\n======\n13 attribute\n7 calibrated_sensor\n8 category\n2524 ego_pose\n106 instance\n1 log\n1 map\n72 sample\n2390 sample_annotation\n2524 sample_data\n4 visibility\n7 sensor\n1 scene\n1326 object_ann\n0 surface_ann\n0 keypoint\nDone loading in 0.061 seconds.\n======\n</code></pre> <p>Note that if you doesn't specify <code>revision</code> parameter in construction, it searches the latest version of the dataset. By specifying <code>revision=&lt;VERSION&gt;</code>, you can load the specific version of the dataset.</p> <pre><code>&gt;&gt;&gt; t4 = Tier4(\"data/tier4/\", revision=\"2\", verbose=True)\n</code></pre>"},{"location":"tutorials/initialize/#access-to-schema-fields","title":"Access to Schema Fields","text":""},{"location":"tutorials/initialize/#scene","title":"<code>scene</code>","text":"<pre><code>&gt;&gt;&gt; my_scene = t4.scene[0]\n</code></pre>"},{"location":"tutorials/initialize/#sample","title":"<code>sample</code>","text":"<p><code>sample</code> is an annotated keyframe of a scene at a given timestamp.</p> <pre><code>&gt;&gt;&gt; first_sample_token = my_scene.first_sample_token\n&gt;&gt;&gt; my_sample = t4.get(\"sample\", first_sample_token)\n</code></pre> <p>You can access the <code>sample_data</code> associated with this <code>sample</code>. <code>sample.data</code> returns a <code>dict</code> object consists of <code>{str: &lt;SAMPLE_DATA_TOKEN (str)&gt;}</code>.</p> <pre><code>&gt;&gt;&gt; my_sample.data\n</code></pre>"},{"location":"tutorials/initialize/#sample_data","title":"<code>sample_data</code>","text":"<p><code>sample_data</code> is references to a family of data that is collected from specific sensors.</p> <pre><code>&gt;&gt;&gt; sensor = \"CAM_FRONT\"\n&gt;&gt;&gt; t4.get(\"sample_data\", my_sample.data[sensor])\n</code></pre>"},{"location":"tutorials/initialize/#sample_annotation","title":"<code>sample_annotation</code>","text":"<p><code>sample_annotation</code> refers to any 3D bounding box in a corresponding <code>sample</code>. All location data is given with respect to the global coordinate system. You can access the list of <code>sample_annotation</code> tokens with <code>sample.ann_3ds: list[str]</code>.</p> <pre><code>&gt;&gt;&gt; my_annotation_token = my_sample.ann_3ds[0]\n&gt;&gt;&gt; t4.get(\"sample_annotation\", my_annotation_token)\n</code></pre>"},{"location":"tutorials/initialize/#instance","title":"<code>instance</code>","text":"<p>Each annotated object is instanced to be tracked.</p> <pre><code>&gt;&gt;&gt; t4.instance\n</code></pre>"},{"location":"tutorials/initialize/#category","title":"<code>category</code>","text":"<p>A <code>category</code> is the object assignment of an annotation.</p> <pre><code>&gt;&gt;&gt; t4.category\n</code></pre>"},{"location":"tutorials/initialize/#attribute","title":"<code>attribute</code>","text":"<p>An <code>attribute</code> is a property of an instance that may change throughout different parts of a scene while <code>category</code> remains the same.</p> <pre><code>&gt;&gt;&gt; t4.attribute\n</code></pre>"},{"location":"tutorials/initialize/#visibility","title":"<code>visibility</code>","text":"<p><code>visibility</code> is defined as the fraction of pixels of a particular annotation that are visible over the 6 camera feeds.</p> <pre><code>&gt;&gt;&gt; t4.visibility\n</code></pre> Warning <p>Expected <code>level</code> values in <code>visibility</code> are as below:</p> <p> <pre><code>- full    : No occlusion for the object.\n- most    : Object is occluded, but by less than 50%.\n- partial : Object is occluded, but by more than 50%.\n- none    : Object is 90-100% occluded and no points/pixels are visible.\n</code></pre></p> <p>Following old formats are also supported but deprecated:</p> <p> <pre><code>- v80-100 : full\n- v60-80  : most\n- v40-60  : partial\n- v0-40   : none\n</code></pre></p> <p>If input level does not satisfy any above cases, <code>VisibilityLevel.UNAVAILABLE</code> will be assigned.</p>"},{"location":"tutorials/initialize/#sensor","title":"<code>sensor</code>","text":"<p>T4 dataset consists of several type of sensors. The supported sensor modalities and channels are defined in <code>t4_devkit/schema/tables/sensor.py</code>.</p> <pre><code>&gt;&gt;&gt; t4.sensor\n</code></pre>"},{"location":"tutorials/initialize/#calibrated_sensor","title":"<code>calibrated_sensor</code>","text":"<p><code>calibrated_sensor</code> consists of the definition of a calibration of a particular sensor based on a vehicle.</p> <pre><code>&gt;&gt;&gt; t4.calibrated_sensor\n</code></pre> <p>Note that the <code>translation</code> and <code>rotation</code> parameters are given with respect to the ego vehicle body frame.</p>"},{"location":"tutorials/initialize/#ego_pose","title":"<code>ego_pose</code>","text":"<p><code>ego_pose</code> contains information about the <code>translation</code> and <code>rotation</code> of the ego vehicle, with respect to the global coordinate system.</p> <pre><code>&gt;&gt;&gt; t4.ego_pose\n</code></pre>"},{"location":"tutorials/render/","title":"Visualization","text":""},{"location":"tutorials/render/#rendering-with-tier4","title":"Rendering with <code>Tier4</code>","text":"<p>If you want to visualize annotation results, <code>Tier4</code> supports some rendering methods as below.</p>"},{"location":"tutorials/render/#scene","title":"Scene","text":"<pre><code>&gt;&gt;&gt; t4.render_scene()\n</code></pre>"},{"location":"tutorials/render/#specific-instances","title":"Specific Instance(s)","text":"<pre><code>&gt;&gt;&gt; instance_token = t4.instance[0].token\n&gt;&gt;&gt; t4.render_instance(instance_token)\n</code></pre> <p>Note</p> <p>You can also render multiple instances at once:</p> <p> <pre><code>&gt;&gt;&gt; instance_tokens = [inst.token for inst in t4.instance[:3]]\n&gt;&gt;&gt; t4.render_instance(instance_tokens)\n</code></pre></p>"},{"location":"tutorials/render/#pointcloud","title":"PointCloud","text":"<pre><code>&gt;&gt;&gt; t4.render_pointcloud()\n</code></pre> <p>Note</p> <p>In case of you want to ignore camera distortion, please specify <code>ignore_distortion=True</code>.</p> <p> <pre><code>&gt;&gt;&gt; t4.render_pointcloud(ignore_distortion=True)\n</code></pre></p>"},{"location":"tutorials/render/#save-recording","title":"Save Recording","text":"<p>You can save the rendering result as follows:</p> <pre><code>&gt;&gt;&gt; t4.render_scene(scene_token, save_dir=&lt;DIR_TO_SAVE&gt;)\n</code></pre> <p>When you specify <code>save_dir</code>, viewer will not be spawned on your screen.</p>"},{"location":"tutorials/render/#rendering-with-rerunviewer","title":"Rendering with <code>RerunViewer</code>","text":"<p>If you want to visualize your components, such as boxes that your ML-model estimated, <code>RerunViewer</code> allows you to visualize these components. For details, please refer to the API references.</p> <pre><code>&gt;&gt;&gt; from t4_devkit.viewer import RerunViewer\n# You need to specify `cameras` if you want to 2D spaces\n&gt;&gt;&gt; viewer = RerunViewer(app_id, cameras=&lt;CAMERA_NAMES:[str;N]&gt;)\n# Rendering 3D boxes\n&gt;&gt;&gt; viewer.render_box3ds(seconds, box3ds)\n# Rendering 2D boxes\n&gt;&gt;&gt; viewer.render_box2ds(seconds, box2ds)\n</code></pre> <p>It allows you to render boxes by specifying elements of boxes directly.</p> <pre><code># Rendering 3D boxes\n&gt;&gt;&gt; viewer.render_box3ds(seconds, centers, rotations, sizes, class_ids)\n# Rendering 2D boxes\n&gt;&gt;&gt; viewer.render_box2ds(seconds, rois, class_ids)\n</code></pre>"},{"location":"tutorials/cli/","title":"Command Line Tools","text":""},{"location":"tutorials/cli/#cli-support","title":"CLI Support","text":"<p>Following command line tools are supported:</p> <ul> <li><code>t4viz</code>: Visualize T4 dataset features</li> <li><code>t4sanity</code>: Sanity checker of T4 dataset</li> </ul>"},{"location":"tutorials/cli/t4sanity/","title":"t4sanity","text":"<p><code>t4sanity</code> performs sanity checks on T4 datasets, reporting any issues in a structured format. It checks the dataset directories and versions, tries to load them using the <code>Tier4</code> library, and reports any exceptions or warnings.</p> <pre><code>$ t4sanity -h\n\n Usage: t4sanity [OPTIONS] DB_PARENT\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    db_parent      TEXT  Path to parent directory of the databases [default: None] [required]                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v         Show the application version and exit.                                              \u2502\n\u2502 --revision            -rv   TEXT Specify if you want to load the specific version. [default: None]                   \u2502\n\u2502 --include-warning     -iw        Indicates whether to report any warnings.                                           \u2502\n\u2502 --install-completion             Install completion for the current shell.                                           \u2502\n\u2502 --show-completion                Show completion for the current shell, to copy it or customize the installation.    \u2502\n\u2502 --help                -h         Show this message and exit.                                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#shell-completion","title":"Shell Completion","text":"<p>Run the following command to install completion, and reload shell.</p> <pre><code>t4sanity --install-completion\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#usages","title":"Usages","text":"<p>As an example, we have the following the dataset structure:</p> <pre><code>&lt;DATA_ROOT&gt;\n\u251c\u2500\u2500 dataset1\n\u2502   \u2514\u2500\u2500 &lt;VERSION&gt;\n\u2502       \u251c\u2500\u2500 annotation\n\u2502       \u251c\u2500\u2500 data\n|       ...\n\u251c\u2500\u2500 dataset2\n\u2502   \u251c\u2500\u2500 annotation\n\u2502   \u251c\u2500\u2500 data\n|   ...\n...\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#exclude-warnings","title":"Exclude Warnings","text":"<p>To run sanity check ignoring warnings, providing the path to the parent directory of the datasets:</p> <pre><code>$ t4sanity &lt;DATA_ROOT&gt;\n\n&gt;&gt;&gt; Sanity checking...: 97it [00:03, 26.60it/s]\n+--------------------------------------+---------+------------------------------------------------------------------------------------------------+\n|              DatasetID               | Version |                                            Message                                             |\n+--------------------------------------+---------+------------------------------------------------------------------------------------------------+\n| 96200480-ae59-44cb-9e4e-dd9021e250e8 |    2    | bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1671, 198, 1440, 229) |\n| ca346afb-ea1a-4c5c-8117-544bd9ff6aca |    2    | bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1793, 99, 1440, 222)  |\n...\n</code></pre>"},{"location":"tutorials/cli/t4sanity/#include-warnings","title":"Include Warnings","text":"<p>To run sanity check and report any warnings, use the <code>-iw; --include-warning</code> option:</p> <pre><code>$ t4sanity &lt;DATA_ROOT&gt; -iw\n\n&gt;&gt;&gt; Sanity checking...: 97it [00:03, 29.31it/s]\n+--------------------------------------+---------+------------------------------------------------------------------------------------------------+\n|              DatasetID               | Version |                                            Message                                             |\n+--------------------------------------+---------+------------------------------------------------------------------------------------------------+\n| 96200480-ae59-44cb-9e4e-dd9021e250e8 |    2    | bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1671, 198, 1440, 229) |\n| ca346afb-ea1a-4c5c-8117-544bd9ff6aca |    2    | bbox must be (xmin, ymin, xmax, ymax) and xmin &lt;= xmax &amp;&amp; ymin &lt;= ymax: (1793, 99, 1440, 222)  |\n| ed96b707-e7f4-4a71-9e6b-571ffd56c4c4 |    2    |        level: Not available is not supported, Visibility.UNAVAILABLE will be assigned.         |\n...\n</code></pre>"},{"location":"tutorials/cli/t4viz/","title":"t4viz","text":"<p><code>t4viz</code> performs visualizing particular dataset attributes from command line.</p> <pre><code>$ t4viz -h\n\n Usage: t4viz [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v        Show the application version and exit.                                           \u2502\n\u2502 --install-completion            Install completion for the current shell.                                        \u2502\n\u2502 --show-completion               Show completion for the current shell, to copy it or customize the installation. \u2502\n\u2502 --help                -h        Show this message and exit.                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 scene        Visualize a specific scene.                                                                         \u2502\n\u2502 instance     Visualize a particular instance in the corresponding scene.                                         \u2502\n\u2502 pointcloud   Visualize pointcloud in the corresponding scene.                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorials/cli/t4viz/#shell-completion","title":"Shell Completion","text":"<p>Run the following command to install completion, and reload shell.</p> <pre><code>t4viz --install-completion\n</code></pre>"},{"location":"tutorials/cli/t4viz/#usages","title":"Usages","text":""},{"location":"tutorials/cli/t4viz/#scene","title":"Scene","text":"<p>This command performs the same behavior with <code>Tier4.render_scene(...)</code>.</p> <p>For options, run <code>t4viz scene -h</code>.</p> <pre><code>t4viz scene &lt;DATA_ROOT&gt; [OPTIONS]\n</code></pre>"},{"location":"tutorials/cli/t4viz/#specific-instances","title":"Specific Instance(s)","text":"<p>This command performs the same behavior with <code>Tier4.render_instance(...)</code>.</p> <p>For options, run <code>t4viz instance -h</code>.</p> <pre><code>t4viz instance &lt;DATA_ROOT&gt; &lt;INSTANCE_TOKEN&gt; [OPTIONS]\n</code></pre> <p>You can also specify multiple instance tokens:</p> <pre><code>t4viz instance &lt;DATA_ROOT&gt; &lt;INSTANCE_TOKEN1&gt; &lt;INSTANCE_TOKEN2&gt; ... [OPTIONS]\n</code></pre>"},{"location":"tutorials/cli/t4viz/#pointcloud","title":"PointCloud","text":"<p>This command performs the same behavior with <code>Tier4.render_pointcloud(...)</code>.</p> <p>For options, run <code>t4viz pointcloud -h</code>.</p> <pre><code>t4viz pointcloud &lt;DATA_ROOT&gt; [OPTIONS]\n</code></pre>"},{"location":"tutorials/cli/t4viz/#future-trajectories","title":"Future Trajectories","text":"<p><code>scene</code> and <code>instance</code> commands support visualizing future trajectories for each object.</p> <p>By specifying <code>-f [--future]</code> option, you can render them in the particular time length:</p> <pre><code>t4viz &lt;COMMAND&gt; ... -f &lt;FUTURE_LENGTH[s]&gt;\n</code></pre>"},{"location":"tutorials/cli/t4viz/#save-recording-as-rrd","title":"Save Recording as <code>.rrd</code>","text":"<p>You can save visualized recording with <code>-o [--output]</code> option as follows:</p> <pre><code>t4viz &lt;COMMAND&gt; ... -o &lt;OUTPUT_DIR&gt;\n</code></pre> <p>Note that if you specify <code>--output</code> option, viewer will not be spawned.</p>"}]}